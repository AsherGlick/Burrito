// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto;
namespace Proto_Node {
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class Category_ChildrenEntry_DoNotUse;
class Category_ChildrenEntry_DoNotUseDefaultTypeInternal;
extern Category_ChildrenEntry_DoNotUseDefaultTypeInternal _Category_ChildrenEntry_DoNotUse_default_instance_;
class Icon;
class IconDefaultTypeInternal;
extern IconDefaultTypeInternal _Icon_default_instance_;
class Icon_euler_rotation;
class Icon_euler_rotationDefaultTypeInternal;
extern Icon_euler_rotationDefaultTypeInternal _Icon_euler_rotation_default_instance_;
class Icon_position;
class Icon_positionDefaultTypeInternal;
extern Icon_positionDefaultTypeInternal _Icon_position_default_instance_;
class Icon_texture;
class Icon_textureDefaultTypeInternal;
extern Icon_textureDefaultTypeInternal _Icon_texture_default_instance_;
class Icon_trigger;
class Icon_triggerDefaultTypeInternal;
extern Icon_triggerDefaultTypeInternal _Icon_trigger_default_instance_;
class Icon_trigger_guid;
class Icon_trigger_guidDefaultTypeInternal;
extern Icon_trigger_guidDefaultTypeInternal _Icon_trigger_guid_default_instance_;
class Trail;
class TrailDefaultTypeInternal;
extern TrailDefaultTypeInternal _Trail_default_instance_;
class Trail_color;
class Trail_colorDefaultTypeInternal;
extern Trail_colorDefaultTypeInternal _Trail_color_default_instance_;
class Trail_festival_filter;
class Trail_festival_filterDefaultTypeInternal;
extern Trail_festival_filterDefaultTypeInternal _Trail_festival_filter_default_instance_;
class Trail_guid;
class Trail_guidDefaultTypeInternal;
extern Trail_guidDefaultTypeInternal _Trail_guid_default_instance_;
class Trail_map_type_filter;
class Trail_map_type_filterDefaultTypeInternal;
extern Trail_map_type_filterDefaultTypeInternal _Trail_map_type_filter_default_instance_;
class Trail_mount_filter;
class Trail_mount_filterDefaultTypeInternal;
extern Trail_mount_filterDefaultTypeInternal _Trail_mount_filter_default_instance_;
class Trail_profession_filter;
class Trail_profession_filterDefaultTypeInternal;
extern Trail_profession_filterDefaultTypeInternal _Trail_profession_filter_default_instance_;
class Trail_specialization_filter;
class Trail_specialization_filterDefaultTypeInternal;
extern Trail_specialization_filterDefaultTypeInternal _Trail_specialization_filter_default_instance_;
class Trail_species_filter;
class Trail_species_filterDefaultTypeInternal;
extern Trail_species_filterDefaultTypeInternal _Trail_species_filter_default_instance_;
class Trail_texture;
class Trail_textureDefaultTypeInternal;
extern Trail_textureDefaultTypeInternal _Trail_texture_default_instance_;
class Trail_trail_data;
class Trail_trail_dataDefaultTypeInternal;
extern Trail_trail_dataDefaultTypeInternal _Trail_trail_data_default_instance_;
}  // namespace Proto_Node
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto_Node::Category* Arena::CreateMaybeMessage<::Proto_Node::Category>(Arena*);
template<> ::Proto_Node::Category_ChildrenEntry_DoNotUse* Arena::CreateMaybeMessage<::Proto_Node::Category_ChildrenEntry_DoNotUse>(Arena*);
template<> ::Proto_Node::Icon* Arena::CreateMaybeMessage<::Proto_Node::Icon>(Arena*);
template<> ::Proto_Node::Icon_euler_rotation* Arena::CreateMaybeMessage<::Proto_Node::Icon_euler_rotation>(Arena*);
template<> ::Proto_Node::Icon_position* Arena::CreateMaybeMessage<::Proto_Node::Icon_position>(Arena*);
template<> ::Proto_Node::Icon_texture* Arena::CreateMaybeMessage<::Proto_Node::Icon_texture>(Arena*);
template<> ::Proto_Node::Icon_trigger* Arena::CreateMaybeMessage<::Proto_Node::Icon_trigger>(Arena*);
template<> ::Proto_Node::Icon_trigger_guid* Arena::CreateMaybeMessage<::Proto_Node::Icon_trigger_guid>(Arena*);
template<> ::Proto_Node::Trail* Arena::CreateMaybeMessage<::Proto_Node::Trail>(Arena*);
template<> ::Proto_Node::Trail_color* Arena::CreateMaybeMessage<::Proto_Node::Trail_color>(Arena*);
template<> ::Proto_Node::Trail_festival_filter* Arena::CreateMaybeMessage<::Proto_Node::Trail_festival_filter>(Arena*);
template<> ::Proto_Node::Trail_guid* Arena::CreateMaybeMessage<::Proto_Node::Trail_guid>(Arena*);
template<> ::Proto_Node::Trail_map_type_filter* Arena::CreateMaybeMessage<::Proto_Node::Trail_map_type_filter>(Arena*);
template<> ::Proto_Node::Trail_mount_filter* Arena::CreateMaybeMessage<::Proto_Node::Trail_mount_filter>(Arena*);
template<> ::Proto_Node::Trail_profession_filter* Arena::CreateMaybeMessage<::Proto_Node::Trail_profession_filter>(Arena*);
template<> ::Proto_Node::Trail_specialization_filter* Arena::CreateMaybeMessage<::Proto_Node::Trail_specialization_filter>(Arena*);
template<> ::Proto_Node::Trail_species_filter* Arena::CreateMaybeMessage<::Proto_Node::Trail_species_filter>(Arena*);
template<> ::Proto_Node::Trail_texture* Arena::CreateMaybeMessage<::Proto_Node::Trail_texture>(Arena*);
template<> ::Proto_Node::Trail_trail_data* Arena::CreateMaybeMessage<::Proto_Node::Trail_trail_data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto_Node {

enum Icon_trigger_reset_behavior : int {
  Icon_trigger_reset_behavior_always_visible = 0,
  Icon_trigger_reset_behavior_map_change = 1,
  Icon_trigger_reset_behavior_daily_reset = 2,
  Icon_trigger_reset_behavior_never = 3,
  Icon_trigger_reset_behavior_timer = 4,
  Icon_trigger_reset_behavior_map_reset = 5,
  Icon_trigger_reset_behavior_instance_change = 6,
  Icon_trigger_reset_behavior_daily_reset_per_character = 7,
  Icon_trigger_reset_behavior_weekly_reset = 8,
  Icon_trigger_reset_behavior_Icon_trigger_reset_behavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Icon_trigger_reset_behavior_Icon_trigger_reset_behavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Icon_trigger_reset_behavior_IsValid(int value);
constexpr Icon_trigger_reset_behavior Icon_trigger_reset_behavior_reset_behavior_MIN = Icon_trigger_reset_behavior_always_visible;
constexpr Icon_trigger_reset_behavior Icon_trigger_reset_behavior_reset_behavior_MAX = Icon_trigger_reset_behavior_weekly_reset;
constexpr int Icon_trigger_reset_behavior_reset_behavior_ARRAYSIZE = Icon_trigger_reset_behavior_reset_behavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Icon_trigger_reset_behavior_descriptor();
template<typename T>
inline const std::string& Icon_trigger_reset_behavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Icon_trigger_reset_behavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Icon_trigger_reset_behavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Icon_trigger_reset_behavior_descriptor(), enum_t_value);
}
inline bool Icon_trigger_reset_behavior_Parse(
    const std::string& name, Icon_trigger_reset_behavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Icon_trigger_reset_behavior>(
    Icon_trigger_reset_behavior_descriptor(), name, value);
}
enum Trail_cull_chirality : int {
  Trail_cull_chirality_none = 0,
  Trail_cull_chirality_clockwise = 1,
  Trail_cull_chirality_counter_clockwise = 2,
  Trail_cull_chirality_Trail_cull_chirality_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Trail_cull_chirality_Trail_cull_chirality_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Trail_cull_chirality_IsValid(int value);
constexpr Trail_cull_chirality Trail_cull_chirality_cull_chirality_MIN = Trail_cull_chirality_none;
constexpr Trail_cull_chirality Trail_cull_chirality_cull_chirality_MAX = Trail_cull_chirality_counter_clockwise;
constexpr int Trail_cull_chirality_cull_chirality_ARRAYSIZE = Trail_cull_chirality_cull_chirality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trail_cull_chirality_descriptor();
template<typename T>
inline const std::string& Trail_cull_chirality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Trail_cull_chirality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Trail_cull_chirality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Trail_cull_chirality_descriptor(), enum_t_value);
}
inline bool Trail_cull_chirality_Parse(
    const std::string& name, Trail_cull_chirality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Trail_cull_chirality>(
    Trail_cull_chirality_descriptor(), name, value);
}
// ===================================================================

class Category_ChildrenEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Category_ChildrenEntry_DoNotUse, 
    std::string, ::Proto_Node::Category,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Category_ChildrenEntry_DoNotUse, 
    std::string, ::Proto_Node::Category,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Category_ChildrenEntry_DoNotUse();
  Category_ChildrenEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Category_ChildrenEntry_DoNotUse& other);
  static const Category_ChildrenEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Category_ChildrenEntry_DoNotUse*>(&_Category_ChildrenEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Proto_Node.Category.ChildrenEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Category PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Category) */ {
 public:
  inline Category() : Category(nullptr) {};
  virtual ~Category();

  Category(const Category& from);
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  inline Category& operator=(Category&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }
  inline void Swap(Category* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Category* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const final {
    return CreateMaybeMessage<Category>(nullptr);
  }

  Category* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Category>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Category* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Category";
  }
  protected:
  explicit Category(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 6,
    kDisplayNameFieldNumber = 2,
    kNameFieldNumber = 4,
    kTooltipNameFieldNumber = 5,
    kDefaultVisibilityFieldNumber = 1,
    kIsSeparatorFieldNumber = 3,
  };
  // map<string, .Proto_Node.Category> children = 6;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >&
      _internal_children() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >*
      _internal_mutable_children();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >*
      mutable_children();

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_display_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_display_name(
      std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string tooltip_name = 5;
  void clear_tooltip_name();
  const std::string& tooltip_name() const;
  void set_tooltip_name(const std::string& value);
  void set_tooltip_name(std::string&& value);
  void set_tooltip_name(const char* value);
  void set_tooltip_name(const char* value, size_t size);
  std::string* mutable_tooltip_name();
  std::string* release_tooltip_name();
  void set_allocated_tooltip_name(std::string* tooltip_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tooltip_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tooltip_name(
      std::string* tooltip_name);
  private:
  const std::string& _internal_tooltip_name() const;
  void _internal_set_tooltip_name(const std::string& value);
  std::string* _internal_mutable_tooltip_name();
  public:

  // bool default_visibility = 1;
  void clear_default_visibility();
  bool default_visibility() const;
  void set_default_visibility(bool value);
  private:
  bool _internal_default_visibility() const;
  void _internal_set_default_visibility(bool value);
  public:

  // bool is_separator = 3;
  void clear_is_separator();
  bool is_separator() const;
  void set_is_separator(bool value);
  private:
  bool _internal_is_separator() const;
  void _internal_set_is_separator(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Category)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Category_ChildrenEntry_DoNotUse,
      std::string, ::Proto_Node::Category,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tooltip_name_;
  bool default_visibility_;
  bool is_separator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Icon_texture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Icon.texture) */ {
 public:
  inline Icon_texture() : Icon_texture(nullptr) {};
  virtual ~Icon_texture();

  Icon_texture(const Icon_texture& from);
  Icon_texture(Icon_texture&& from) noexcept
    : Icon_texture() {
    *this = ::std::move(from);
  }

  inline Icon_texture& operator=(const Icon_texture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Icon_texture& operator=(Icon_texture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Icon_texture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Icon_texture* internal_default_instance() {
    return reinterpret_cast<const Icon_texture*>(
               &_Icon_texture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Icon_texture& a, Icon_texture& b) {
    a.Swap(&b);
  }
  inline void Swap(Icon_texture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Icon_texture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Icon_texture* New() const final {
    return CreateMaybeMessage<Icon_texture>(nullptr);
  }

  Icon_texture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Icon_texture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Icon_texture& from);
  void MergeFrom(const Icon_texture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Icon_texture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Icon.texture";
  }
  protected:
  explicit Icon_texture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kOriginalTokenFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .google.protobuf.Any original_token = 2;
  bool has_original_token() const;
  private:
  bool _internal_has_original_token() const;
  public:
  void clear_original_token();
  const PROTOBUF_NAMESPACE_ID::Any& original_token() const;
  PROTOBUF_NAMESPACE_ID::Any* release_original_token();
  PROTOBUF_NAMESPACE_ID::Any* mutable_original_token();
  void set_allocated_original_token(PROTOBUF_NAMESPACE_ID::Any* original_token);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_original_token() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_original_token();
  public:
  void unsafe_arena_set_allocated_original_token(
      PROTOBUF_NAMESPACE_ID::Any* original_token);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_original_token();

  // @@protoc_insertion_point(class_scope:Proto_Node.Icon.texture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  PROTOBUF_NAMESPACE_ID::Any* original_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Icon_position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Icon.position) */ {
 public:
  inline Icon_position() : Icon_position(nullptr) {};
  virtual ~Icon_position();

  Icon_position(const Icon_position& from);
  Icon_position(Icon_position&& from) noexcept
    : Icon_position() {
    *this = ::std::move(from);
  }

  inline Icon_position& operator=(const Icon_position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Icon_position& operator=(Icon_position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Icon_position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Icon_position* internal_default_instance() {
    return reinterpret_cast<const Icon_position*>(
               &_Icon_position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Icon_position& a, Icon_position& b) {
    a.Swap(&b);
  }
  inline void Swap(Icon_position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Icon_position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Icon_position* New() const final {
    return CreateMaybeMessage<Icon_position>(nullptr);
  }

  Icon_position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Icon_position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Icon_position& from);
  void MergeFrom(const Icon_position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Icon_position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Icon.position";
  }
  protected:
  explicit Icon_position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Icon.position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Icon_euler_rotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Icon.euler_rotation) */ {
 public:
  inline Icon_euler_rotation() : Icon_euler_rotation(nullptr) {};
  virtual ~Icon_euler_rotation();

  Icon_euler_rotation(const Icon_euler_rotation& from);
  Icon_euler_rotation(Icon_euler_rotation&& from) noexcept
    : Icon_euler_rotation() {
    *this = ::std::move(from);
  }

  inline Icon_euler_rotation& operator=(const Icon_euler_rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Icon_euler_rotation& operator=(Icon_euler_rotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Icon_euler_rotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Icon_euler_rotation* internal_default_instance() {
    return reinterpret_cast<const Icon_euler_rotation*>(
               &_Icon_euler_rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Icon_euler_rotation& a, Icon_euler_rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Icon_euler_rotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Icon_euler_rotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Icon_euler_rotation* New() const final {
    return CreateMaybeMessage<Icon_euler_rotation>(nullptr);
  }

  Icon_euler_rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Icon_euler_rotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Icon_euler_rotation& from);
  void MergeFrom(const Icon_euler_rotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Icon_euler_rotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Icon.euler_rotation";
  }
  protected:
  explicit Icon_euler_rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Icon.euler_rotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Icon_trigger_guid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Icon.trigger.guid) */ {
 public:
  inline Icon_trigger_guid() : Icon_trigger_guid(nullptr) {};
  virtual ~Icon_trigger_guid();

  Icon_trigger_guid(const Icon_trigger_guid& from);
  Icon_trigger_guid(Icon_trigger_guid&& from) noexcept
    : Icon_trigger_guid() {
    *this = ::std::move(from);
  }

  inline Icon_trigger_guid& operator=(const Icon_trigger_guid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Icon_trigger_guid& operator=(Icon_trigger_guid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Icon_trigger_guid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Icon_trigger_guid* internal_default_instance() {
    return reinterpret_cast<const Icon_trigger_guid*>(
               &_Icon_trigger_guid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Icon_trigger_guid& a, Icon_trigger_guid& b) {
    a.Swap(&b);
  }
  inline void Swap(Icon_trigger_guid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Icon_trigger_guid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Icon_trigger_guid* New() const final {
    return CreateMaybeMessage<Icon_trigger_guid>(nullptr);
  }

  Icon_trigger_guid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Icon_trigger_guid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Icon_trigger_guid& from);
  void MergeFrom(const Icon_trigger_guid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Icon_trigger_guid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Icon.trigger.guid";
  }
  protected:
  explicit Icon_trigger_guid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
  };
  // int32 guid = 1;
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::int32 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Icon.trigger.guid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 guid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Icon_trigger PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Icon.trigger) */ {
 public:
  inline Icon_trigger() : Icon_trigger(nullptr) {};
  virtual ~Icon_trigger();

  Icon_trigger(const Icon_trigger& from);
  Icon_trigger(Icon_trigger&& from) noexcept
    : Icon_trigger() {
    *this = ::std::move(from);
  }

  inline Icon_trigger& operator=(const Icon_trigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Icon_trigger& operator=(Icon_trigger&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Icon_trigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Icon_trigger* internal_default_instance() {
    return reinterpret_cast<const Icon_trigger*>(
               &_Icon_trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Icon_trigger& a, Icon_trigger& b) {
    a.Swap(&b);
  }
  inline void Swap(Icon_trigger* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Icon_trigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Icon_trigger* New() const final {
    return CreateMaybeMessage<Icon_trigger>(nullptr);
  }

  Icon_trigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Icon_trigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Icon_trigger& from);
  void MergeFrom(const Icon_trigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Icon_trigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Icon.trigger";
  }
  protected:
  explicit Icon_trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Icon_trigger_guid guid;

  typedef Icon_trigger_reset_behavior reset_behavior;
  static constexpr reset_behavior always_visible =
    Icon_trigger_reset_behavior_always_visible;
  static constexpr reset_behavior map_change =
    Icon_trigger_reset_behavior_map_change;
  static constexpr reset_behavior daily_reset =
    Icon_trigger_reset_behavior_daily_reset;
  static constexpr reset_behavior never =
    Icon_trigger_reset_behavior_never;
  static constexpr reset_behavior timer =
    Icon_trigger_reset_behavior_timer;
  static constexpr reset_behavior map_reset =
    Icon_trigger_reset_behavior_map_reset;
  static constexpr reset_behavior instance_change =
    Icon_trigger_reset_behavior_instance_change;
  static constexpr reset_behavior daily_reset_per_character =
    Icon_trigger_reset_behavior_daily_reset_per_character;
  static constexpr reset_behavior weekly_reset =
    Icon_trigger_reset_behavior_weekly_reset;
  static inline bool reset_behavior_IsValid(int value) {
    return Icon_trigger_reset_behavior_IsValid(value);
  }
  static constexpr reset_behavior reset_behavior_MIN =
    Icon_trigger_reset_behavior_reset_behavior_MIN;
  static constexpr reset_behavior reset_behavior_MAX =
    Icon_trigger_reset_behavior_reset_behavior_MAX;
  static constexpr int reset_behavior_ARRAYSIZE =
    Icon_trigger_reset_behavior_reset_behavior_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reset_behavior_descriptor() {
    return Icon_trigger_reset_behavior_descriptor();
  }
  template<typename T>
  static inline const std::string& reset_behavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reset_behavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reset_behavior_Name.");
    return Icon_trigger_reset_behavior_Name(enum_t_value);
  }
  static inline bool reset_behavior_Parse(const std::string& name,
      reset_behavior* value) {
    return Icon_trigger_reset_behavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActionCopyClipboardFieldNumber = 5,
    kActionCopyMessageFieldNumber = 6,
    kActionInfoMessageFieldNumber = 8,
    kActionHideCategoryFieldNumber = 12,
    kActionShowCategoryFieldNumber = 13,
    kActionToggleCategoryFieldNumber = 14,
    kBounceDelayFieldNumber = 2,
    kBounceDurationFieldNumber = 3,
    kBounceHeightFieldNumber = 4,
    kAutoTriggerFieldNumber = 1,
    kHasCountdownFieldNumber = 7,
    kInvertDisplayFieldNumber = 9,
    kResetLengthFieldNumber = 10,
    kRangeFieldNumber = 11,
  };
  // string action_copy_clipboard = 5;
  void clear_action_copy_clipboard();
  const std::string& action_copy_clipboard() const;
  void set_action_copy_clipboard(const std::string& value);
  void set_action_copy_clipboard(std::string&& value);
  void set_action_copy_clipboard(const char* value);
  void set_action_copy_clipboard(const char* value, size_t size);
  std::string* mutable_action_copy_clipboard();
  std::string* release_action_copy_clipboard();
  void set_allocated_action_copy_clipboard(std::string* action_copy_clipboard);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_copy_clipboard();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_copy_clipboard(
      std::string* action_copy_clipboard);
  private:
  const std::string& _internal_action_copy_clipboard() const;
  void _internal_set_action_copy_clipboard(const std::string& value);
  std::string* _internal_mutable_action_copy_clipboard();
  public:

  // string action_copy_message = 6;
  void clear_action_copy_message();
  const std::string& action_copy_message() const;
  void set_action_copy_message(const std::string& value);
  void set_action_copy_message(std::string&& value);
  void set_action_copy_message(const char* value);
  void set_action_copy_message(const char* value, size_t size);
  std::string* mutable_action_copy_message();
  std::string* release_action_copy_message();
  void set_allocated_action_copy_message(std::string* action_copy_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_copy_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_copy_message(
      std::string* action_copy_message);
  private:
  const std::string& _internal_action_copy_message() const;
  void _internal_set_action_copy_message(const std::string& value);
  std::string* _internal_mutable_action_copy_message();
  public:

  // string action_info_message = 8;
  void clear_action_info_message();
  const std::string& action_info_message() const;
  void set_action_info_message(const std::string& value);
  void set_action_info_message(std::string&& value);
  void set_action_info_message(const char* value);
  void set_action_info_message(const char* value, size_t size);
  std::string* mutable_action_info_message();
  std::string* release_action_info_message();
  void set_allocated_action_info_message(std::string* action_info_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_info_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_info_message(
      std::string* action_info_message);
  private:
  const std::string& _internal_action_info_message() const;
  void _internal_set_action_info_message(const std::string& value);
  std::string* _internal_mutable_action_info_message();
  public:

  // .Proto_Node.Category action_hide_category = 12;
  bool has_action_hide_category() const;
  private:
  bool _internal_has_action_hide_category() const;
  public:
  void clear_action_hide_category();
  const ::Proto_Node::Category& action_hide_category() const;
  ::Proto_Node::Category* release_action_hide_category();
  ::Proto_Node::Category* mutable_action_hide_category();
  void set_allocated_action_hide_category(::Proto_Node::Category* action_hide_category);
  private:
  const ::Proto_Node::Category& _internal_action_hide_category() const;
  ::Proto_Node::Category* _internal_mutable_action_hide_category();
  public:
  void unsafe_arena_set_allocated_action_hide_category(
      ::Proto_Node::Category* action_hide_category);
  ::Proto_Node::Category* unsafe_arena_release_action_hide_category();

  // .Proto_Node.Category action_show_category = 13;
  bool has_action_show_category() const;
  private:
  bool _internal_has_action_show_category() const;
  public:
  void clear_action_show_category();
  const ::Proto_Node::Category& action_show_category() const;
  ::Proto_Node::Category* release_action_show_category();
  ::Proto_Node::Category* mutable_action_show_category();
  void set_allocated_action_show_category(::Proto_Node::Category* action_show_category);
  private:
  const ::Proto_Node::Category& _internal_action_show_category() const;
  ::Proto_Node::Category* _internal_mutable_action_show_category();
  public:
  void unsafe_arena_set_allocated_action_show_category(
      ::Proto_Node::Category* action_show_category);
  ::Proto_Node::Category* unsafe_arena_release_action_show_category();

  // .Proto_Node.Category action_toggle_category = 14;
  bool has_action_toggle_category() const;
  private:
  bool _internal_has_action_toggle_category() const;
  public:
  void clear_action_toggle_category();
  const ::Proto_Node::Category& action_toggle_category() const;
  ::Proto_Node::Category* release_action_toggle_category();
  ::Proto_Node::Category* mutable_action_toggle_category();
  void set_allocated_action_toggle_category(::Proto_Node::Category* action_toggle_category);
  private:
  const ::Proto_Node::Category& _internal_action_toggle_category() const;
  ::Proto_Node::Category* _internal_mutable_action_toggle_category();
  public:
  void unsafe_arena_set_allocated_action_toggle_category(
      ::Proto_Node::Category* action_toggle_category);
  ::Proto_Node::Category* unsafe_arena_release_action_toggle_category();

  // float bounce_delay = 2;
  void clear_bounce_delay();
  float bounce_delay() const;
  void set_bounce_delay(float value);
  private:
  float _internal_bounce_delay() const;
  void _internal_set_bounce_delay(float value);
  public:

  // float bounce_duration = 3;
  void clear_bounce_duration();
  float bounce_duration() const;
  void set_bounce_duration(float value);
  private:
  float _internal_bounce_duration() const;
  void _internal_set_bounce_duration(float value);
  public:

  // float bounce_height = 4;
  void clear_bounce_height();
  float bounce_height() const;
  void set_bounce_height(float value);
  private:
  float _internal_bounce_height() const;
  void _internal_set_bounce_height(float value);
  public:

  // bool auto_trigger = 1;
  void clear_auto_trigger();
  bool auto_trigger() const;
  void set_auto_trigger(bool value);
  private:
  bool _internal_auto_trigger() const;
  void _internal_set_auto_trigger(bool value);
  public:

  // bool has_countdown = 7;
  void clear_has_countdown();
  bool has_countdown() const;
  void set_has_countdown(bool value);
  private:
  bool _internal_has_countdown() const;
  void _internal_set_has_countdown(bool value);
  public:

  // bool invert_display = 9;
  void clear_invert_display();
  bool invert_display() const;
  void set_invert_display(bool value);
  private:
  bool _internal_invert_display() const;
  void _internal_set_invert_display(bool value);
  public:

  // float reset_length = 10;
  void clear_reset_length();
  float reset_length() const;
  void set_reset_length(float value);
  private:
  float _internal_reset_length() const;
  void _internal_set_reset_length(float value);
  public:

  // float range = 11;
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Icon.trigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_copy_clipboard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_copy_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_info_message_;
  ::Proto_Node::Category* action_hide_category_;
  ::Proto_Node::Category* action_show_category_;
  ::Proto_Node::Category* action_toggle_category_;
  float bounce_delay_;
  float bounce_duration_;
  float bounce_height_;
  bool auto_trigger_;
  bool has_countdown_;
  bool invert_display_;
  float reset_length_;
  float range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Icon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Icon) */ {
 public:
  inline Icon() : Icon(nullptr) {};
  virtual ~Icon();

  Icon(const Icon& from);
  Icon(Icon&& from) noexcept
    : Icon() {
    *this = ::std::move(from);
  }

  inline Icon& operator=(const Icon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Icon& operator=(Icon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Icon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Icon* internal_default_instance() {
    return reinterpret_cast<const Icon*>(
               &_Icon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Icon& a, Icon& b) {
    a.Swap(&b);
  }
  inline void Swap(Icon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Icon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Icon* New() const final {
    return CreateMaybeMessage<Icon>(nullptr);
  }

  Icon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Icon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Icon& from);
  void MergeFrom(const Icon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Icon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Icon";
  }
  protected:
  explicit Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Icon_texture texture;
  typedef Icon_position position;
  typedef Icon_euler_rotation euler_rotation;
  typedef Icon_trigger trigger;

  // accessors -------------------------------------------------------

  enum : int {
    kBhdraftScheduleFieldNumber = 17,
    kTipDescriptionFieldNumber = 19,
    kTipNameFieldNumber = 20,
    kAchievementBitFieldNumber = 1,
    kAchievementIdFieldNumber = 2,
    kAlphaFieldNumber = 3,
    kDistanceFadeEndFieldNumber = 5,
    kDistanceFadeStartFieldNumber = 6,
    kHeightOffsetFieldNumber = 7,
    kTentativeScaleFieldNumber = 8,
    kMapDisplaySizeFieldNumber = 9,
    kMapIdFieldNumber = 10,
    kMaximumSizeOnScreenFieldNumber = 11,
    kCanFadeFieldNumber = 4,
    kTentativeRenderIngameFieldNumber = 13,
    kTentativeRenderOnMapFieldNumber = 14,
    kTentativeRenderOnMinimapFieldNumber = 15,
    kMinimumSizeOnScreenFieldNumber = 12,
    kScaleOnMapWithZoomFieldNumber = 16,
    kBhdraftScheduleDurationFieldNumber = 18,
  };
  // string bhdraft__schedule = 17;
  void clear_bhdraft__schedule();
  const std::string& bhdraft__schedule() const;
  void set_bhdraft__schedule(const std::string& value);
  void set_bhdraft__schedule(std::string&& value);
  void set_bhdraft__schedule(const char* value);
  void set_bhdraft__schedule(const char* value, size_t size);
  std::string* mutable_bhdraft__schedule();
  std::string* release_bhdraft__schedule();
  void set_allocated_bhdraft__schedule(std::string* bhdraft__schedule);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bhdraft__schedule();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bhdraft__schedule(
      std::string* bhdraft__schedule);
  private:
  const std::string& _internal_bhdraft__schedule() const;
  void _internal_set_bhdraft__schedule(const std::string& value);
  std::string* _internal_mutable_bhdraft__schedule();
  public:

  // string tip_description = 19;
  void clear_tip_description();
  const std::string& tip_description() const;
  void set_tip_description(const std::string& value);
  void set_tip_description(std::string&& value);
  void set_tip_description(const char* value);
  void set_tip_description(const char* value, size_t size);
  std::string* mutable_tip_description();
  std::string* release_tip_description();
  void set_allocated_tip_description(std::string* tip_description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tip_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tip_description(
      std::string* tip_description);
  private:
  const std::string& _internal_tip_description() const;
  void _internal_set_tip_description(const std::string& value);
  std::string* _internal_mutable_tip_description();
  public:

  // string tip_name = 20;
  void clear_tip_name();
  const std::string& tip_name() const;
  void set_tip_name(const std::string& value);
  void set_tip_name(std::string&& value);
  void set_tip_name(const char* value);
  void set_tip_name(const char* value, size_t size);
  std::string* mutable_tip_name();
  std::string* release_tip_name();
  void set_allocated_tip_name(std::string* tip_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tip_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tip_name(
      std::string* tip_name);
  private:
  const std::string& _internal_tip_name() const;
  void _internal_set_tip_name(const std::string& value);
  std::string* _internal_mutable_tip_name();
  public:

  // fixed32 achievement_bit = 1;
  void clear_achievement_bit();
  ::PROTOBUF_NAMESPACE_ID::uint32 achievement_bit() const;
  void set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_achievement_bit() const;
  void _internal_set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 achievement_id = 2;
  void clear_achievement_id();
  ::PROTOBUF_NAMESPACE_ID::int32 achievement_id() const;
  void set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_achievement_id() const;
  void _internal_set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha = 3;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float distance_fade_end = 5;
  void clear_distance_fade_end();
  float distance_fade_end() const;
  void set_distance_fade_end(float value);
  private:
  float _internal_distance_fade_end() const;
  void _internal_set_distance_fade_end(float value);
  public:

  // float distance_fade_start = 6;
  void clear_distance_fade_start();
  float distance_fade_start() const;
  void set_distance_fade_start(float value);
  private:
  float _internal_distance_fade_start() const;
  void _internal_set_distance_fade_start(float value);
  public:

  // float height_offset = 7;
  void clear_height_offset();
  float height_offset() const;
  void set_height_offset(float value);
  private:
  float _internal_height_offset() const;
  void _internal_set_height_offset(float value);
  public:

  // float __tentative__scale = 8;
  void clear___tentative__scale();
  float __tentative__scale() const;
  void set___tentative__scale(float value);
  private:
  float _internal___tentative__scale() const;
  void _internal_set___tentative__scale(float value);
  public:

  // int32 map_display_size = 9;
  void clear_map_display_size();
  ::PROTOBUF_NAMESPACE_ID::int32 map_display_size() const;
  void set_map_display_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_display_size() const;
  void _internal_set_map_display_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 10;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maximum_size_on_screen = 11;
  void clear_maximum_size_on_screen();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_size_on_screen() const;
  void set_maximum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximum_size_on_screen() const;
  void _internal_set_maximum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool can_fade = 4;
  void clear_can_fade();
  bool can_fade() const;
  void set_can_fade(bool value);
  private:
  bool _internal_can_fade() const;
  void _internal_set_can_fade(bool value);
  public:

  // bool __tentative__render_ingame = 13;
  void clear___tentative__render_ingame();
  bool __tentative__render_ingame() const;
  void set___tentative__render_ingame(bool value);
  private:
  bool _internal___tentative__render_ingame() const;
  void _internal_set___tentative__render_ingame(bool value);
  public:

  // bool __tentative__render_on_map = 14;
  void clear___tentative__render_on_map();
  bool __tentative__render_on_map() const;
  void set___tentative__render_on_map(bool value);
  private:
  bool _internal___tentative__render_on_map() const;
  void _internal_set___tentative__render_on_map(bool value);
  public:

  // bool __tentative__render_on_minimap = 15;
  void clear___tentative__render_on_minimap();
  bool __tentative__render_on_minimap() const;
  void set___tentative__render_on_minimap(bool value);
  private:
  bool _internal___tentative__render_on_minimap() const;
  void _internal_set___tentative__render_on_minimap(bool value);
  public:

  // int32 minimum_size_on_screen = 12;
  void clear_minimum_size_on_screen();
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_size_on_screen() const;
  void set_minimum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minimum_size_on_screen() const;
  void _internal_set_minimum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool scale_on_map_with_zoom = 16;
  void clear_scale_on_map_with_zoom();
  bool scale_on_map_with_zoom() const;
  void set_scale_on_map_with_zoom(bool value);
  private:
  bool _internal_scale_on_map_with_zoom() const;
  void _internal_set_scale_on_map_with_zoom(bool value);
  public:

  // float bhdraft__schedule_duration = 18;
  void clear_bhdraft__schedule_duration();
  float bhdraft__schedule_duration() const;
  void set_bhdraft__schedule_duration(float value);
  private:
  float _internal_bhdraft__schedule_duration() const;
  void _internal_set_bhdraft__schedule_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Icon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bhdraft__schedule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tip_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tip_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 achievement_bit_;
  ::PROTOBUF_NAMESPACE_ID::int32 achievement_id_;
  float alpha_;
  float distance_fade_end_;
  float distance_fade_start_;
  float height_offset_;
  float __tentative__scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_display_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_size_on_screen_;
  bool can_fade_;
  bool __tentative__render_ingame_;
  bool __tentative__render_on_map_;
  bool __tentative__render_on_minimap_;
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_size_on_screen_;
  bool scale_on_map_with_zoom_;
  float bhdraft__schedule_duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.color) */ {
 public:
  inline Trail_color() : Trail_color(nullptr) {};
  virtual ~Trail_color();

  Trail_color(const Trail_color& from);
  Trail_color(Trail_color&& from) noexcept
    : Trail_color() {
    *this = ::std::move(from);
  }

  inline Trail_color& operator=(const Trail_color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_color& operator=(Trail_color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_color* internal_default_instance() {
    return reinterpret_cast<const Trail_color*>(
               &_Trail_color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Trail_color& a, Trail_color& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_color* New() const final {
    return CreateMaybeMessage<Trail_color>(nullptr);
  }

  Trail_color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_color& from);
  void MergeFrom(const Trail_color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.color";
  }
  protected:
  explicit Trail_color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHexFieldNumber = 1,
  };
  // string hex = 1;
  void clear_hex();
  const std::string& hex() const;
  void set_hex(const std::string& value);
  void set_hex(std::string&& value);
  void set_hex(const char* value);
  void set_hex(const char* value, size_t size);
  std::string* mutable_hex();
  std::string* release_hex();
  void set_allocated_hex(std::string* hex);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hex();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hex(
      std::string* hex);
  private:
  const std::string& _internal_hex() const;
  void _internal_set_hex(const std::string& value);
  std::string* _internal_mutable_hex();
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_festival_filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.festival_filter) */ {
 public:
  inline Trail_festival_filter() : Trail_festival_filter(nullptr) {};
  virtual ~Trail_festival_filter();

  Trail_festival_filter(const Trail_festival_filter& from);
  Trail_festival_filter(Trail_festival_filter&& from) noexcept
    : Trail_festival_filter() {
    *this = ::std::move(from);
  }

  inline Trail_festival_filter& operator=(const Trail_festival_filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_festival_filter& operator=(Trail_festival_filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_festival_filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_festival_filter* internal_default_instance() {
    return reinterpret_cast<const Trail_festival_filter*>(
               &_Trail_festival_filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Trail_festival_filter& a, Trail_festival_filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_festival_filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_festival_filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_festival_filter* New() const final {
    return CreateMaybeMessage<Trail_festival_filter>(nullptr);
  }

  Trail_festival_filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_festival_filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_festival_filter& from);
  void MergeFrom(const Trail_festival_filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_festival_filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.festival_filter";
  }
  protected:
  explicit Trail_festival_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDragonbashFieldNumber = 1,
    kFestivalOfTheFourWindsFieldNumber = 2,
    kHalloweenFieldNumber = 3,
    kLunarNewYearFieldNumber = 4,
    kSuperAdventureFestivalFieldNumber = 5,
    kWintersdayFieldNumber = 6,
    kNoneFieldNumber = 7,
  };
  // bool dragonbash = 1;
  void clear_dragonbash();
  bool dragonbash() const;
  void set_dragonbash(bool value);
  private:
  bool _internal_dragonbash() const;
  void _internal_set_dragonbash(bool value);
  public:

  // bool festival_of_the_four_winds = 2;
  void clear_festival_of_the_four_winds();
  bool festival_of_the_four_winds() const;
  void set_festival_of_the_four_winds(bool value);
  private:
  bool _internal_festival_of_the_four_winds() const;
  void _internal_set_festival_of_the_four_winds(bool value);
  public:

  // bool halloween = 3;
  void clear_halloween();
  bool halloween() const;
  void set_halloween(bool value);
  private:
  bool _internal_halloween() const;
  void _internal_set_halloween(bool value);
  public:

  // bool lunar_new_year = 4;
  void clear_lunar_new_year();
  bool lunar_new_year() const;
  void set_lunar_new_year(bool value);
  private:
  bool _internal_lunar_new_year() const;
  void _internal_set_lunar_new_year(bool value);
  public:

  // bool super_adventure_festival = 5;
  void clear_super_adventure_festival();
  bool super_adventure_festival() const;
  void set_super_adventure_festival(bool value);
  private:
  bool _internal_super_adventure_festival() const;
  void _internal_set_super_adventure_festival(bool value);
  public:

  // bool wintersday = 6;
  void clear_wintersday();
  bool wintersday() const;
  void set_wintersday(bool value);
  private:
  bool _internal_wintersday() const;
  void _internal_set_wintersday(bool value);
  public:

  // bool none = 7;
  void clear_none();
  bool none() const;
  void set_none(bool value);
  private:
  bool _internal_none() const;
  void _internal_set_none(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.festival_filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool dragonbash_;
  bool festival_of_the_four_winds_;
  bool halloween_;
  bool lunar_new_year_;
  bool super_adventure_festival_;
  bool wintersday_;
  bool none_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_guid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.guid) */ {
 public:
  inline Trail_guid() : Trail_guid(nullptr) {};
  virtual ~Trail_guid();

  Trail_guid(const Trail_guid& from);
  Trail_guid(Trail_guid&& from) noexcept
    : Trail_guid() {
    *this = ::std::move(from);
  }

  inline Trail_guid& operator=(const Trail_guid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_guid& operator=(Trail_guid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_guid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_guid* internal_default_instance() {
    return reinterpret_cast<const Trail_guid*>(
               &_Trail_guid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Trail_guid& a, Trail_guid& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_guid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_guid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_guid* New() const final {
    return CreateMaybeMessage<Trail_guid>(nullptr);
  }

  Trail_guid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_guid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_guid& from);
  void MergeFrom(const Trail_guid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_guid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.guid";
  }
  protected:
  explicit Trail_guid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
  };
  // int32 guid = 1;
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::int32 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.guid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 guid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_map_type_filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.map_type_filter) */ {
 public:
  inline Trail_map_type_filter() : Trail_map_type_filter(nullptr) {};
  virtual ~Trail_map_type_filter();

  Trail_map_type_filter(const Trail_map_type_filter& from);
  Trail_map_type_filter(Trail_map_type_filter&& from) noexcept
    : Trail_map_type_filter() {
    *this = ::std::move(from);
  }

  inline Trail_map_type_filter& operator=(const Trail_map_type_filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_map_type_filter& operator=(Trail_map_type_filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_map_type_filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_map_type_filter* internal_default_instance() {
    return reinterpret_cast<const Trail_map_type_filter*>(
               &_Trail_map_type_filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Trail_map_type_filter& a, Trail_map_type_filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_map_type_filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_map_type_filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_map_type_filter* New() const final {
    return CreateMaybeMessage<Trail_map_type_filter>(nullptr);
  }

  Trail_map_type_filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_map_type_filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_map_type_filter& from);
  void MergeFrom(const Trail_map_type_filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_map_type_filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.map_type_filter";
  }
  protected:
  explicit Trail_map_type_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnknownMapFieldNumber = 1,
    kRedirectMapFieldNumber = 2,
    kCharacterCreateMapFieldNumber = 3,
    kPvpMapFieldNumber = 4,
    kGvgMapFieldNumber = 5,
    kInstanceMapFieldNumber = 6,
    kPublicMapFieldNumber = 7,
    kTournamentMapFieldNumber = 8,
    kTutorialMapFieldNumber = 9,
    kUserTournamentMapFieldNumber = 10,
    kCenterMapFieldNumber = 11,
    kEternalBattlegroundsMapFieldNumber = 12,
    kBluehomeMapFieldNumber = 13,
    kBlueBorderlandsMapFieldNumber = 14,
    kGreenHomeMapFieldNumber = 15,
    kGreenBorderlandsMapFieldNumber = 16,
    kRedHomeMapFieldNumber = 17,
    kRedBorderlandsMapFieldNumber = 18,
    kFortunesValeMapFieldNumber = 19,
    kJumpPuzzleMapFieldNumber = 20,
    kObsidianSanctumMapFieldNumber = 21,
    kEdgeOfTheMistsMapFieldNumber = 22,
    kPublicMiniMapFieldNumber = 23,
    kWvwLoungeMapFieldNumber = 24,
  };
  // bool unknown_map = 1;
  void clear_unknown_map();
  bool unknown_map() const;
  void set_unknown_map(bool value);
  private:
  bool _internal_unknown_map() const;
  void _internal_set_unknown_map(bool value);
  public:

  // bool redirect_map = 2;
  void clear_redirect_map();
  bool redirect_map() const;
  void set_redirect_map(bool value);
  private:
  bool _internal_redirect_map() const;
  void _internal_set_redirect_map(bool value);
  public:

  // bool character_create_map = 3;
  void clear_character_create_map();
  bool character_create_map() const;
  void set_character_create_map(bool value);
  private:
  bool _internal_character_create_map() const;
  void _internal_set_character_create_map(bool value);
  public:

  // bool pvp_map = 4;
  void clear_pvp_map();
  bool pvp_map() const;
  void set_pvp_map(bool value);
  private:
  bool _internal_pvp_map() const;
  void _internal_set_pvp_map(bool value);
  public:

  // bool gvg_map = 5;
  void clear_gvg_map();
  bool gvg_map() const;
  void set_gvg_map(bool value);
  private:
  bool _internal_gvg_map() const;
  void _internal_set_gvg_map(bool value);
  public:

  // bool instance_map = 6;
  void clear_instance_map();
  bool instance_map() const;
  void set_instance_map(bool value);
  private:
  bool _internal_instance_map() const;
  void _internal_set_instance_map(bool value);
  public:

  // bool public_map = 7;
  void clear_public_map();
  bool public_map() const;
  void set_public_map(bool value);
  private:
  bool _internal_public_map() const;
  void _internal_set_public_map(bool value);
  public:

  // bool tournament_map = 8;
  void clear_tournament_map();
  bool tournament_map() const;
  void set_tournament_map(bool value);
  private:
  bool _internal_tournament_map() const;
  void _internal_set_tournament_map(bool value);
  public:

  // bool tutorial_map = 9;
  void clear_tutorial_map();
  bool tutorial_map() const;
  void set_tutorial_map(bool value);
  private:
  bool _internal_tutorial_map() const;
  void _internal_set_tutorial_map(bool value);
  public:

  // bool user_tournament_map = 10;
  void clear_user_tournament_map();
  bool user_tournament_map() const;
  void set_user_tournament_map(bool value);
  private:
  bool _internal_user_tournament_map() const;
  void _internal_set_user_tournament_map(bool value);
  public:

  // bool center_map = 11;
  void clear_center_map();
  bool center_map() const;
  void set_center_map(bool value);
  private:
  bool _internal_center_map() const;
  void _internal_set_center_map(bool value);
  public:

  // bool eternal_battlegrounds_map = 12;
  void clear_eternal_battlegrounds_map();
  bool eternal_battlegrounds_map() const;
  void set_eternal_battlegrounds_map(bool value);
  private:
  bool _internal_eternal_battlegrounds_map() const;
  void _internal_set_eternal_battlegrounds_map(bool value);
  public:

  // bool bluehome_map = 13;
  void clear_bluehome_map();
  bool bluehome_map() const;
  void set_bluehome_map(bool value);
  private:
  bool _internal_bluehome_map() const;
  void _internal_set_bluehome_map(bool value);
  public:

  // bool blue_borderlands_map = 14;
  void clear_blue_borderlands_map();
  bool blue_borderlands_map() const;
  void set_blue_borderlands_map(bool value);
  private:
  bool _internal_blue_borderlands_map() const;
  void _internal_set_blue_borderlands_map(bool value);
  public:

  // bool green_home_map = 15;
  void clear_green_home_map();
  bool green_home_map() const;
  void set_green_home_map(bool value);
  private:
  bool _internal_green_home_map() const;
  void _internal_set_green_home_map(bool value);
  public:

  // bool green_borderlands_map = 16;
  void clear_green_borderlands_map();
  bool green_borderlands_map() const;
  void set_green_borderlands_map(bool value);
  private:
  bool _internal_green_borderlands_map() const;
  void _internal_set_green_borderlands_map(bool value);
  public:

  // bool red_home_map = 17;
  void clear_red_home_map();
  bool red_home_map() const;
  void set_red_home_map(bool value);
  private:
  bool _internal_red_home_map() const;
  void _internal_set_red_home_map(bool value);
  public:

  // bool red_borderlands_map = 18;
  void clear_red_borderlands_map();
  bool red_borderlands_map() const;
  void set_red_borderlands_map(bool value);
  private:
  bool _internal_red_borderlands_map() const;
  void _internal_set_red_borderlands_map(bool value);
  public:

  // bool fortunes_vale_map = 19;
  void clear_fortunes_vale_map();
  bool fortunes_vale_map() const;
  void set_fortunes_vale_map(bool value);
  private:
  bool _internal_fortunes_vale_map() const;
  void _internal_set_fortunes_vale_map(bool value);
  public:

  // bool jump_puzzle_map = 20;
  void clear_jump_puzzle_map();
  bool jump_puzzle_map() const;
  void set_jump_puzzle_map(bool value);
  private:
  bool _internal_jump_puzzle_map() const;
  void _internal_set_jump_puzzle_map(bool value);
  public:

  // bool obsidian_sanctum_map = 21;
  void clear_obsidian_sanctum_map();
  bool obsidian_sanctum_map() const;
  void set_obsidian_sanctum_map(bool value);
  private:
  bool _internal_obsidian_sanctum_map() const;
  void _internal_set_obsidian_sanctum_map(bool value);
  public:

  // bool edge_of_the_mists_map = 22;
  void clear_edge_of_the_mists_map();
  bool edge_of_the_mists_map() const;
  void set_edge_of_the_mists_map(bool value);
  private:
  bool _internal_edge_of_the_mists_map() const;
  void _internal_set_edge_of_the_mists_map(bool value);
  public:

  // bool public_mini_map = 23;
  void clear_public_mini_map();
  bool public_mini_map() const;
  void set_public_mini_map(bool value);
  private:
  bool _internal_public_mini_map() const;
  void _internal_set_public_mini_map(bool value);
  public:

  // bool wvw_lounge_map = 24;
  void clear_wvw_lounge_map();
  bool wvw_lounge_map() const;
  void set_wvw_lounge_map(bool value);
  private:
  bool _internal_wvw_lounge_map() const;
  void _internal_set_wvw_lounge_map(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.map_type_filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool unknown_map_;
  bool redirect_map_;
  bool character_create_map_;
  bool pvp_map_;
  bool gvg_map_;
  bool instance_map_;
  bool public_map_;
  bool tournament_map_;
  bool tutorial_map_;
  bool user_tournament_map_;
  bool center_map_;
  bool eternal_battlegrounds_map_;
  bool bluehome_map_;
  bool blue_borderlands_map_;
  bool green_home_map_;
  bool green_borderlands_map_;
  bool red_home_map_;
  bool red_borderlands_map_;
  bool fortunes_vale_map_;
  bool jump_puzzle_map_;
  bool obsidian_sanctum_map_;
  bool edge_of_the_mists_map_;
  bool public_mini_map_;
  bool wvw_lounge_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_mount_filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.mount_filter) */ {
 public:
  inline Trail_mount_filter() : Trail_mount_filter(nullptr) {};
  virtual ~Trail_mount_filter();

  Trail_mount_filter(const Trail_mount_filter& from);
  Trail_mount_filter(Trail_mount_filter&& from) noexcept
    : Trail_mount_filter() {
    *this = ::std::move(from);
  }

  inline Trail_mount_filter& operator=(const Trail_mount_filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_mount_filter& operator=(Trail_mount_filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_mount_filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_mount_filter* internal_default_instance() {
    return reinterpret_cast<const Trail_mount_filter*>(
               &_Trail_mount_filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Trail_mount_filter& a, Trail_mount_filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_mount_filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_mount_filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_mount_filter* New() const final {
    return CreateMaybeMessage<Trail_mount_filter>(nullptr);
  }

  Trail_mount_filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_mount_filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_mount_filter& from);
  void MergeFrom(const Trail_mount_filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_mount_filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.mount_filter";
  }
  protected:
  explicit Trail_mount_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRaptorFieldNumber = 1,
    kSpringerFieldNumber = 2,
    kSkimmerFieldNumber = 3,
    kJackalFieldNumber = 4,
    kGriffonFieldNumber = 5,
    kRollerBeetleFieldNumber = 6,
    kWarclawFieldNumber = 7,
    kSkyscaleeFieldNumber = 8,
    kSkiffFieldNumber = 9,
    kSeigeTurtleFieldNumber = 10,
  };
  // bool raptor = 1;
  void clear_raptor();
  bool raptor() const;
  void set_raptor(bool value);
  private:
  bool _internal_raptor() const;
  void _internal_set_raptor(bool value);
  public:

  // bool springer = 2;
  void clear_springer();
  bool springer() const;
  void set_springer(bool value);
  private:
  bool _internal_springer() const;
  void _internal_set_springer(bool value);
  public:

  // bool skimmer = 3;
  void clear_skimmer();
  bool skimmer() const;
  void set_skimmer(bool value);
  private:
  bool _internal_skimmer() const;
  void _internal_set_skimmer(bool value);
  public:

  // bool jackal = 4;
  void clear_jackal();
  bool jackal() const;
  void set_jackal(bool value);
  private:
  bool _internal_jackal() const;
  void _internal_set_jackal(bool value);
  public:

  // bool griffon = 5;
  void clear_griffon();
  bool griffon() const;
  void set_griffon(bool value);
  private:
  bool _internal_griffon() const;
  void _internal_set_griffon(bool value);
  public:

  // bool roller_beetle = 6;
  void clear_roller_beetle();
  bool roller_beetle() const;
  void set_roller_beetle(bool value);
  private:
  bool _internal_roller_beetle() const;
  void _internal_set_roller_beetle(bool value);
  public:

  // bool warclaw = 7;
  void clear_warclaw();
  bool warclaw() const;
  void set_warclaw(bool value);
  private:
  bool _internal_warclaw() const;
  void _internal_set_warclaw(bool value);
  public:

  // bool skyscalee = 8;
  void clear_skyscalee();
  bool skyscalee() const;
  void set_skyscalee(bool value);
  private:
  bool _internal_skyscalee() const;
  void _internal_set_skyscalee(bool value);
  public:

  // bool skiff = 9;
  void clear_skiff();
  bool skiff() const;
  void set_skiff(bool value);
  private:
  bool _internal_skiff() const;
  void _internal_set_skiff(bool value);
  public:

  // bool seige_turtle = 10;
  void clear_seige_turtle();
  bool seige_turtle() const;
  void set_seige_turtle(bool value);
  private:
  bool _internal_seige_turtle() const;
  void _internal_set_seige_turtle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.mount_filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool raptor_;
  bool springer_;
  bool skimmer_;
  bool jackal_;
  bool griffon_;
  bool roller_beetle_;
  bool warclaw_;
  bool skyscalee_;
  bool skiff_;
  bool seige_turtle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_profession_filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.profession_filter) */ {
 public:
  inline Trail_profession_filter() : Trail_profession_filter(nullptr) {};
  virtual ~Trail_profession_filter();

  Trail_profession_filter(const Trail_profession_filter& from);
  Trail_profession_filter(Trail_profession_filter&& from) noexcept
    : Trail_profession_filter() {
    *this = ::std::move(from);
  }

  inline Trail_profession_filter& operator=(const Trail_profession_filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_profession_filter& operator=(Trail_profession_filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_profession_filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_profession_filter* internal_default_instance() {
    return reinterpret_cast<const Trail_profession_filter*>(
               &_Trail_profession_filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Trail_profession_filter& a, Trail_profession_filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_profession_filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_profession_filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_profession_filter* New() const final {
    return CreateMaybeMessage<Trail_profession_filter>(nullptr);
  }

  Trail_profession_filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_profession_filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_profession_filter& from);
  void MergeFrom(const Trail_profession_filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_profession_filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.profession_filter";
  }
  protected:
  explicit Trail_profession_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuardianFieldNumber = 1,
    kWarriorFieldNumber = 2,
    kEngineerFieldNumber = 3,
    kRangerFieldNumber = 4,
    kThiefFieldNumber = 5,
    kElementalistFieldNumber = 6,
    kMesmerFieldNumber = 7,
    kNecromancerFieldNumber = 8,
    kRevenantntFieldNumber = 9,
  };
  // bool guardian = 1;
  void clear_guardian();
  bool guardian() const;
  void set_guardian(bool value);
  private:
  bool _internal_guardian() const;
  void _internal_set_guardian(bool value);
  public:

  // bool warrior = 2;
  void clear_warrior();
  bool warrior() const;
  void set_warrior(bool value);
  private:
  bool _internal_warrior() const;
  void _internal_set_warrior(bool value);
  public:

  // bool engineer = 3;
  void clear_engineer();
  bool engineer() const;
  void set_engineer(bool value);
  private:
  bool _internal_engineer() const;
  void _internal_set_engineer(bool value);
  public:

  // bool ranger = 4;
  void clear_ranger();
  bool ranger() const;
  void set_ranger(bool value);
  private:
  bool _internal_ranger() const;
  void _internal_set_ranger(bool value);
  public:

  // bool thief = 5;
  void clear_thief();
  bool thief() const;
  void set_thief(bool value);
  private:
  bool _internal_thief() const;
  void _internal_set_thief(bool value);
  public:

  // bool elementalist = 6;
  void clear_elementalist();
  bool elementalist() const;
  void set_elementalist(bool value);
  private:
  bool _internal_elementalist() const;
  void _internal_set_elementalist(bool value);
  public:

  // bool mesmer = 7;
  void clear_mesmer();
  bool mesmer() const;
  void set_mesmer(bool value);
  private:
  bool _internal_mesmer() const;
  void _internal_set_mesmer(bool value);
  public:

  // bool necromancer = 8;
  void clear_necromancer();
  bool necromancer() const;
  void set_necromancer(bool value);
  private:
  bool _internal_necromancer() const;
  void _internal_set_necromancer(bool value);
  public:

  // bool revenantnt = 9;
  void clear_revenantnt();
  bool revenantnt() const;
  void set_revenantnt(bool value);
  private:
  bool _internal_revenantnt() const;
  void _internal_set_revenantnt(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.profession_filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool guardian_;
  bool warrior_;
  bool engineer_;
  bool ranger_;
  bool thief_;
  bool elementalist_;
  bool mesmer_;
  bool necromancer_;
  bool revenantnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_specialization_filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.specialization_filter) */ {
 public:
  inline Trail_specialization_filter() : Trail_specialization_filter(nullptr) {};
  virtual ~Trail_specialization_filter();

  Trail_specialization_filter(const Trail_specialization_filter& from);
  Trail_specialization_filter(Trail_specialization_filter&& from) noexcept
    : Trail_specialization_filter() {
    *this = ::std::move(from);
  }

  inline Trail_specialization_filter& operator=(const Trail_specialization_filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_specialization_filter& operator=(Trail_specialization_filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_specialization_filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_specialization_filter* internal_default_instance() {
    return reinterpret_cast<const Trail_specialization_filter*>(
               &_Trail_specialization_filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Trail_specialization_filter& a, Trail_specialization_filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_specialization_filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_specialization_filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_specialization_filter* New() const final {
    return CreateMaybeMessage<Trail_specialization_filter>(nullptr);
  }

  Trail_specialization_filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_specialization_filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_specialization_filter& from);
  void MergeFrom(const Trail_specialization_filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_specialization_filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.specialization_filter";
  }
  protected:
  explicit Trail_specialization_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangerWildernessSurvivalFieldNumber = 33,
    kRevenantCorruptionFieldNumber = 14,
    kRevenantDevastationFieldNumber = 15,
    kRevenantInvocationFieldNumber = 3,
    kMesmerDuelingFieldNumber = 1,
    kMesmerIllusionsFieldNumber = 24,
    kMesmerInspirationFieldNumber = 23,
    kNecromancerBloodMagicFieldNumber = 19,
    kWarriorDefenseFieldNumber = 22,
    kWarriorDisciplineFieldNumber = 51,
    kWarriorStrengthFieldNumber = 4,
    kWarriorTacticsFieldNumber = 11,
    kRangerBeastmasteryFieldNumber = 32,
    kRangerMarksmanshipFieldNumber = 8,
    kRangerNatureMagicFieldNumber = 25,
    kRangerSkirmishingFieldNumber = 30,
    kNecromancerReaperFieldNumber = 34,
    kRangerDruidFieldNumber = 5,
    kRevenantHeraldFieldNumber = 52,
    kThiefDaredevilFieldNumber = 7,
    kEngineerToolsFieldNumber = 21,
    kGuardianHonorFieldNumber = 49,
    kGuardianRadianceFieldNumber = 16,
    kGuardianValorFieldNumber = 13,
    kRevenantRetributionFieldNumber = 9,
    kRevenantSalvationFieldNumber = 12,
    kThiefAcrobaticsFieldNumber = 54,
    kThiefCriticalStrikesFieldNumber = 35,
    kElementalistArcaneFieldNumber = 37,
    kElementalistEarthFieldNumber = 26,
    kElementalistFireFieldNumber = 31,
    kElementalistWaterFieldNumber = 17,
    kEngineerAlchemyFieldNumber = 29,
    kEngineerExplosivesFieldNumber = 6,
    kEngineerFirearmsFieldNumber = 38,
    kEngineerInventionsFieldNumber = 47,
    kThiefDeadlyArtsFieldNumber = 28,
    kThiefShadowArtsFieldNumber = 20,
    kThiefTrickeryFieldNumber = 44,
    kWarriorArmsFieldNumber = 36,
    kGuardianVirtuesFieldNumber = 46,
    kGuardianZealFieldNumber = 42,
    kMesmerChaosFieldNumber = 45,
    kMesmerDominationFieldNumber = 10,
    kNecromancerCursesFieldNumber = 39,
    kNecromancerDeathMagicFieldNumber = 2,
    kNecromancerSoulReapingFieldNumber = 50,
    kNecromancerSpiteFieldNumber = 53,
    kElementalistTempestFieldNumber = 48,
    kEngineerScrapperFieldNumber = 43,
    kGuardianDragonhunterFieldNumber = 27,
    kMesmerChronomancerFieldNumber = 40,
    kWarriorBerserkerFieldNumber = 18,
    kElementalistWeaverFieldNumber = 56,
    kEngineerHolosmithFieldNumber = 57,
    kGuardianFirebrandFieldNumber = 62,
    kMesmerMirageFieldNumber = 59,
    kNecromancerScourgeFieldNumber = 60,
    kRangerSoulbeastFieldNumber = 55,
    kRevenantRenegadeFieldNumber = 63,
    kRevenantVindicatorFieldNumber = 69,
    kThiefSpecterFieldNumber = 71,
    kWarriorBladeswornFieldNumber = 68,
    kElementalistAirFieldNumber = 41,
    kThiefDeadeyeFieldNumber = 58,
    kWarriorSpellbreakerFieldNumber = 61,
    kElmentalistCatalystFieldNumber = 67,
    kEngineerMechanistFieldNumber = 70,
    kGuardianWillbenderFieldNumber = 65,
    kMesmerVirtuosoFieldNumber = 66,
    kNecromancerHarbingerFieldNumber = 64,
    kRangerUntamedFieldNumber = 72,
  };
  // bool ranger_wilderness_survival = 33;
  void clear_ranger_wilderness_survival();
  bool ranger_wilderness_survival() const;
  void set_ranger_wilderness_survival(bool value);
  private:
  bool _internal_ranger_wilderness_survival() const;
  void _internal_set_ranger_wilderness_survival(bool value);
  public:

  // bool revenant_corruption = 14;
  void clear_revenant_corruption();
  bool revenant_corruption() const;
  void set_revenant_corruption(bool value);
  private:
  bool _internal_revenant_corruption() const;
  void _internal_set_revenant_corruption(bool value);
  public:

  // bool revenant_devastation = 15;
  void clear_revenant_devastation();
  bool revenant_devastation() const;
  void set_revenant_devastation(bool value);
  private:
  bool _internal_revenant_devastation() const;
  void _internal_set_revenant_devastation(bool value);
  public:

  // bool revenant_invocation = 3;
  void clear_revenant_invocation();
  bool revenant_invocation() const;
  void set_revenant_invocation(bool value);
  private:
  bool _internal_revenant_invocation() const;
  void _internal_set_revenant_invocation(bool value);
  public:

  // bool mesmer_dueling = 1;
  void clear_mesmer_dueling();
  bool mesmer_dueling() const;
  void set_mesmer_dueling(bool value);
  private:
  bool _internal_mesmer_dueling() const;
  void _internal_set_mesmer_dueling(bool value);
  public:

  // bool mesmer_illusions = 24;
  void clear_mesmer_illusions();
  bool mesmer_illusions() const;
  void set_mesmer_illusions(bool value);
  private:
  bool _internal_mesmer_illusions() const;
  void _internal_set_mesmer_illusions(bool value);
  public:

  // bool mesmer_inspiration = 23;
  void clear_mesmer_inspiration();
  bool mesmer_inspiration() const;
  void set_mesmer_inspiration(bool value);
  private:
  bool _internal_mesmer_inspiration() const;
  void _internal_set_mesmer_inspiration(bool value);
  public:

  // bool necromancer_blood_magic = 19;
  void clear_necromancer_blood_magic();
  bool necromancer_blood_magic() const;
  void set_necromancer_blood_magic(bool value);
  private:
  bool _internal_necromancer_blood_magic() const;
  void _internal_set_necromancer_blood_magic(bool value);
  public:

  // bool warrior_defense = 22;
  void clear_warrior_defense();
  bool warrior_defense() const;
  void set_warrior_defense(bool value);
  private:
  bool _internal_warrior_defense() const;
  void _internal_set_warrior_defense(bool value);
  public:

  // bool warrior_discipline = 51;
  void clear_warrior_discipline();
  bool warrior_discipline() const;
  void set_warrior_discipline(bool value);
  private:
  bool _internal_warrior_discipline() const;
  void _internal_set_warrior_discipline(bool value);
  public:

  // bool warrior_strength = 4;
  void clear_warrior_strength();
  bool warrior_strength() const;
  void set_warrior_strength(bool value);
  private:
  bool _internal_warrior_strength() const;
  void _internal_set_warrior_strength(bool value);
  public:

  // bool warrior_tactics = 11;
  void clear_warrior_tactics();
  bool warrior_tactics() const;
  void set_warrior_tactics(bool value);
  private:
  bool _internal_warrior_tactics() const;
  void _internal_set_warrior_tactics(bool value);
  public:

  // bool ranger_beastmastery = 32;
  void clear_ranger_beastmastery();
  bool ranger_beastmastery() const;
  void set_ranger_beastmastery(bool value);
  private:
  bool _internal_ranger_beastmastery() const;
  void _internal_set_ranger_beastmastery(bool value);
  public:

  // bool ranger_marksmanship = 8;
  void clear_ranger_marksmanship();
  bool ranger_marksmanship() const;
  void set_ranger_marksmanship(bool value);
  private:
  bool _internal_ranger_marksmanship() const;
  void _internal_set_ranger_marksmanship(bool value);
  public:

  // bool ranger_nature_magic = 25;
  void clear_ranger_nature_magic();
  bool ranger_nature_magic() const;
  void set_ranger_nature_magic(bool value);
  private:
  bool _internal_ranger_nature_magic() const;
  void _internal_set_ranger_nature_magic(bool value);
  public:

  // bool ranger_skirmishing = 30;
  void clear_ranger_skirmishing();
  bool ranger_skirmishing() const;
  void set_ranger_skirmishing(bool value);
  private:
  bool _internal_ranger_skirmishing() const;
  void _internal_set_ranger_skirmishing(bool value);
  public:

  // bool necromancer_reaper = 34;
  void clear_necromancer_reaper();
  bool necromancer_reaper() const;
  void set_necromancer_reaper(bool value);
  private:
  bool _internal_necromancer_reaper() const;
  void _internal_set_necromancer_reaper(bool value);
  public:

  // bool ranger_druid = 5;
  void clear_ranger_druid();
  bool ranger_druid() const;
  void set_ranger_druid(bool value);
  private:
  bool _internal_ranger_druid() const;
  void _internal_set_ranger_druid(bool value);
  public:

  // bool revenant_herald = 52;
  void clear_revenant_herald();
  bool revenant_herald() const;
  void set_revenant_herald(bool value);
  private:
  bool _internal_revenant_herald() const;
  void _internal_set_revenant_herald(bool value);
  public:

  // bool thief_daredevil = 7;
  void clear_thief_daredevil();
  bool thief_daredevil() const;
  void set_thief_daredevil(bool value);
  private:
  bool _internal_thief_daredevil() const;
  void _internal_set_thief_daredevil(bool value);
  public:

  // bool engineer_tools = 21;
  void clear_engineer_tools();
  bool engineer_tools() const;
  void set_engineer_tools(bool value);
  private:
  bool _internal_engineer_tools() const;
  void _internal_set_engineer_tools(bool value);
  public:

  // bool guardian_honor = 49;
  void clear_guardian_honor();
  bool guardian_honor() const;
  void set_guardian_honor(bool value);
  private:
  bool _internal_guardian_honor() const;
  void _internal_set_guardian_honor(bool value);
  public:

  // bool guardian_radiance = 16;
  void clear_guardian_radiance();
  bool guardian_radiance() const;
  void set_guardian_radiance(bool value);
  private:
  bool _internal_guardian_radiance() const;
  void _internal_set_guardian_radiance(bool value);
  public:

  // bool guardian_valor = 13;
  void clear_guardian_valor();
  bool guardian_valor() const;
  void set_guardian_valor(bool value);
  private:
  bool _internal_guardian_valor() const;
  void _internal_set_guardian_valor(bool value);
  public:

  // bool revenant_retribution = 9;
  void clear_revenant_retribution();
  bool revenant_retribution() const;
  void set_revenant_retribution(bool value);
  private:
  bool _internal_revenant_retribution() const;
  void _internal_set_revenant_retribution(bool value);
  public:

  // bool revenant_salvation = 12;
  void clear_revenant_salvation();
  bool revenant_salvation() const;
  void set_revenant_salvation(bool value);
  private:
  bool _internal_revenant_salvation() const;
  void _internal_set_revenant_salvation(bool value);
  public:

  // bool thief_acrobatics = 54;
  void clear_thief_acrobatics();
  bool thief_acrobatics() const;
  void set_thief_acrobatics(bool value);
  private:
  bool _internal_thief_acrobatics() const;
  void _internal_set_thief_acrobatics(bool value);
  public:

  // bool thief_critical_strikes = 35;
  void clear_thief_critical_strikes();
  bool thief_critical_strikes() const;
  void set_thief_critical_strikes(bool value);
  private:
  bool _internal_thief_critical_strikes() const;
  void _internal_set_thief_critical_strikes(bool value);
  public:

  // bool elementalist_arcane = 37;
  void clear_elementalist_arcane();
  bool elementalist_arcane() const;
  void set_elementalist_arcane(bool value);
  private:
  bool _internal_elementalist_arcane() const;
  void _internal_set_elementalist_arcane(bool value);
  public:

  // bool elementalist_earth = 26;
  void clear_elementalist_earth();
  bool elementalist_earth() const;
  void set_elementalist_earth(bool value);
  private:
  bool _internal_elementalist_earth() const;
  void _internal_set_elementalist_earth(bool value);
  public:

  // bool elementalist_fire = 31;
  void clear_elementalist_fire();
  bool elementalist_fire() const;
  void set_elementalist_fire(bool value);
  private:
  bool _internal_elementalist_fire() const;
  void _internal_set_elementalist_fire(bool value);
  public:

  // bool elementalist_water = 17;
  void clear_elementalist_water();
  bool elementalist_water() const;
  void set_elementalist_water(bool value);
  private:
  bool _internal_elementalist_water() const;
  void _internal_set_elementalist_water(bool value);
  public:

  // bool engineer_alchemy = 29;
  void clear_engineer_alchemy();
  bool engineer_alchemy() const;
  void set_engineer_alchemy(bool value);
  private:
  bool _internal_engineer_alchemy() const;
  void _internal_set_engineer_alchemy(bool value);
  public:

  // bool engineer_explosives = 6;
  void clear_engineer_explosives();
  bool engineer_explosives() const;
  void set_engineer_explosives(bool value);
  private:
  bool _internal_engineer_explosives() const;
  void _internal_set_engineer_explosives(bool value);
  public:

  // bool engineer_firearms = 38;
  void clear_engineer_firearms();
  bool engineer_firearms() const;
  void set_engineer_firearms(bool value);
  private:
  bool _internal_engineer_firearms() const;
  void _internal_set_engineer_firearms(bool value);
  public:

  // bool engineer_inventions = 47;
  void clear_engineer_inventions();
  bool engineer_inventions() const;
  void set_engineer_inventions(bool value);
  private:
  bool _internal_engineer_inventions() const;
  void _internal_set_engineer_inventions(bool value);
  public:

  // bool thief_deadly_arts = 28;
  void clear_thief_deadly_arts();
  bool thief_deadly_arts() const;
  void set_thief_deadly_arts(bool value);
  private:
  bool _internal_thief_deadly_arts() const;
  void _internal_set_thief_deadly_arts(bool value);
  public:

  // bool thief_shadow_arts = 20;
  void clear_thief_shadow_arts();
  bool thief_shadow_arts() const;
  void set_thief_shadow_arts(bool value);
  private:
  bool _internal_thief_shadow_arts() const;
  void _internal_set_thief_shadow_arts(bool value);
  public:

  // bool thief_trickery = 44;
  void clear_thief_trickery();
  bool thief_trickery() const;
  void set_thief_trickery(bool value);
  private:
  bool _internal_thief_trickery() const;
  void _internal_set_thief_trickery(bool value);
  public:

  // bool warrior_arms = 36;
  void clear_warrior_arms();
  bool warrior_arms() const;
  void set_warrior_arms(bool value);
  private:
  bool _internal_warrior_arms() const;
  void _internal_set_warrior_arms(bool value);
  public:

  // bool guardian_virtues = 46;
  void clear_guardian_virtues();
  bool guardian_virtues() const;
  void set_guardian_virtues(bool value);
  private:
  bool _internal_guardian_virtues() const;
  void _internal_set_guardian_virtues(bool value);
  public:

  // bool guardian_zeal = 42;
  void clear_guardian_zeal();
  bool guardian_zeal() const;
  void set_guardian_zeal(bool value);
  private:
  bool _internal_guardian_zeal() const;
  void _internal_set_guardian_zeal(bool value);
  public:

  // bool mesmer_chaos = 45;
  void clear_mesmer_chaos();
  bool mesmer_chaos() const;
  void set_mesmer_chaos(bool value);
  private:
  bool _internal_mesmer_chaos() const;
  void _internal_set_mesmer_chaos(bool value);
  public:

  // bool mesmer_domination = 10;
  void clear_mesmer_domination();
  bool mesmer_domination() const;
  void set_mesmer_domination(bool value);
  private:
  bool _internal_mesmer_domination() const;
  void _internal_set_mesmer_domination(bool value);
  public:

  // bool necromancer_curses = 39;
  void clear_necromancer_curses();
  bool necromancer_curses() const;
  void set_necromancer_curses(bool value);
  private:
  bool _internal_necromancer_curses() const;
  void _internal_set_necromancer_curses(bool value);
  public:

  // bool necromancer_death_magic = 2;
  void clear_necromancer_death_magic();
  bool necromancer_death_magic() const;
  void set_necromancer_death_magic(bool value);
  private:
  bool _internal_necromancer_death_magic() const;
  void _internal_set_necromancer_death_magic(bool value);
  public:

  // bool necromancer_soul_reaping = 50;
  void clear_necromancer_soul_reaping();
  bool necromancer_soul_reaping() const;
  void set_necromancer_soul_reaping(bool value);
  private:
  bool _internal_necromancer_soul_reaping() const;
  void _internal_set_necromancer_soul_reaping(bool value);
  public:

  // bool necromancer_spite = 53;
  void clear_necromancer_spite();
  bool necromancer_spite() const;
  void set_necromancer_spite(bool value);
  private:
  bool _internal_necromancer_spite() const;
  void _internal_set_necromancer_spite(bool value);
  public:

  // bool elementalist_tempest = 48;
  void clear_elementalist_tempest();
  bool elementalist_tempest() const;
  void set_elementalist_tempest(bool value);
  private:
  bool _internal_elementalist_tempest() const;
  void _internal_set_elementalist_tempest(bool value);
  public:

  // bool engineer_scrapper = 43;
  void clear_engineer_scrapper();
  bool engineer_scrapper() const;
  void set_engineer_scrapper(bool value);
  private:
  bool _internal_engineer_scrapper() const;
  void _internal_set_engineer_scrapper(bool value);
  public:

  // bool guardian_dragonhunter = 27;
  void clear_guardian_dragonhunter();
  bool guardian_dragonhunter() const;
  void set_guardian_dragonhunter(bool value);
  private:
  bool _internal_guardian_dragonhunter() const;
  void _internal_set_guardian_dragonhunter(bool value);
  public:

  // bool mesmer_chronomancer = 40;
  void clear_mesmer_chronomancer();
  bool mesmer_chronomancer() const;
  void set_mesmer_chronomancer(bool value);
  private:
  bool _internal_mesmer_chronomancer() const;
  void _internal_set_mesmer_chronomancer(bool value);
  public:

  // bool warrior_berserker = 18;
  void clear_warrior_berserker();
  bool warrior_berserker() const;
  void set_warrior_berserker(bool value);
  private:
  bool _internal_warrior_berserker() const;
  void _internal_set_warrior_berserker(bool value);
  public:

  // bool elementalist_weaver = 56;
  void clear_elementalist_weaver();
  bool elementalist_weaver() const;
  void set_elementalist_weaver(bool value);
  private:
  bool _internal_elementalist_weaver() const;
  void _internal_set_elementalist_weaver(bool value);
  public:

  // bool engineer_holosmith = 57;
  void clear_engineer_holosmith();
  bool engineer_holosmith() const;
  void set_engineer_holosmith(bool value);
  private:
  bool _internal_engineer_holosmith() const;
  void _internal_set_engineer_holosmith(bool value);
  public:

  // bool guardian_firebrand = 62;
  void clear_guardian_firebrand();
  bool guardian_firebrand() const;
  void set_guardian_firebrand(bool value);
  private:
  bool _internal_guardian_firebrand() const;
  void _internal_set_guardian_firebrand(bool value);
  public:

  // bool mesmer_mirage = 59;
  void clear_mesmer_mirage();
  bool mesmer_mirage() const;
  void set_mesmer_mirage(bool value);
  private:
  bool _internal_mesmer_mirage() const;
  void _internal_set_mesmer_mirage(bool value);
  public:

  // bool necromancer_scourge = 60;
  void clear_necromancer_scourge();
  bool necromancer_scourge() const;
  void set_necromancer_scourge(bool value);
  private:
  bool _internal_necromancer_scourge() const;
  void _internal_set_necromancer_scourge(bool value);
  public:

  // bool ranger_soulbeast = 55;
  void clear_ranger_soulbeast();
  bool ranger_soulbeast() const;
  void set_ranger_soulbeast(bool value);
  private:
  bool _internal_ranger_soulbeast() const;
  void _internal_set_ranger_soulbeast(bool value);
  public:

  // bool revenant_renegade = 63;
  void clear_revenant_renegade();
  bool revenant_renegade() const;
  void set_revenant_renegade(bool value);
  private:
  bool _internal_revenant_renegade() const;
  void _internal_set_revenant_renegade(bool value);
  public:

  // bool revenant_vindicator = 69;
  void clear_revenant_vindicator();
  bool revenant_vindicator() const;
  void set_revenant_vindicator(bool value);
  private:
  bool _internal_revenant_vindicator() const;
  void _internal_set_revenant_vindicator(bool value);
  public:

  // bool thief_specter = 71;
  void clear_thief_specter();
  bool thief_specter() const;
  void set_thief_specter(bool value);
  private:
  bool _internal_thief_specter() const;
  void _internal_set_thief_specter(bool value);
  public:

  // bool warrior_bladesworn = 68;
  void clear_warrior_bladesworn();
  bool warrior_bladesworn() const;
  void set_warrior_bladesworn(bool value);
  private:
  bool _internal_warrior_bladesworn() const;
  void _internal_set_warrior_bladesworn(bool value);
  public:

  // bool elementalist_air = 41;
  void clear_elementalist_air();
  bool elementalist_air() const;
  void set_elementalist_air(bool value);
  private:
  bool _internal_elementalist_air() const;
  void _internal_set_elementalist_air(bool value);
  public:

  // bool thief_deadeye = 58;
  void clear_thief_deadeye();
  bool thief_deadeye() const;
  void set_thief_deadeye(bool value);
  private:
  bool _internal_thief_deadeye() const;
  void _internal_set_thief_deadeye(bool value);
  public:

  // bool warrior_spellbreaker = 61;
  void clear_warrior_spellbreaker();
  bool warrior_spellbreaker() const;
  void set_warrior_spellbreaker(bool value);
  private:
  bool _internal_warrior_spellbreaker() const;
  void _internal_set_warrior_spellbreaker(bool value);
  public:

  // bool elmentalist_catalyst = 67;
  void clear_elmentalist_catalyst();
  bool elmentalist_catalyst() const;
  void set_elmentalist_catalyst(bool value);
  private:
  bool _internal_elmentalist_catalyst() const;
  void _internal_set_elmentalist_catalyst(bool value);
  public:

  // bool engineer_mechanist = 70;
  void clear_engineer_mechanist();
  bool engineer_mechanist() const;
  void set_engineer_mechanist(bool value);
  private:
  bool _internal_engineer_mechanist() const;
  void _internal_set_engineer_mechanist(bool value);
  public:

  // bool guardian_willbender = 65;
  void clear_guardian_willbender();
  bool guardian_willbender() const;
  void set_guardian_willbender(bool value);
  private:
  bool _internal_guardian_willbender() const;
  void _internal_set_guardian_willbender(bool value);
  public:

  // bool mesmer_virtuoso = 66;
  void clear_mesmer_virtuoso();
  bool mesmer_virtuoso() const;
  void set_mesmer_virtuoso(bool value);
  private:
  bool _internal_mesmer_virtuoso() const;
  void _internal_set_mesmer_virtuoso(bool value);
  public:

  // bool necromancer_harbinger = 64;
  void clear_necromancer_harbinger();
  bool necromancer_harbinger() const;
  void set_necromancer_harbinger(bool value);
  private:
  bool _internal_necromancer_harbinger() const;
  void _internal_set_necromancer_harbinger(bool value);
  public:

  // bool ranger_untamed = 72;
  void clear_ranger_untamed();
  bool ranger_untamed() const;
  void set_ranger_untamed(bool value);
  private:
  bool _internal_ranger_untamed() const;
  void _internal_set_ranger_untamed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.specialization_filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ranger_wilderness_survival_;
  bool revenant_corruption_;
  bool revenant_devastation_;
  bool revenant_invocation_;
  bool mesmer_dueling_;
  bool mesmer_illusions_;
  bool mesmer_inspiration_;
  bool necromancer_blood_magic_;
  bool warrior_defense_;
  bool warrior_discipline_;
  bool warrior_strength_;
  bool warrior_tactics_;
  bool ranger_beastmastery_;
  bool ranger_marksmanship_;
  bool ranger_nature_magic_;
  bool ranger_skirmishing_;
  bool necromancer_reaper_;
  bool ranger_druid_;
  bool revenant_herald_;
  bool thief_daredevil_;
  bool engineer_tools_;
  bool guardian_honor_;
  bool guardian_radiance_;
  bool guardian_valor_;
  bool revenant_retribution_;
  bool revenant_salvation_;
  bool thief_acrobatics_;
  bool thief_critical_strikes_;
  bool elementalist_arcane_;
  bool elementalist_earth_;
  bool elementalist_fire_;
  bool elementalist_water_;
  bool engineer_alchemy_;
  bool engineer_explosives_;
  bool engineer_firearms_;
  bool engineer_inventions_;
  bool thief_deadly_arts_;
  bool thief_shadow_arts_;
  bool thief_trickery_;
  bool warrior_arms_;
  bool guardian_virtues_;
  bool guardian_zeal_;
  bool mesmer_chaos_;
  bool mesmer_domination_;
  bool necromancer_curses_;
  bool necromancer_death_magic_;
  bool necromancer_soul_reaping_;
  bool necromancer_spite_;
  bool elementalist_tempest_;
  bool engineer_scrapper_;
  bool guardian_dragonhunter_;
  bool mesmer_chronomancer_;
  bool warrior_berserker_;
  bool elementalist_weaver_;
  bool engineer_holosmith_;
  bool guardian_firebrand_;
  bool mesmer_mirage_;
  bool necromancer_scourge_;
  bool ranger_soulbeast_;
  bool revenant_renegade_;
  bool revenant_vindicator_;
  bool thief_specter_;
  bool warrior_bladesworn_;
  bool elementalist_air_;
  bool thief_deadeye_;
  bool warrior_spellbreaker_;
  bool elmentalist_catalyst_;
  bool engineer_mechanist_;
  bool guardian_willbender_;
  bool mesmer_virtuoso_;
  bool necromancer_harbinger_;
  bool ranger_untamed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_species_filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.species_filter) */ {
 public:
  inline Trail_species_filter() : Trail_species_filter(nullptr) {};
  virtual ~Trail_species_filter();

  Trail_species_filter(const Trail_species_filter& from);
  Trail_species_filter(Trail_species_filter&& from) noexcept
    : Trail_species_filter() {
    *this = ::std::move(from);
  }

  inline Trail_species_filter& operator=(const Trail_species_filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_species_filter& operator=(Trail_species_filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_species_filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_species_filter* internal_default_instance() {
    return reinterpret_cast<const Trail_species_filter*>(
               &_Trail_species_filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Trail_species_filter& a, Trail_species_filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_species_filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_species_filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_species_filter* New() const final {
    return CreateMaybeMessage<Trail_species_filter>(nullptr);
  }

  Trail_species_filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_species_filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_species_filter& from);
  void MergeFrom(const Trail_species_filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_species_filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.species_filter";
  }
  protected:
  explicit Trail_species_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsuraFieldNumber = 1,
    kCharrFieldNumber = 2,
    kHumanFieldNumber = 3,
    kNornFieldNumber = 4,
    kSylvariFieldNumber = 5,
  };
  // bool asura = 1;
  void clear_asura();
  bool asura() const;
  void set_asura(bool value);
  private:
  bool _internal_asura() const;
  void _internal_set_asura(bool value);
  public:

  // bool charr = 2;
  void clear_charr();
  bool charr() const;
  void set_charr(bool value);
  private:
  bool _internal_charr() const;
  void _internal_set_charr(bool value);
  public:

  // bool human = 3;
  void clear_human();
  bool human() const;
  void set_human(bool value);
  private:
  bool _internal_human() const;
  void _internal_set_human(bool value);
  public:

  // bool norn = 4;
  void clear_norn();
  bool norn() const;
  void set_norn(bool value);
  private:
  bool _internal_norn() const;
  void _internal_set_norn(bool value);
  public:

  // bool sylvari = 5;
  void clear_sylvari();
  bool sylvari() const;
  void set_sylvari(bool value);
  private:
  bool _internal_sylvari() const;
  void _internal_set_sylvari(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.species_filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool asura_;
  bool charr_;
  bool human_;
  bool norn_;
  bool sylvari_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_texture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.texture) */ {
 public:
  inline Trail_texture() : Trail_texture(nullptr) {};
  virtual ~Trail_texture();

  Trail_texture(const Trail_texture& from);
  Trail_texture(Trail_texture&& from) noexcept
    : Trail_texture() {
    *this = ::std::move(from);
  }

  inline Trail_texture& operator=(const Trail_texture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_texture& operator=(Trail_texture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_texture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_texture* internal_default_instance() {
    return reinterpret_cast<const Trail_texture*>(
               &_Trail_texture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Trail_texture& a, Trail_texture& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_texture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_texture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_texture* New() const final {
    return CreateMaybeMessage<Trail_texture>(nullptr);
  }

  Trail_texture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_texture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_texture& from);
  void MergeFrom(const Trail_texture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_texture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.texture";
  }
  protected:
  explicit Trail_texture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kOriginalTokenFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .google.protobuf.Any original_token = 2;
  bool has_original_token() const;
  private:
  bool _internal_has_original_token() const;
  public:
  void clear_original_token();
  const PROTOBUF_NAMESPACE_ID::Any& original_token() const;
  PROTOBUF_NAMESPACE_ID::Any* release_original_token();
  PROTOBUF_NAMESPACE_ID::Any* mutable_original_token();
  void set_allocated_original_token(PROTOBUF_NAMESPACE_ID::Any* original_token);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_original_token() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_original_token();
  public:
  void unsafe_arena_set_allocated_original_token(
      PROTOBUF_NAMESPACE_ID::Any* original_token);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_original_token();

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.texture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  PROTOBUF_NAMESPACE_ID::Any* original_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail_trail_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail.trail_data) */ {
 public:
  inline Trail_trail_data() : Trail_trail_data(nullptr) {};
  virtual ~Trail_trail_data();

  Trail_trail_data(const Trail_trail_data& from);
  Trail_trail_data(Trail_trail_data&& from) noexcept
    : Trail_trail_data() {
    *this = ::std::move(from);
  }

  inline Trail_trail_data& operator=(const Trail_trail_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail_trail_data& operator=(Trail_trail_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail_trail_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail_trail_data* internal_default_instance() {
    return reinterpret_cast<const Trail_trail_data*>(
               &_Trail_trail_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Trail_trail_data& a, Trail_trail_data& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail_trail_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail_trail_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail_trail_data* New() const final {
    return CreateMaybeMessage<Trail_trail_data>(nullptr);
  }

  Trail_trail_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail_trail_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail_trail_data& from);
  void MergeFrom(const Trail_trail_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail_trail_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail.trail_data";
  }
  protected:
  explicit Trail_trail_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrailDataFieldNumber = 1,
  };
  // string trail_data = 1;
  void clear_trail_data();
  const std::string& trail_data() const;
  void set_trail_data(const std::string& value);
  void set_trail_data(std::string&& value);
  void set_trail_data(const char* value);
  void set_trail_data(const char* value, size_t size);
  std::string* mutable_trail_data();
  std::string* release_trail_data();
  void set_allocated_trail_data(std::string* trail_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trail_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trail_data(
      std::string* trail_data);
  private:
  const std::string& _internal_trail_data() const;
  void _internal_set_trail_data(const std::string& value);
  std::string* _internal_mutable_trail_data();
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail.trail_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trail_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class Trail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto_Node.Trail) */ {
 public:
  inline Trail() : Trail(nullptr) {};
  virtual ~Trail();

  Trail(const Trail& from);
  Trail(Trail&& from) noexcept
    : Trail() {
    *this = ::std::move(from);
  }

  inline Trail& operator=(const Trail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail& operator=(Trail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail* internal_default_instance() {
    return reinterpret_cast<const Trail*>(
               &_Trail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Trail& a, Trail& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail* New() const final {
    return CreateMaybeMessage<Trail>(nullptr);
  }

  Trail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail& from);
  void MergeFrom(const Trail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto_Node.Trail";
  }
  protected:
  explicit Trail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Trail_color color;
  typedef Trail_festival_filter festival_filter;
  typedef Trail_guid guid;
  typedef Trail_map_type_filter map_type_filter;
  typedef Trail_mount_filter mount_filter;
  typedef Trail_profession_filter profession_filter;
  typedef Trail_specialization_filter specialization_filter;
  typedef Trail_species_filter species_filter;
  typedef Trail_texture texture;
  typedef Trail_trail_data trail_data;

  typedef Trail_cull_chirality cull_chirality;
  static constexpr cull_chirality none =
    Trail_cull_chirality_none;
  static constexpr cull_chirality clockwise =
    Trail_cull_chirality_clockwise;
  static constexpr cull_chirality counter_clockwise =
    Trail_cull_chirality_counter_clockwise;
  static inline bool cull_chirality_IsValid(int value) {
    return Trail_cull_chirality_IsValid(value);
  }
  static constexpr cull_chirality cull_chirality_MIN =
    Trail_cull_chirality_cull_chirality_MIN;
  static constexpr cull_chirality cull_chirality_MAX =
    Trail_cull_chirality_cull_chirality_MAX;
  static constexpr int cull_chirality_ARRAYSIZE =
    Trail_cull_chirality_cull_chirality_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  cull_chirality_descriptor() {
    return Trail_cull_chirality_descriptor();
  }
  template<typename T>
  static inline const std::string& cull_chirality_Name(T enum_t_value) {
    static_assert(::std::is_same<T, cull_chirality>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function cull_chirality_Name.");
    return Trail_cull_chirality_Name(enum_t_value);
  }
  static inline bool cull_chirality_Parse(const std::string& name,
      cull_chirality* value) {
    return Trail_cull_chirality_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBhdraftScheduleFieldNumber = 9,
    kCategoryFieldNumber = 12,
    kAchievementBitFieldNumber = 1,
    kAchievementIdFieldNumber = 2,
    kAlphaFieldNumber = 3,
    kAnimationSpeedFieldNumber = 4,
    kDistanceFadeEndFieldNumber = 6,
    kCanFadeFieldNumber = 5,
    kIsWallFieldNumber = 8,
    kDistanceFadeStartFieldNumber = 7,
    kBhdraftScheduleDurationFieldNumber = 10,
    kScaleFieldNumber = 11,
    kMapIdFieldNumber = 13,
  };
  // string bhdraft__schedule = 9;
  void clear_bhdraft__schedule();
  const std::string& bhdraft__schedule() const;
  void set_bhdraft__schedule(const std::string& value);
  void set_bhdraft__schedule(std::string&& value);
  void set_bhdraft__schedule(const char* value);
  void set_bhdraft__schedule(const char* value, size_t size);
  std::string* mutable_bhdraft__schedule();
  std::string* release_bhdraft__schedule();
  void set_allocated_bhdraft__schedule(std::string* bhdraft__schedule);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bhdraft__schedule();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bhdraft__schedule(
      std::string* bhdraft__schedule);
  private:
  const std::string& _internal_bhdraft__schedule() const;
  void _internal_set_bhdraft__schedule(const std::string& value);
  std::string* _internal_mutable_bhdraft__schedule();
  public:

  // .Proto_Node.Category category = 12;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const ::Proto_Node::Category& category() const;
  ::Proto_Node::Category* release_category();
  ::Proto_Node::Category* mutable_category();
  void set_allocated_category(::Proto_Node::Category* category);
  private:
  const ::Proto_Node::Category& _internal_category() const;
  ::Proto_Node::Category* _internal_mutable_category();
  public:
  void unsafe_arena_set_allocated_category(
      ::Proto_Node::Category* category);
  ::Proto_Node::Category* unsafe_arena_release_category();

  // fixed32 achievement_bit = 1;
  void clear_achievement_bit();
  ::PROTOBUF_NAMESPACE_ID::uint32 achievement_bit() const;
  void set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_achievement_bit() const;
  void _internal_set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 achievement_id = 2;
  void clear_achievement_id();
  ::PROTOBUF_NAMESPACE_ID::int32 achievement_id() const;
  void set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_achievement_id() const;
  void _internal_set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha = 3;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float animation_speed = 4;
  void clear_animation_speed();
  float animation_speed() const;
  void set_animation_speed(float value);
  private:
  float _internal_animation_speed() const;
  void _internal_set_animation_speed(float value);
  public:

  // float distance_fade_end = 6;
  void clear_distance_fade_end();
  float distance_fade_end() const;
  void set_distance_fade_end(float value);
  private:
  float _internal_distance_fade_end() const;
  void _internal_set_distance_fade_end(float value);
  public:

  // bool can_fade = 5;
  void clear_can_fade();
  bool can_fade() const;
  void set_can_fade(bool value);
  private:
  bool _internal_can_fade() const;
  void _internal_set_can_fade(bool value);
  public:

  // bool is_wall = 8;
  void clear_is_wall();
  bool is_wall() const;
  void set_is_wall(bool value);
  private:
  bool _internal_is_wall() const;
  void _internal_set_is_wall(bool value);
  public:

  // float distance_fade_start = 7;
  void clear_distance_fade_start();
  float distance_fade_start() const;
  void set_distance_fade_start(float value);
  private:
  float _internal_distance_fade_start() const;
  void _internal_set_distance_fade_start(float value);
  public:

  // float bhdraft__schedule_duration = 10;
  void clear_bhdraft__schedule_duration();
  float bhdraft__schedule_duration() const;
  void set_bhdraft__schedule_duration(float value);
  private:
  float _internal_bhdraft__schedule_duration() const;
  void _internal_set_bhdraft__schedule_duration(float value);
  public:

  // float scale = 11;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // int32 map_id = 13;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto_Node.Trail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bhdraft__schedule_;
  ::Proto_Node::Category* category_;
  ::PROTOBUF_NAMESPACE_ID::uint32 achievement_bit_;
  ::PROTOBUF_NAMESPACE_ID::int32 achievement_id_;
  float alpha_;
  float animation_speed_;
  float distance_fade_end_;
  bool can_fade_;
  bool is_wall_;
  float distance_fade_start_;
  float bhdraft__schedule_duration_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Category

// bool default_visibility = 1;
inline void Category::clear_default_visibility() {
  default_visibility_ = false;
}
inline bool Category::_internal_default_visibility() const {
  return default_visibility_;
}
inline bool Category::default_visibility() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Category.default_visibility)
  return _internal_default_visibility();
}
inline void Category::_internal_set_default_visibility(bool value) {
  
  default_visibility_ = value;
}
inline void Category::set_default_visibility(bool value) {
  _internal_set_default_visibility(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Category.default_visibility)
}

// string display_name = 2;
inline void Category::clear_display_name() {
  display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Category::display_name() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Category.display_name)
  return _internal_display_name();
}
inline void Category::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Category.display_name)
}
inline std::string* Category::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Category.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& Category::_internal_display_name() const {
  return display_name_.Get();
}
inline void Category::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Category::set_display_name(std::string&& value) {
  
  display_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Category.display_name)
}
inline void Category::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Category.display_name)
}
inline void Category::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Category.display_name)
}
inline std::string* Category::_internal_mutable_display_name() {
  
  return display_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Category::release_display_name() {
  // @@protoc_insertion_point(field_release:Proto_Node.Category.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Category.display_name)
}
inline std::string* Category::unsafe_arena_release_display_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Category.display_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return display_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Category::unsafe_arena_set_allocated_display_name(
    std::string* display_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      display_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Category.display_name)
}

// bool is_separator = 3;
inline void Category::clear_is_separator() {
  is_separator_ = false;
}
inline bool Category::_internal_is_separator() const {
  return is_separator_;
}
inline bool Category::is_separator() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Category.is_separator)
  return _internal_is_separator();
}
inline void Category::_internal_set_is_separator(bool value) {
  
  is_separator_ = value;
}
inline void Category::set_is_separator(bool value) {
  _internal_set_is_separator(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Category.is_separator)
}

// string name = 4;
inline void Category::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Category::name() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Category.name)
  return _internal_name();
}
inline void Category::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Category.name)
}
inline std::string* Category::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Category.name)
  return _internal_mutable_name();
}
inline const std::string& Category::_internal_name() const {
  return name_.Get();
}
inline void Category::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Category::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Category.name)
}
inline void Category::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Category.name)
}
inline void Category::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Category.name)
}
inline std::string* Category::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Category::release_name() {
  // @@protoc_insertion_point(field_release:Proto_Node.Category.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Category.name)
}
inline std::string* Category::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Category.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Category::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Category.name)
}

// string tooltip_name = 5;
inline void Category::clear_tooltip_name() {
  tooltip_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Category::tooltip_name() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Category.tooltip_name)
  return _internal_tooltip_name();
}
inline void Category::set_tooltip_name(const std::string& value) {
  _internal_set_tooltip_name(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Category.tooltip_name)
}
inline std::string* Category::mutable_tooltip_name() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Category.tooltip_name)
  return _internal_mutable_tooltip_name();
}
inline const std::string& Category::_internal_tooltip_name() const {
  return tooltip_name_.Get();
}
inline void Category::_internal_set_tooltip_name(const std::string& value) {
  
  tooltip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Category::set_tooltip_name(std::string&& value) {
  
  tooltip_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Category.tooltip_name)
}
inline void Category::set_tooltip_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tooltip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Category.tooltip_name)
}
inline void Category::set_tooltip_name(const char* value,
    size_t size) {
  
  tooltip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Category.tooltip_name)
}
inline std::string* Category::_internal_mutable_tooltip_name() {
  
  return tooltip_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Category::release_tooltip_name() {
  // @@protoc_insertion_point(field_release:Proto_Node.Category.tooltip_name)
  return tooltip_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_tooltip_name(std::string* tooltip_name) {
  if (tooltip_name != nullptr) {
    
  } else {
    
  }
  tooltip_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tooltip_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Category.tooltip_name)
}
inline std::string* Category::unsafe_arena_release_tooltip_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Category.tooltip_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tooltip_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Category::unsafe_arena_set_allocated_tooltip_name(
    std::string* tooltip_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tooltip_name != nullptr) {
    
  } else {
    
  }
  tooltip_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tooltip_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Category.tooltip_name)
}

// map<string, .Proto_Node.Category> children = 6;
inline int Category::_internal_children_size() const {
  return children_.size();
}
inline int Category::children_size() const {
  return _internal_children_size();
}
inline void Category::clear_children() {
  children_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >&
Category::_internal_children() const {
  return children_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >&
Category::children() const {
  // @@protoc_insertion_point(field_map:Proto_Node.Category.children)
  return _internal_children();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >*
Category::_internal_mutable_children() {
  return children_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >*
Category::mutable_children() {
  // @@protoc_insertion_point(field_mutable_map:Proto_Node.Category.children)
  return _internal_mutable_children();
}

// -------------------------------------------------------------------

// Icon_texture

// string path = 1;
inline void Icon_texture::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon_texture::path() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.texture.path)
  return _internal_path();
}
inline void Icon_texture::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.texture.path)
}
inline std::string* Icon_texture::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.texture.path)
  return _internal_mutable_path();
}
inline const std::string& Icon_texture::_internal_path() const {
  return path_.Get();
}
inline void Icon_texture::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon_texture::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Icon.texture.path)
}
inline void Icon_texture::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Icon.texture.path)
}
inline void Icon_texture::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Icon.texture.path)
}
inline std::string* Icon_texture::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon_texture::release_path() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.texture.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon_texture::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.texture.path)
}
inline std::string* Icon_texture::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Icon.texture.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon_texture::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.texture.path)
}

// .google.protobuf.Any original_token = 2;
inline bool Icon_texture::_internal_has_original_token() const {
  return this != internal_default_instance() && original_token_ != nullptr;
}
inline bool Icon_texture::has_original_token() const {
  return _internal_has_original_token();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Icon_texture::_internal_original_token() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = original_token_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Icon_texture::original_token() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.texture.original_token)
  return _internal_original_token();
}
inline void Icon_texture::unsafe_arena_set_allocated_original_token(
    PROTOBUF_NAMESPACE_ID::Any* original_token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_token_);
  }
  original_token_ = original_token;
  if (original_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.texture.original_token)
}
inline PROTOBUF_NAMESPACE_ID::Any* Icon_texture::release_original_token() {
  auto temp = unsafe_arena_release_original_token();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Icon_texture::unsafe_arena_release_original_token() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.texture.original_token)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = original_token_;
  original_token_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Icon_texture::_internal_mutable_original_token() {
  
  if (original_token_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    original_token_ = p;
  }
  return original_token_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Icon_texture::mutable_original_token() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.texture.original_token)
  return _internal_mutable_original_token();
}
inline void Icon_texture::set_allocated_original_token(PROTOBUF_NAMESPACE_ID::Any* original_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_token_);
  }
  if (original_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_token)->GetArena();
    if (message_arena != submessage_arena) {
      original_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_token, submessage_arena);
    }
    
  } else {
    
  }
  original_token_ = original_token;
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.texture.original_token)
}

// -------------------------------------------------------------------

// Icon_position

// float x = 1;
inline void Icon_position::clear_x() {
  x_ = 0;
}
inline float Icon_position::_internal_x() const {
  return x_;
}
inline float Icon_position::x() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.position.x)
  return _internal_x();
}
inline void Icon_position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Icon_position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.position.x)
}

// float y = 2;
inline void Icon_position::clear_y() {
  y_ = 0;
}
inline float Icon_position::_internal_y() const {
  return y_;
}
inline float Icon_position::y() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.position.y)
  return _internal_y();
}
inline void Icon_position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Icon_position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.position.y)
}

// float z = 3;
inline void Icon_position::clear_z() {
  z_ = 0;
}
inline float Icon_position::_internal_z() const {
  return z_;
}
inline float Icon_position::z() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.position.z)
  return _internal_z();
}
inline void Icon_position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Icon_position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.position.z)
}

// -------------------------------------------------------------------

// Icon_euler_rotation

// float x = 1;
inline void Icon_euler_rotation::clear_x() {
  x_ = 0;
}
inline float Icon_euler_rotation::_internal_x() const {
  return x_;
}
inline float Icon_euler_rotation::x() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.euler_rotation.x)
  return _internal_x();
}
inline void Icon_euler_rotation::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Icon_euler_rotation::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.euler_rotation.x)
}

// float y = 2;
inline void Icon_euler_rotation::clear_y() {
  y_ = 0;
}
inline float Icon_euler_rotation::_internal_y() const {
  return y_;
}
inline float Icon_euler_rotation::y() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.euler_rotation.y)
  return _internal_y();
}
inline void Icon_euler_rotation::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Icon_euler_rotation::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.euler_rotation.y)
}

// float z = 3;
inline void Icon_euler_rotation::clear_z() {
  z_ = 0;
}
inline float Icon_euler_rotation::_internal_z() const {
  return z_;
}
inline float Icon_euler_rotation::z() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.euler_rotation.z)
  return _internal_z();
}
inline void Icon_euler_rotation::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Icon_euler_rotation::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.euler_rotation.z)
}

// -------------------------------------------------------------------

// Icon_trigger_guid

// int32 guid = 1;
inline void Icon_trigger_guid::clear_guid() {
  guid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon_trigger_guid::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon_trigger_guid::guid() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.guid.guid)
  return _internal_guid();
}
inline void Icon_trigger_guid::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guid_ = value;
}
inline void Icon_trigger_guid::set_guid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.guid.guid)
}

// -------------------------------------------------------------------

// Icon_trigger

// bool auto_trigger = 1;
inline void Icon_trigger::clear_auto_trigger() {
  auto_trigger_ = false;
}
inline bool Icon_trigger::_internal_auto_trigger() const {
  return auto_trigger_;
}
inline bool Icon_trigger::auto_trigger() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.auto_trigger)
  return _internal_auto_trigger();
}
inline void Icon_trigger::_internal_set_auto_trigger(bool value) {
  
  auto_trigger_ = value;
}
inline void Icon_trigger::set_auto_trigger(bool value) {
  _internal_set_auto_trigger(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.auto_trigger)
}

// float bounce_delay = 2;
inline void Icon_trigger::clear_bounce_delay() {
  bounce_delay_ = 0;
}
inline float Icon_trigger::_internal_bounce_delay() const {
  return bounce_delay_;
}
inline float Icon_trigger::bounce_delay() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.bounce_delay)
  return _internal_bounce_delay();
}
inline void Icon_trigger::_internal_set_bounce_delay(float value) {
  
  bounce_delay_ = value;
}
inline void Icon_trigger::set_bounce_delay(float value) {
  _internal_set_bounce_delay(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.bounce_delay)
}

// float bounce_duration = 3;
inline void Icon_trigger::clear_bounce_duration() {
  bounce_duration_ = 0;
}
inline float Icon_trigger::_internal_bounce_duration() const {
  return bounce_duration_;
}
inline float Icon_trigger::bounce_duration() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.bounce_duration)
  return _internal_bounce_duration();
}
inline void Icon_trigger::_internal_set_bounce_duration(float value) {
  
  bounce_duration_ = value;
}
inline void Icon_trigger::set_bounce_duration(float value) {
  _internal_set_bounce_duration(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.bounce_duration)
}

// float bounce_height = 4;
inline void Icon_trigger::clear_bounce_height() {
  bounce_height_ = 0;
}
inline float Icon_trigger::_internal_bounce_height() const {
  return bounce_height_;
}
inline float Icon_trigger::bounce_height() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.bounce_height)
  return _internal_bounce_height();
}
inline void Icon_trigger::_internal_set_bounce_height(float value) {
  
  bounce_height_ = value;
}
inline void Icon_trigger::set_bounce_height(float value) {
  _internal_set_bounce_height(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.bounce_height)
}

// string action_copy_clipboard = 5;
inline void Icon_trigger::clear_action_copy_clipboard() {
  action_copy_clipboard_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon_trigger::action_copy_clipboard() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.action_copy_clipboard)
  return _internal_action_copy_clipboard();
}
inline void Icon_trigger::set_action_copy_clipboard(const std::string& value) {
  _internal_set_action_copy_clipboard(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.action_copy_clipboard)
}
inline std::string* Icon_trigger::mutable_action_copy_clipboard() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.trigger.action_copy_clipboard)
  return _internal_mutable_action_copy_clipboard();
}
inline const std::string& Icon_trigger::_internal_action_copy_clipboard() const {
  return action_copy_clipboard_.Get();
}
inline void Icon_trigger::_internal_set_action_copy_clipboard(const std::string& value) {
  
  action_copy_clipboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon_trigger::set_action_copy_clipboard(std::string&& value) {
  
  action_copy_clipboard_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Icon.trigger.action_copy_clipboard)
}
inline void Icon_trigger::set_action_copy_clipboard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_copy_clipboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Icon.trigger.action_copy_clipboard)
}
inline void Icon_trigger::set_action_copy_clipboard(const char* value,
    size_t size) {
  
  action_copy_clipboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Icon.trigger.action_copy_clipboard)
}
inline std::string* Icon_trigger::_internal_mutable_action_copy_clipboard() {
  
  return action_copy_clipboard_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon_trigger::release_action_copy_clipboard() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.trigger.action_copy_clipboard)
  return action_copy_clipboard_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon_trigger::set_allocated_action_copy_clipboard(std::string* action_copy_clipboard) {
  if (action_copy_clipboard != nullptr) {
    
  } else {
    
  }
  action_copy_clipboard_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_copy_clipboard,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.trigger.action_copy_clipboard)
}
inline std::string* Icon_trigger::unsafe_arena_release_action_copy_clipboard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Icon.trigger.action_copy_clipboard)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_copy_clipboard_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon_trigger::unsafe_arena_set_allocated_action_copy_clipboard(
    std::string* action_copy_clipboard) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_copy_clipboard != nullptr) {
    
  } else {
    
  }
  action_copy_clipboard_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_copy_clipboard, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.trigger.action_copy_clipboard)
}

// string action_copy_message = 6;
inline void Icon_trigger::clear_action_copy_message() {
  action_copy_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon_trigger::action_copy_message() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.action_copy_message)
  return _internal_action_copy_message();
}
inline void Icon_trigger::set_action_copy_message(const std::string& value) {
  _internal_set_action_copy_message(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.action_copy_message)
}
inline std::string* Icon_trigger::mutable_action_copy_message() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.trigger.action_copy_message)
  return _internal_mutable_action_copy_message();
}
inline const std::string& Icon_trigger::_internal_action_copy_message() const {
  return action_copy_message_.Get();
}
inline void Icon_trigger::_internal_set_action_copy_message(const std::string& value) {
  
  action_copy_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon_trigger::set_action_copy_message(std::string&& value) {
  
  action_copy_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Icon.trigger.action_copy_message)
}
inline void Icon_trigger::set_action_copy_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_copy_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Icon.trigger.action_copy_message)
}
inline void Icon_trigger::set_action_copy_message(const char* value,
    size_t size) {
  
  action_copy_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Icon.trigger.action_copy_message)
}
inline std::string* Icon_trigger::_internal_mutable_action_copy_message() {
  
  return action_copy_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon_trigger::release_action_copy_message() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.trigger.action_copy_message)
  return action_copy_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon_trigger::set_allocated_action_copy_message(std::string* action_copy_message) {
  if (action_copy_message != nullptr) {
    
  } else {
    
  }
  action_copy_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_copy_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.trigger.action_copy_message)
}
inline std::string* Icon_trigger::unsafe_arena_release_action_copy_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Icon.trigger.action_copy_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_copy_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon_trigger::unsafe_arena_set_allocated_action_copy_message(
    std::string* action_copy_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_copy_message != nullptr) {
    
  } else {
    
  }
  action_copy_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_copy_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.trigger.action_copy_message)
}

// bool has_countdown = 7;
inline void Icon_trigger::clear_has_countdown() {
  has_countdown_ = false;
}
inline bool Icon_trigger::_internal_has_countdown() const {
  return has_countdown_;
}
inline bool Icon_trigger::has_countdown() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.has_countdown)
  return _internal_has_countdown();
}
inline void Icon_trigger::_internal_set_has_countdown(bool value) {
  
  has_countdown_ = value;
}
inline void Icon_trigger::set_has_countdown(bool value) {
  _internal_set_has_countdown(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.has_countdown)
}

// string action_info_message = 8;
inline void Icon_trigger::clear_action_info_message() {
  action_info_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon_trigger::action_info_message() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.action_info_message)
  return _internal_action_info_message();
}
inline void Icon_trigger::set_action_info_message(const std::string& value) {
  _internal_set_action_info_message(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.action_info_message)
}
inline std::string* Icon_trigger::mutable_action_info_message() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.trigger.action_info_message)
  return _internal_mutable_action_info_message();
}
inline const std::string& Icon_trigger::_internal_action_info_message() const {
  return action_info_message_.Get();
}
inline void Icon_trigger::_internal_set_action_info_message(const std::string& value) {
  
  action_info_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon_trigger::set_action_info_message(std::string&& value) {
  
  action_info_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Icon.trigger.action_info_message)
}
inline void Icon_trigger::set_action_info_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_info_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Icon.trigger.action_info_message)
}
inline void Icon_trigger::set_action_info_message(const char* value,
    size_t size) {
  
  action_info_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Icon.trigger.action_info_message)
}
inline std::string* Icon_trigger::_internal_mutable_action_info_message() {
  
  return action_info_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon_trigger::release_action_info_message() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.trigger.action_info_message)
  return action_info_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon_trigger::set_allocated_action_info_message(std::string* action_info_message) {
  if (action_info_message != nullptr) {
    
  } else {
    
  }
  action_info_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_info_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.trigger.action_info_message)
}
inline std::string* Icon_trigger::unsafe_arena_release_action_info_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Icon.trigger.action_info_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_info_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon_trigger::unsafe_arena_set_allocated_action_info_message(
    std::string* action_info_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_info_message != nullptr) {
    
  } else {
    
  }
  action_info_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_info_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.trigger.action_info_message)
}

// bool invert_display = 9;
inline void Icon_trigger::clear_invert_display() {
  invert_display_ = false;
}
inline bool Icon_trigger::_internal_invert_display() const {
  return invert_display_;
}
inline bool Icon_trigger::invert_display() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.invert_display)
  return _internal_invert_display();
}
inline void Icon_trigger::_internal_set_invert_display(bool value) {
  
  invert_display_ = value;
}
inline void Icon_trigger::set_invert_display(bool value) {
  _internal_set_invert_display(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.invert_display)
}

// float reset_length = 10;
inline void Icon_trigger::clear_reset_length() {
  reset_length_ = 0;
}
inline float Icon_trigger::_internal_reset_length() const {
  return reset_length_;
}
inline float Icon_trigger::reset_length() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.reset_length)
  return _internal_reset_length();
}
inline void Icon_trigger::_internal_set_reset_length(float value) {
  
  reset_length_ = value;
}
inline void Icon_trigger::set_reset_length(float value) {
  _internal_set_reset_length(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.reset_length)
}

// float range = 11;
inline void Icon_trigger::clear_range() {
  range_ = 0;
}
inline float Icon_trigger::_internal_range() const {
  return range_;
}
inline float Icon_trigger::range() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.range)
  return _internal_range();
}
inline void Icon_trigger::_internal_set_range(float value) {
  
  range_ = value;
}
inline void Icon_trigger::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.trigger.range)
}

// .Proto_Node.Category action_hide_category = 12;
inline bool Icon_trigger::_internal_has_action_hide_category() const {
  return this != internal_default_instance() && action_hide_category_ != nullptr;
}
inline bool Icon_trigger::has_action_hide_category() const {
  return _internal_has_action_hide_category();
}
inline void Icon_trigger::clear_action_hide_category() {
  if (GetArena() == nullptr && action_hide_category_ != nullptr) {
    delete action_hide_category_;
  }
  action_hide_category_ = nullptr;
}
inline const ::Proto_Node::Category& Icon_trigger::_internal_action_hide_category() const {
  const ::Proto_Node::Category* p = action_hide_category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto_Node::Category*>(
      &::Proto_Node::_Category_default_instance_);
}
inline const ::Proto_Node::Category& Icon_trigger::action_hide_category() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.action_hide_category)
  return _internal_action_hide_category();
}
inline void Icon_trigger::unsafe_arena_set_allocated_action_hide_category(
    ::Proto_Node::Category* action_hide_category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_hide_category_);
  }
  action_hide_category_ = action_hide_category;
  if (action_hide_category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.trigger.action_hide_category)
}
inline ::Proto_Node::Category* Icon_trigger::release_action_hide_category() {
  auto temp = unsafe_arena_release_action_hide_category();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto_Node::Category* Icon_trigger::unsafe_arena_release_action_hide_category() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.trigger.action_hide_category)
  
  ::Proto_Node::Category* temp = action_hide_category_;
  action_hide_category_ = nullptr;
  return temp;
}
inline ::Proto_Node::Category* Icon_trigger::_internal_mutable_action_hide_category() {
  
  if (action_hide_category_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto_Node::Category>(GetArena());
    action_hide_category_ = p;
  }
  return action_hide_category_;
}
inline ::Proto_Node::Category* Icon_trigger::mutable_action_hide_category() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.trigger.action_hide_category)
  return _internal_mutable_action_hide_category();
}
inline void Icon_trigger::set_allocated_action_hide_category(::Proto_Node::Category* action_hide_category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_hide_category_;
  }
  if (action_hide_category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_hide_category);
    if (message_arena != submessage_arena) {
      action_hide_category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_hide_category, submessage_arena);
    }
    
  } else {
    
  }
  action_hide_category_ = action_hide_category;
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.trigger.action_hide_category)
}

// .Proto_Node.Category action_show_category = 13;
inline bool Icon_trigger::_internal_has_action_show_category() const {
  return this != internal_default_instance() && action_show_category_ != nullptr;
}
inline bool Icon_trigger::has_action_show_category() const {
  return _internal_has_action_show_category();
}
inline void Icon_trigger::clear_action_show_category() {
  if (GetArena() == nullptr && action_show_category_ != nullptr) {
    delete action_show_category_;
  }
  action_show_category_ = nullptr;
}
inline const ::Proto_Node::Category& Icon_trigger::_internal_action_show_category() const {
  const ::Proto_Node::Category* p = action_show_category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto_Node::Category*>(
      &::Proto_Node::_Category_default_instance_);
}
inline const ::Proto_Node::Category& Icon_trigger::action_show_category() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.action_show_category)
  return _internal_action_show_category();
}
inline void Icon_trigger::unsafe_arena_set_allocated_action_show_category(
    ::Proto_Node::Category* action_show_category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_show_category_);
  }
  action_show_category_ = action_show_category;
  if (action_show_category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.trigger.action_show_category)
}
inline ::Proto_Node::Category* Icon_trigger::release_action_show_category() {
  auto temp = unsafe_arena_release_action_show_category();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto_Node::Category* Icon_trigger::unsafe_arena_release_action_show_category() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.trigger.action_show_category)
  
  ::Proto_Node::Category* temp = action_show_category_;
  action_show_category_ = nullptr;
  return temp;
}
inline ::Proto_Node::Category* Icon_trigger::_internal_mutable_action_show_category() {
  
  if (action_show_category_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto_Node::Category>(GetArena());
    action_show_category_ = p;
  }
  return action_show_category_;
}
inline ::Proto_Node::Category* Icon_trigger::mutable_action_show_category() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.trigger.action_show_category)
  return _internal_mutable_action_show_category();
}
inline void Icon_trigger::set_allocated_action_show_category(::Proto_Node::Category* action_show_category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_show_category_;
  }
  if (action_show_category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_show_category);
    if (message_arena != submessage_arena) {
      action_show_category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_show_category, submessage_arena);
    }
    
  } else {
    
  }
  action_show_category_ = action_show_category;
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.trigger.action_show_category)
}

// .Proto_Node.Category action_toggle_category = 14;
inline bool Icon_trigger::_internal_has_action_toggle_category() const {
  return this != internal_default_instance() && action_toggle_category_ != nullptr;
}
inline bool Icon_trigger::has_action_toggle_category() const {
  return _internal_has_action_toggle_category();
}
inline void Icon_trigger::clear_action_toggle_category() {
  if (GetArena() == nullptr && action_toggle_category_ != nullptr) {
    delete action_toggle_category_;
  }
  action_toggle_category_ = nullptr;
}
inline const ::Proto_Node::Category& Icon_trigger::_internal_action_toggle_category() const {
  const ::Proto_Node::Category* p = action_toggle_category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto_Node::Category*>(
      &::Proto_Node::_Category_default_instance_);
}
inline const ::Proto_Node::Category& Icon_trigger::action_toggle_category() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.trigger.action_toggle_category)
  return _internal_action_toggle_category();
}
inline void Icon_trigger::unsafe_arena_set_allocated_action_toggle_category(
    ::Proto_Node::Category* action_toggle_category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_toggle_category_);
  }
  action_toggle_category_ = action_toggle_category;
  if (action_toggle_category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.trigger.action_toggle_category)
}
inline ::Proto_Node::Category* Icon_trigger::release_action_toggle_category() {
  auto temp = unsafe_arena_release_action_toggle_category();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto_Node::Category* Icon_trigger::unsafe_arena_release_action_toggle_category() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.trigger.action_toggle_category)
  
  ::Proto_Node::Category* temp = action_toggle_category_;
  action_toggle_category_ = nullptr;
  return temp;
}
inline ::Proto_Node::Category* Icon_trigger::_internal_mutable_action_toggle_category() {
  
  if (action_toggle_category_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto_Node::Category>(GetArena());
    action_toggle_category_ = p;
  }
  return action_toggle_category_;
}
inline ::Proto_Node::Category* Icon_trigger::mutable_action_toggle_category() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.trigger.action_toggle_category)
  return _internal_mutable_action_toggle_category();
}
inline void Icon_trigger::set_allocated_action_toggle_category(::Proto_Node::Category* action_toggle_category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_toggle_category_;
  }
  if (action_toggle_category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_toggle_category);
    if (message_arena != submessage_arena) {
      action_toggle_category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_toggle_category, submessage_arena);
    }
    
  } else {
    
  }
  action_toggle_category_ = action_toggle_category;
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.trigger.action_toggle_category)
}

// -------------------------------------------------------------------

// Icon

// fixed32 achievement_bit = 1;
inline void Icon::clear_achievement_bit() {
  achievement_bit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Icon::_internal_achievement_bit() const {
  return achievement_bit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Icon::achievement_bit() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.achievement_bit)
  return _internal_achievement_bit();
}
inline void Icon::_internal_set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  achievement_bit_ = value;
}
inline void Icon::set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_achievement_bit(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.achievement_bit)
}

// int32 achievement_id = 2;
inline void Icon::clear_achievement_id() {
  achievement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_achievement_id() const {
  return achievement_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::achievement_id() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.achievement_id)
  return _internal_achievement_id();
}
inline void Icon::_internal_set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  achievement_id_ = value;
}
inline void Icon::set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_achievement_id(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.achievement_id)
}

// float alpha = 3;
inline void Icon::clear_alpha() {
  alpha_ = 0;
}
inline float Icon::_internal_alpha() const {
  return alpha_;
}
inline float Icon::alpha() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.alpha)
  return _internal_alpha();
}
inline void Icon::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void Icon::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.alpha)
}

// bool can_fade = 4;
inline void Icon::clear_can_fade() {
  can_fade_ = false;
}
inline bool Icon::_internal_can_fade() const {
  return can_fade_;
}
inline bool Icon::can_fade() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.can_fade)
  return _internal_can_fade();
}
inline void Icon::_internal_set_can_fade(bool value) {
  
  can_fade_ = value;
}
inline void Icon::set_can_fade(bool value) {
  _internal_set_can_fade(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.can_fade)
}

// float distance_fade_end = 5;
inline void Icon::clear_distance_fade_end() {
  distance_fade_end_ = 0;
}
inline float Icon::_internal_distance_fade_end() const {
  return distance_fade_end_;
}
inline float Icon::distance_fade_end() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.distance_fade_end)
  return _internal_distance_fade_end();
}
inline void Icon::_internal_set_distance_fade_end(float value) {
  
  distance_fade_end_ = value;
}
inline void Icon::set_distance_fade_end(float value) {
  _internal_set_distance_fade_end(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.distance_fade_end)
}

// float distance_fade_start = 6;
inline void Icon::clear_distance_fade_start() {
  distance_fade_start_ = 0;
}
inline float Icon::_internal_distance_fade_start() const {
  return distance_fade_start_;
}
inline float Icon::distance_fade_start() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.distance_fade_start)
  return _internal_distance_fade_start();
}
inline void Icon::_internal_set_distance_fade_start(float value) {
  
  distance_fade_start_ = value;
}
inline void Icon::set_distance_fade_start(float value) {
  _internal_set_distance_fade_start(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.distance_fade_start)
}

// float height_offset = 7;
inline void Icon::clear_height_offset() {
  height_offset_ = 0;
}
inline float Icon::_internal_height_offset() const {
  return height_offset_;
}
inline float Icon::height_offset() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.height_offset)
  return _internal_height_offset();
}
inline void Icon::_internal_set_height_offset(float value) {
  
  height_offset_ = value;
}
inline void Icon::set_height_offset(float value) {
  _internal_set_height_offset(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.height_offset)
}

// float __tentative__scale = 8;
inline void Icon::clear___tentative__scale() {
  __tentative__scale_ = 0;
}
inline float Icon::_internal___tentative__scale() const {
  return __tentative__scale_;
}
inline float Icon::__tentative__scale() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.__tentative__scale)
  return _internal___tentative__scale();
}
inline void Icon::_internal_set___tentative__scale(float value) {
  
  __tentative__scale_ = value;
}
inline void Icon::set___tentative__scale(float value) {
  _internal_set___tentative__scale(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.__tentative__scale)
}

// int32 map_display_size = 9;
inline void Icon::clear_map_display_size() {
  map_display_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_map_display_size() const {
  return map_display_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::map_display_size() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.map_display_size)
  return _internal_map_display_size();
}
inline void Icon::_internal_set_map_display_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_display_size_ = value;
}
inline void Icon::set_map_display_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_display_size(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.map_display_size)
}

// int32 map_id = 10;
inline void Icon::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::map_id() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.map_id)
  return _internal_map_id();
}
inline void Icon::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void Icon::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.map_id)
}

// int32 maximum_size_on_screen = 11;
inline void Icon::clear_maximum_size_on_screen() {
  maximum_size_on_screen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_maximum_size_on_screen() const {
  return maximum_size_on_screen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::maximum_size_on_screen() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.maximum_size_on_screen)
  return _internal_maximum_size_on_screen();
}
inline void Icon::_internal_set_maximum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maximum_size_on_screen_ = value;
}
inline void Icon::set_maximum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximum_size_on_screen(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.maximum_size_on_screen)
}

// int32 minimum_size_on_screen = 12;
inline void Icon::clear_minimum_size_on_screen() {
  minimum_size_on_screen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_minimum_size_on_screen() const {
  return minimum_size_on_screen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::minimum_size_on_screen() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.minimum_size_on_screen)
  return _internal_minimum_size_on_screen();
}
inline void Icon::_internal_set_minimum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minimum_size_on_screen_ = value;
}
inline void Icon::set_minimum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minimum_size_on_screen(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.minimum_size_on_screen)
}

// bool __tentative__render_ingame = 13;
inline void Icon::clear___tentative__render_ingame() {
  __tentative__render_ingame_ = false;
}
inline bool Icon::_internal___tentative__render_ingame() const {
  return __tentative__render_ingame_;
}
inline bool Icon::__tentative__render_ingame() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.__tentative__render_ingame)
  return _internal___tentative__render_ingame();
}
inline void Icon::_internal_set___tentative__render_ingame(bool value) {
  
  __tentative__render_ingame_ = value;
}
inline void Icon::set___tentative__render_ingame(bool value) {
  _internal_set___tentative__render_ingame(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.__tentative__render_ingame)
}

// bool __tentative__render_on_map = 14;
inline void Icon::clear___tentative__render_on_map() {
  __tentative__render_on_map_ = false;
}
inline bool Icon::_internal___tentative__render_on_map() const {
  return __tentative__render_on_map_;
}
inline bool Icon::__tentative__render_on_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.__tentative__render_on_map)
  return _internal___tentative__render_on_map();
}
inline void Icon::_internal_set___tentative__render_on_map(bool value) {
  
  __tentative__render_on_map_ = value;
}
inline void Icon::set___tentative__render_on_map(bool value) {
  _internal_set___tentative__render_on_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.__tentative__render_on_map)
}

// bool __tentative__render_on_minimap = 15;
inline void Icon::clear___tentative__render_on_minimap() {
  __tentative__render_on_minimap_ = false;
}
inline bool Icon::_internal___tentative__render_on_minimap() const {
  return __tentative__render_on_minimap_;
}
inline bool Icon::__tentative__render_on_minimap() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.__tentative__render_on_minimap)
  return _internal___tentative__render_on_minimap();
}
inline void Icon::_internal_set___tentative__render_on_minimap(bool value) {
  
  __tentative__render_on_minimap_ = value;
}
inline void Icon::set___tentative__render_on_minimap(bool value) {
  _internal_set___tentative__render_on_minimap(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.__tentative__render_on_minimap)
}

// bool scale_on_map_with_zoom = 16;
inline void Icon::clear_scale_on_map_with_zoom() {
  scale_on_map_with_zoom_ = false;
}
inline bool Icon::_internal_scale_on_map_with_zoom() const {
  return scale_on_map_with_zoom_;
}
inline bool Icon::scale_on_map_with_zoom() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.scale_on_map_with_zoom)
  return _internal_scale_on_map_with_zoom();
}
inline void Icon::_internal_set_scale_on_map_with_zoom(bool value) {
  
  scale_on_map_with_zoom_ = value;
}
inline void Icon::set_scale_on_map_with_zoom(bool value) {
  _internal_set_scale_on_map_with_zoom(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.scale_on_map_with_zoom)
}

// string bhdraft__schedule = 17;
inline void Icon::clear_bhdraft__schedule() {
  bhdraft__schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon::bhdraft__schedule() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.bhdraft__schedule)
  return _internal_bhdraft__schedule();
}
inline void Icon::set_bhdraft__schedule(const std::string& value) {
  _internal_set_bhdraft__schedule(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.bhdraft__schedule)
}
inline std::string* Icon::mutable_bhdraft__schedule() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.bhdraft__schedule)
  return _internal_mutable_bhdraft__schedule();
}
inline const std::string& Icon::_internal_bhdraft__schedule() const {
  return bhdraft__schedule_.Get();
}
inline void Icon::_internal_set_bhdraft__schedule(const std::string& value) {
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon::set_bhdraft__schedule(std::string&& value) {
  
  bhdraft__schedule_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Icon.bhdraft__schedule)
}
inline void Icon::set_bhdraft__schedule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Icon.bhdraft__schedule)
}
inline void Icon::set_bhdraft__schedule(const char* value,
    size_t size) {
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Icon.bhdraft__schedule)
}
inline std::string* Icon::_internal_mutable_bhdraft__schedule() {
  
  return bhdraft__schedule_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon::release_bhdraft__schedule() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.bhdraft__schedule)
  return bhdraft__schedule_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon::set_allocated_bhdraft__schedule(std::string* bhdraft__schedule) {
  if (bhdraft__schedule != nullptr) {
    
  } else {
    
  }
  bhdraft__schedule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bhdraft__schedule,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.bhdraft__schedule)
}
inline std::string* Icon::unsafe_arena_release_bhdraft__schedule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Icon.bhdraft__schedule)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bhdraft__schedule_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon::unsafe_arena_set_allocated_bhdraft__schedule(
    std::string* bhdraft__schedule) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bhdraft__schedule != nullptr) {
    
  } else {
    
  }
  bhdraft__schedule_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bhdraft__schedule, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.bhdraft__schedule)
}

// float bhdraft__schedule_duration = 18;
inline void Icon::clear_bhdraft__schedule_duration() {
  bhdraft__schedule_duration_ = 0;
}
inline float Icon::_internal_bhdraft__schedule_duration() const {
  return bhdraft__schedule_duration_;
}
inline float Icon::bhdraft__schedule_duration() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.bhdraft__schedule_duration)
  return _internal_bhdraft__schedule_duration();
}
inline void Icon::_internal_set_bhdraft__schedule_duration(float value) {
  
  bhdraft__schedule_duration_ = value;
}
inline void Icon::set_bhdraft__schedule_duration(float value) {
  _internal_set_bhdraft__schedule_duration(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.bhdraft__schedule_duration)
}

// string tip_description = 19;
inline void Icon::clear_tip_description() {
  tip_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon::tip_description() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.tip_description)
  return _internal_tip_description();
}
inline void Icon::set_tip_description(const std::string& value) {
  _internal_set_tip_description(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.tip_description)
}
inline std::string* Icon::mutable_tip_description() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.tip_description)
  return _internal_mutable_tip_description();
}
inline const std::string& Icon::_internal_tip_description() const {
  return tip_description_.Get();
}
inline void Icon::_internal_set_tip_description(const std::string& value) {
  
  tip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon::set_tip_description(std::string&& value) {
  
  tip_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Icon.tip_description)
}
inline void Icon::set_tip_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Icon.tip_description)
}
inline void Icon::set_tip_description(const char* value,
    size_t size) {
  
  tip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Icon.tip_description)
}
inline std::string* Icon::_internal_mutable_tip_description() {
  
  return tip_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon::release_tip_description() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.tip_description)
  return tip_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon::set_allocated_tip_description(std::string* tip_description) {
  if (tip_description != nullptr) {
    
  } else {
    
  }
  tip_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tip_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.tip_description)
}
inline std::string* Icon::unsafe_arena_release_tip_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Icon.tip_description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tip_description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon::unsafe_arena_set_allocated_tip_description(
    std::string* tip_description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tip_description != nullptr) {
    
  } else {
    
  }
  tip_description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tip_description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.tip_description)
}

// string tip_name = 20;
inline void Icon::clear_tip_name() {
  tip_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon::tip_name() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Icon.tip_name)
  return _internal_tip_name();
}
inline void Icon::set_tip_name(const std::string& value) {
  _internal_set_tip_name(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Icon.tip_name)
}
inline std::string* Icon::mutable_tip_name() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Icon.tip_name)
  return _internal_mutable_tip_name();
}
inline const std::string& Icon::_internal_tip_name() const {
  return tip_name_.Get();
}
inline void Icon::_internal_set_tip_name(const std::string& value) {
  
  tip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon::set_tip_name(std::string&& value) {
  
  tip_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Icon.tip_name)
}
inline void Icon::set_tip_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Icon.tip_name)
}
inline void Icon::set_tip_name(const char* value,
    size_t size) {
  
  tip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Icon.tip_name)
}
inline std::string* Icon::_internal_mutable_tip_name() {
  
  return tip_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon::release_tip_name() {
  // @@protoc_insertion_point(field_release:Proto_Node.Icon.tip_name)
  return tip_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon::set_allocated_tip_name(std::string* tip_name) {
  if (tip_name != nullptr) {
    
  } else {
    
  }
  tip_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tip_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Icon.tip_name)
}
inline std::string* Icon::unsafe_arena_release_tip_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Icon.tip_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tip_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon::unsafe_arena_set_allocated_tip_name(
    std::string* tip_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tip_name != nullptr) {
    
  } else {
    
  }
  tip_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tip_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Icon.tip_name)
}

// -------------------------------------------------------------------

// Trail_color

// string hex = 1;
inline void Trail_color::clear_hex() {
  hex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trail_color::hex() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.color.hex)
  return _internal_hex();
}
inline void Trail_color::set_hex(const std::string& value) {
  _internal_set_hex(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.color.hex)
}
inline std::string* Trail_color::mutable_hex() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Trail.color.hex)
  return _internal_mutable_hex();
}
inline const std::string& Trail_color::_internal_hex() const {
  return hex_.Get();
}
inline void Trail_color::_internal_set_hex(const std::string& value) {
  
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trail_color::set_hex(std::string&& value) {
  
  hex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Trail.color.hex)
}
inline void Trail_color::set_hex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Trail.color.hex)
}
inline void Trail_color::set_hex(const char* value,
    size_t size) {
  
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Trail.color.hex)
}
inline std::string* Trail_color::_internal_mutable_hex() {
  
  return hex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trail_color::release_hex() {
  // @@protoc_insertion_point(field_release:Proto_Node.Trail.color.hex)
  return hex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trail_color::set_allocated_hex(std::string* hex) {
  if (hex != nullptr) {
    
  } else {
    
  }
  hex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Trail.color.hex)
}
inline std::string* Trail_color::unsafe_arena_release_hex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Trail.color.hex)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hex_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trail_color::unsafe_arena_set_allocated_hex(
    std::string* hex) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hex != nullptr) {
    
  } else {
    
  }
  hex_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hex, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Trail.color.hex)
}

// -------------------------------------------------------------------

// Trail_festival_filter

// bool dragonbash = 1;
inline void Trail_festival_filter::clear_dragonbash() {
  dragonbash_ = false;
}
inline bool Trail_festival_filter::_internal_dragonbash() const {
  return dragonbash_;
}
inline bool Trail_festival_filter::dragonbash() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.festival_filter.dragonbash)
  return _internal_dragonbash();
}
inline void Trail_festival_filter::_internal_set_dragonbash(bool value) {
  
  dragonbash_ = value;
}
inline void Trail_festival_filter::set_dragonbash(bool value) {
  _internal_set_dragonbash(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.festival_filter.dragonbash)
}

// bool festival_of_the_four_winds = 2;
inline void Trail_festival_filter::clear_festival_of_the_four_winds() {
  festival_of_the_four_winds_ = false;
}
inline bool Trail_festival_filter::_internal_festival_of_the_four_winds() const {
  return festival_of_the_four_winds_;
}
inline bool Trail_festival_filter::festival_of_the_four_winds() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.festival_filter.festival_of_the_four_winds)
  return _internal_festival_of_the_four_winds();
}
inline void Trail_festival_filter::_internal_set_festival_of_the_four_winds(bool value) {
  
  festival_of_the_four_winds_ = value;
}
inline void Trail_festival_filter::set_festival_of_the_four_winds(bool value) {
  _internal_set_festival_of_the_four_winds(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.festival_filter.festival_of_the_four_winds)
}

// bool halloween = 3;
inline void Trail_festival_filter::clear_halloween() {
  halloween_ = false;
}
inline bool Trail_festival_filter::_internal_halloween() const {
  return halloween_;
}
inline bool Trail_festival_filter::halloween() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.festival_filter.halloween)
  return _internal_halloween();
}
inline void Trail_festival_filter::_internal_set_halloween(bool value) {
  
  halloween_ = value;
}
inline void Trail_festival_filter::set_halloween(bool value) {
  _internal_set_halloween(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.festival_filter.halloween)
}

// bool lunar_new_year = 4;
inline void Trail_festival_filter::clear_lunar_new_year() {
  lunar_new_year_ = false;
}
inline bool Trail_festival_filter::_internal_lunar_new_year() const {
  return lunar_new_year_;
}
inline bool Trail_festival_filter::lunar_new_year() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.festival_filter.lunar_new_year)
  return _internal_lunar_new_year();
}
inline void Trail_festival_filter::_internal_set_lunar_new_year(bool value) {
  
  lunar_new_year_ = value;
}
inline void Trail_festival_filter::set_lunar_new_year(bool value) {
  _internal_set_lunar_new_year(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.festival_filter.lunar_new_year)
}

// bool super_adventure_festival = 5;
inline void Trail_festival_filter::clear_super_adventure_festival() {
  super_adventure_festival_ = false;
}
inline bool Trail_festival_filter::_internal_super_adventure_festival() const {
  return super_adventure_festival_;
}
inline bool Trail_festival_filter::super_adventure_festival() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.festival_filter.super_adventure_festival)
  return _internal_super_adventure_festival();
}
inline void Trail_festival_filter::_internal_set_super_adventure_festival(bool value) {
  
  super_adventure_festival_ = value;
}
inline void Trail_festival_filter::set_super_adventure_festival(bool value) {
  _internal_set_super_adventure_festival(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.festival_filter.super_adventure_festival)
}

// bool wintersday = 6;
inline void Trail_festival_filter::clear_wintersday() {
  wintersday_ = false;
}
inline bool Trail_festival_filter::_internal_wintersday() const {
  return wintersday_;
}
inline bool Trail_festival_filter::wintersday() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.festival_filter.wintersday)
  return _internal_wintersday();
}
inline void Trail_festival_filter::_internal_set_wintersday(bool value) {
  
  wintersday_ = value;
}
inline void Trail_festival_filter::set_wintersday(bool value) {
  _internal_set_wintersday(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.festival_filter.wintersday)
}

// bool none = 7;
inline void Trail_festival_filter::clear_none() {
  none_ = false;
}
inline bool Trail_festival_filter::_internal_none() const {
  return none_;
}
inline bool Trail_festival_filter::none() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.festival_filter.none)
  return _internal_none();
}
inline void Trail_festival_filter::_internal_set_none(bool value) {
  
  none_ = value;
}
inline void Trail_festival_filter::set_none(bool value) {
  _internal_set_none(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.festival_filter.none)
}

// -------------------------------------------------------------------

// Trail_guid

// int32 guid = 1;
inline void Trail_guid::clear_guid() {
  guid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail_guid::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail_guid::guid() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.guid.guid)
  return _internal_guid();
}
inline void Trail_guid::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guid_ = value;
}
inline void Trail_guid::set_guid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.guid.guid)
}

// -------------------------------------------------------------------

// Trail_map_type_filter

// bool unknown_map = 1;
inline void Trail_map_type_filter::clear_unknown_map() {
  unknown_map_ = false;
}
inline bool Trail_map_type_filter::_internal_unknown_map() const {
  return unknown_map_;
}
inline bool Trail_map_type_filter::unknown_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.unknown_map)
  return _internal_unknown_map();
}
inline void Trail_map_type_filter::_internal_set_unknown_map(bool value) {
  
  unknown_map_ = value;
}
inline void Trail_map_type_filter::set_unknown_map(bool value) {
  _internal_set_unknown_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.unknown_map)
}

// bool redirect_map = 2;
inline void Trail_map_type_filter::clear_redirect_map() {
  redirect_map_ = false;
}
inline bool Trail_map_type_filter::_internal_redirect_map() const {
  return redirect_map_;
}
inline bool Trail_map_type_filter::redirect_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.redirect_map)
  return _internal_redirect_map();
}
inline void Trail_map_type_filter::_internal_set_redirect_map(bool value) {
  
  redirect_map_ = value;
}
inline void Trail_map_type_filter::set_redirect_map(bool value) {
  _internal_set_redirect_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.redirect_map)
}

// bool character_create_map = 3;
inline void Trail_map_type_filter::clear_character_create_map() {
  character_create_map_ = false;
}
inline bool Trail_map_type_filter::_internal_character_create_map() const {
  return character_create_map_;
}
inline bool Trail_map_type_filter::character_create_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.character_create_map)
  return _internal_character_create_map();
}
inline void Trail_map_type_filter::_internal_set_character_create_map(bool value) {
  
  character_create_map_ = value;
}
inline void Trail_map_type_filter::set_character_create_map(bool value) {
  _internal_set_character_create_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.character_create_map)
}

// bool pvp_map = 4;
inline void Trail_map_type_filter::clear_pvp_map() {
  pvp_map_ = false;
}
inline bool Trail_map_type_filter::_internal_pvp_map() const {
  return pvp_map_;
}
inline bool Trail_map_type_filter::pvp_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.pvp_map)
  return _internal_pvp_map();
}
inline void Trail_map_type_filter::_internal_set_pvp_map(bool value) {
  
  pvp_map_ = value;
}
inline void Trail_map_type_filter::set_pvp_map(bool value) {
  _internal_set_pvp_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.pvp_map)
}

// bool gvg_map = 5;
inline void Trail_map_type_filter::clear_gvg_map() {
  gvg_map_ = false;
}
inline bool Trail_map_type_filter::_internal_gvg_map() const {
  return gvg_map_;
}
inline bool Trail_map_type_filter::gvg_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.gvg_map)
  return _internal_gvg_map();
}
inline void Trail_map_type_filter::_internal_set_gvg_map(bool value) {
  
  gvg_map_ = value;
}
inline void Trail_map_type_filter::set_gvg_map(bool value) {
  _internal_set_gvg_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.gvg_map)
}

// bool instance_map = 6;
inline void Trail_map_type_filter::clear_instance_map() {
  instance_map_ = false;
}
inline bool Trail_map_type_filter::_internal_instance_map() const {
  return instance_map_;
}
inline bool Trail_map_type_filter::instance_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.instance_map)
  return _internal_instance_map();
}
inline void Trail_map_type_filter::_internal_set_instance_map(bool value) {
  
  instance_map_ = value;
}
inline void Trail_map_type_filter::set_instance_map(bool value) {
  _internal_set_instance_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.instance_map)
}

// bool public_map = 7;
inline void Trail_map_type_filter::clear_public_map() {
  public_map_ = false;
}
inline bool Trail_map_type_filter::_internal_public_map() const {
  return public_map_;
}
inline bool Trail_map_type_filter::public_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.public_map)
  return _internal_public_map();
}
inline void Trail_map_type_filter::_internal_set_public_map(bool value) {
  
  public_map_ = value;
}
inline void Trail_map_type_filter::set_public_map(bool value) {
  _internal_set_public_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.public_map)
}

// bool tournament_map = 8;
inline void Trail_map_type_filter::clear_tournament_map() {
  tournament_map_ = false;
}
inline bool Trail_map_type_filter::_internal_tournament_map() const {
  return tournament_map_;
}
inline bool Trail_map_type_filter::tournament_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.tournament_map)
  return _internal_tournament_map();
}
inline void Trail_map_type_filter::_internal_set_tournament_map(bool value) {
  
  tournament_map_ = value;
}
inline void Trail_map_type_filter::set_tournament_map(bool value) {
  _internal_set_tournament_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.tournament_map)
}

// bool tutorial_map = 9;
inline void Trail_map_type_filter::clear_tutorial_map() {
  tutorial_map_ = false;
}
inline bool Trail_map_type_filter::_internal_tutorial_map() const {
  return tutorial_map_;
}
inline bool Trail_map_type_filter::tutorial_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.tutorial_map)
  return _internal_tutorial_map();
}
inline void Trail_map_type_filter::_internal_set_tutorial_map(bool value) {
  
  tutorial_map_ = value;
}
inline void Trail_map_type_filter::set_tutorial_map(bool value) {
  _internal_set_tutorial_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.tutorial_map)
}

// bool user_tournament_map = 10;
inline void Trail_map_type_filter::clear_user_tournament_map() {
  user_tournament_map_ = false;
}
inline bool Trail_map_type_filter::_internal_user_tournament_map() const {
  return user_tournament_map_;
}
inline bool Trail_map_type_filter::user_tournament_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.user_tournament_map)
  return _internal_user_tournament_map();
}
inline void Trail_map_type_filter::_internal_set_user_tournament_map(bool value) {
  
  user_tournament_map_ = value;
}
inline void Trail_map_type_filter::set_user_tournament_map(bool value) {
  _internal_set_user_tournament_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.user_tournament_map)
}

// bool center_map = 11;
inline void Trail_map_type_filter::clear_center_map() {
  center_map_ = false;
}
inline bool Trail_map_type_filter::_internal_center_map() const {
  return center_map_;
}
inline bool Trail_map_type_filter::center_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.center_map)
  return _internal_center_map();
}
inline void Trail_map_type_filter::_internal_set_center_map(bool value) {
  
  center_map_ = value;
}
inline void Trail_map_type_filter::set_center_map(bool value) {
  _internal_set_center_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.center_map)
}

// bool eternal_battlegrounds_map = 12;
inline void Trail_map_type_filter::clear_eternal_battlegrounds_map() {
  eternal_battlegrounds_map_ = false;
}
inline bool Trail_map_type_filter::_internal_eternal_battlegrounds_map() const {
  return eternal_battlegrounds_map_;
}
inline bool Trail_map_type_filter::eternal_battlegrounds_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.eternal_battlegrounds_map)
  return _internal_eternal_battlegrounds_map();
}
inline void Trail_map_type_filter::_internal_set_eternal_battlegrounds_map(bool value) {
  
  eternal_battlegrounds_map_ = value;
}
inline void Trail_map_type_filter::set_eternal_battlegrounds_map(bool value) {
  _internal_set_eternal_battlegrounds_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.eternal_battlegrounds_map)
}

// bool bluehome_map = 13;
inline void Trail_map_type_filter::clear_bluehome_map() {
  bluehome_map_ = false;
}
inline bool Trail_map_type_filter::_internal_bluehome_map() const {
  return bluehome_map_;
}
inline bool Trail_map_type_filter::bluehome_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.bluehome_map)
  return _internal_bluehome_map();
}
inline void Trail_map_type_filter::_internal_set_bluehome_map(bool value) {
  
  bluehome_map_ = value;
}
inline void Trail_map_type_filter::set_bluehome_map(bool value) {
  _internal_set_bluehome_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.bluehome_map)
}

// bool blue_borderlands_map = 14;
inline void Trail_map_type_filter::clear_blue_borderlands_map() {
  blue_borderlands_map_ = false;
}
inline bool Trail_map_type_filter::_internal_blue_borderlands_map() const {
  return blue_borderlands_map_;
}
inline bool Trail_map_type_filter::blue_borderlands_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.blue_borderlands_map)
  return _internal_blue_borderlands_map();
}
inline void Trail_map_type_filter::_internal_set_blue_borderlands_map(bool value) {
  
  blue_borderlands_map_ = value;
}
inline void Trail_map_type_filter::set_blue_borderlands_map(bool value) {
  _internal_set_blue_borderlands_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.blue_borderlands_map)
}

// bool green_home_map = 15;
inline void Trail_map_type_filter::clear_green_home_map() {
  green_home_map_ = false;
}
inline bool Trail_map_type_filter::_internal_green_home_map() const {
  return green_home_map_;
}
inline bool Trail_map_type_filter::green_home_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.green_home_map)
  return _internal_green_home_map();
}
inline void Trail_map_type_filter::_internal_set_green_home_map(bool value) {
  
  green_home_map_ = value;
}
inline void Trail_map_type_filter::set_green_home_map(bool value) {
  _internal_set_green_home_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.green_home_map)
}

// bool green_borderlands_map = 16;
inline void Trail_map_type_filter::clear_green_borderlands_map() {
  green_borderlands_map_ = false;
}
inline bool Trail_map_type_filter::_internal_green_borderlands_map() const {
  return green_borderlands_map_;
}
inline bool Trail_map_type_filter::green_borderlands_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.green_borderlands_map)
  return _internal_green_borderlands_map();
}
inline void Trail_map_type_filter::_internal_set_green_borderlands_map(bool value) {
  
  green_borderlands_map_ = value;
}
inline void Trail_map_type_filter::set_green_borderlands_map(bool value) {
  _internal_set_green_borderlands_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.green_borderlands_map)
}

// bool red_home_map = 17;
inline void Trail_map_type_filter::clear_red_home_map() {
  red_home_map_ = false;
}
inline bool Trail_map_type_filter::_internal_red_home_map() const {
  return red_home_map_;
}
inline bool Trail_map_type_filter::red_home_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.red_home_map)
  return _internal_red_home_map();
}
inline void Trail_map_type_filter::_internal_set_red_home_map(bool value) {
  
  red_home_map_ = value;
}
inline void Trail_map_type_filter::set_red_home_map(bool value) {
  _internal_set_red_home_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.red_home_map)
}

// bool red_borderlands_map = 18;
inline void Trail_map_type_filter::clear_red_borderlands_map() {
  red_borderlands_map_ = false;
}
inline bool Trail_map_type_filter::_internal_red_borderlands_map() const {
  return red_borderlands_map_;
}
inline bool Trail_map_type_filter::red_borderlands_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.red_borderlands_map)
  return _internal_red_borderlands_map();
}
inline void Trail_map_type_filter::_internal_set_red_borderlands_map(bool value) {
  
  red_borderlands_map_ = value;
}
inline void Trail_map_type_filter::set_red_borderlands_map(bool value) {
  _internal_set_red_borderlands_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.red_borderlands_map)
}

// bool fortunes_vale_map = 19;
inline void Trail_map_type_filter::clear_fortunes_vale_map() {
  fortunes_vale_map_ = false;
}
inline bool Trail_map_type_filter::_internal_fortunes_vale_map() const {
  return fortunes_vale_map_;
}
inline bool Trail_map_type_filter::fortunes_vale_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.fortunes_vale_map)
  return _internal_fortunes_vale_map();
}
inline void Trail_map_type_filter::_internal_set_fortunes_vale_map(bool value) {
  
  fortunes_vale_map_ = value;
}
inline void Trail_map_type_filter::set_fortunes_vale_map(bool value) {
  _internal_set_fortunes_vale_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.fortunes_vale_map)
}

// bool jump_puzzle_map = 20;
inline void Trail_map_type_filter::clear_jump_puzzle_map() {
  jump_puzzle_map_ = false;
}
inline bool Trail_map_type_filter::_internal_jump_puzzle_map() const {
  return jump_puzzle_map_;
}
inline bool Trail_map_type_filter::jump_puzzle_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.jump_puzzle_map)
  return _internal_jump_puzzle_map();
}
inline void Trail_map_type_filter::_internal_set_jump_puzzle_map(bool value) {
  
  jump_puzzle_map_ = value;
}
inline void Trail_map_type_filter::set_jump_puzzle_map(bool value) {
  _internal_set_jump_puzzle_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.jump_puzzle_map)
}

// bool obsidian_sanctum_map = 21;
inline void Trail_map_type_filter::clear_obsidian_sanctum_map() {
  obsidian_sanctum_map_ = false;
}
inline bool Trail_map_type_filter::_internal_obsidian_sanctum_map() const {
  return obsidian_sanctum_map_;
}
inline bool Trail_map_type_filter::obsidian_sanctum_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.obsidian_sanctum_map)
  return _internal_obsidian_sanctum_map();
}
inline void Trail_map_type_filter::_internal_set_obsidian_sanctum_map(bool value) {
  
  obsidian_sanctum_map_ = value;
}
inline void Trail_map_type_filter::set_obsidian_sanctum_map(bool value) {
  _internal_set_obsidian_sanctum_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.obsidian_sanctum_map)
}

// bool edge_of_the_mists_map = 22;
inline void Trail_map_type_filter::clear_edge_of_the_mists_map() {
  edge_of_the_mists_map_ = false;
}
inline bool Trail_map_type_filter::_internal_edge_of_the_mists_map() const {
  return edge_of_the_mists_map_;
}
inline bool Trail_map_type_filter::edge_of_the_mists_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.edge_of_the_mists_map)
  return _internal_edge_of_the_mists_map();
}
inline void Trail_map_type_filter::_internal_set_edge_of_the_mists_map(bool value) {
  
  edge_of_the_mists_map_ = value;
}
inline void Trail_map_type_filter::set_edge_of_the_mists_map(bool value) {
  _internal_set_edge_of_the_mists_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.edge_of_the_mists_map)
}

// bool public_mini_map = 23;
inline void Trail_map_type_filter::clear_public_mini_map() {
  public_mini_map_ = false;
}
inline bool Trail_map_type_filter::_internal_public_mini_map() const {
  return public_mini_map_;
}
inline bool Trail_map_type_filter::public_mini_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.public_mini_map)
  return _internal_public_mini_map();
}
inline void Trail_map_type_filter::_internal_set_public_mini_map(bool value) {
  
  public_mini_map_ = value;
}
inline void Trail_map_type_filter::set_public_mini_map(bool value) {
  _internal_set_public_mini_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.public_mini_map)
}

// bool wvw_lounge_map = 24;
inline void Trail_map_type_filter::clear_wvw_lounge_map() {
  wvw_lounge_map_ = false;
}
inline bool Trail_map_type_filter::_internal_wvw_lounge_map() const {
  return wvw_lounge_map_;
}
inline bool Trail_map_type_filter::wvw_lounge_map() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_type_filter.wvw_lounge_map)
  return _internal_wvw_lounge_map();
}
inline void Trail_map_type_filter::_internal_set_wvw_lounge_map(bool value) {
  
  wvw_lounge_map_ = value;
}
inline void Trail_map_type_filter::set_wvw_lounge_map(bool value) {
  _internal_set_wvw_lounge_map(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_type_filter.wvw_lounge_map)
}

// -------------------------------------------------------------------

// Trail_mount_filter

// bool raptor = 1;
inline void Trail_mount_filter::clear_raptor() {
  raptor_ = false;
}
inline bool Trail_mount_filter::_internal_raptor() const {
  return raptor_;
}
inline bool Trail_mount_filter::raptor() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.raptor)
  return _internal_raptor();
}
inline void Trail_mount_filter::_internal_set_raptor(bool value) {
  
  raptor_ = value;
}
inline void Trail_mount_filter::set_raptor(bool value) {
  _internal_set_raptor(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.raptor)
}

// bool springer = 2;
inline void Trail_mount_filter::clear_springer() {
  springer_ = false;
}
inline bool Trail_mount_filter::_internal_springer() const {
  return springer_;
}
inline bool Trail_mount_filter::springer() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.springer)
  return _internal_springer();
}
inline void Trail_mount_filter::_internal_set_springer(bool value) {
  
  springer_ = value;
}
inline void Trail_mount_filter::set_springer(bool value) {
  _internal_set_springer(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.springer)
}

// bool skimmer = 3;
inline void Trail_mount_filter::clear_skimmer() {
  skimmer_ = false;
}
inline bool Trail_mount_filter::_internal_skimmer() const {
  return skimmer_;
}
inline bool Trail_mount_filter::skimmer() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.skimmer)
  return _internal_skimmer();
}
inline void Trail_mount_filter::_internal_set_skimmer(bool value) {
  
  skimmer_ = value;
}
inline void Trail_mount_filter::set_skimmer(bool value) {
  _internal_set_skimmer(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.skimmer)
}

// bool jackal = 4;
inline void Trail_mount_filter::clear_jackal() {
  jackal_ = false;
}
inline bool Trail_mount_filter::_internal_jackal() const {
  return jackal_;
}
inline bool Trail_mount_filter::jackal() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.jackal)
  return _internal_jackal();
}
inline void Trail_mount_filter::_internal_set_jackal(bool value) {
  
  jackal_ = value;
}
inline void Trail_mount_filter::set_jackal(bool value) {
  _internal_set_jackal(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.jackal)
}

// bool griffon = 5;
inline void Trail_mount_filter::clear_griffon() {
  griffon_ = false;
}
inline bool Trail_mount_filter::_internal_griffon() const {
  return griffon_;
}
inline bool Trail_mount_filter::griffon() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.griffon)
  return _internal_griffon();
}
inline void Trail_mount_filter::_internal_set_griffon(bool value) {
  
  griffon_ = value;
}
inline void Trail_mount_filter::set_griffon(bool value) {
  _internal_set_griffon(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.griffon)
}

// bool roller_beetle = 6;
inline void Trail_mount_filter::clear_roller_beetle() {
  roller_beetle_ = false;
}
inline bool Trail_mount_filter::_internal_roller_beetle() const {
  return roller_beetle_;
}
inline bool Trail_mount_filter::roller_beetle() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.roller_beetle)
  return _internal_roller_beetle();
}
inline void Trail_mount_filter::_internal_set_roller_beetle(bool value) {
  
  roller_beetle_ = value;
}
inline void Trail_mount_filter::set_roller_beetle(bool value) {
  _internal_set_roller_beetle(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.roller_beetle)
}

// bool warclaw = 7;
inline void Trail_mount_filter::clear_warclaw() {
  warclaw_ = false;
}
inline bool Trail_mount_filter::_internal_warclaw() const {
  return warclaw_;
}
inline bool Trail_mount_filter::warclaw() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.warclaw)
  return _internal_warclaw();
}
inline void Trail_mount_filter::_internal_set_warclaw(bool value) {
  
  warclaw_ = value;
}
inline void Trail_mount_filter::set_warclaw(bool value) {
  _internal_set_warclaw(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.warclaw)
}

// bool skyscalee = 8;
inline void Trail_mount_filter::clear_skyscalee() {
  skyscalee_ = false;
}
inline bool Trail_mount_filter::_internal_skyscalee() const {
  return skyscalee_;
}
inline bool Trail_mount_filter::skyscalee() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.skyscalee)
  return _internal_skyscalee();
}
inline void Trail_mount_filter::_internal_set_skyscalee(bool value) {
  
  skyscalee_ = value;
}
inline void Trail_mount_filter::set_skyscalee(bool value) {
  _internal_set_skyscalee(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.skyscalee)
}

// bool skiff = 9;
inline void Trail_mount_filter::clear_skiff() {
  skiff_ = false;
}
inline bool Trail_mount_filter::_internal_skiff() const {
  return skiff_;
}
inline bool Trail_mount_filter::skiff() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.skiff)
  return _internal_skiff();
}
inline void Trail_mount_filter::_internal_set_skiff(bool value) {
  
  skiff_ = value;
}
inline void Trail_mount_filter::set_skiff(bool value) {
  _internal_set_skiff(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.skiff)
}

// bool seige_turtle = 10;
inline void Trail_mount_filter::clear_seige_turtle() {
  seige_turtle_ = false;
}
inline bool Trail_mount_filter::_internal_seige_turtle() const {
  return seige_turtle_;
}
inline bool Trail_mount_filter::seige_turtle() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.mount_filter.seige_turtle)
  return _internal_seige_turtle();
}
inline void Trail_mount_filter::_internal_set_seige_turtle(bool value) {
  
  seige_turtle_ = value;
}
inline void Trail_mount_filter::set_seige_turtle(bool value) {
  _internal_set_seige_turtle(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.mount_filter.seige_turtle)
}

// -------------------------------------------------------------------

// Trail_profession_filter

// bool guardian = 1;
inline void Trail_profession_filter::clear_guardian() {
  guardian_ = false;
}
inline bool Trail_profession_filter::_internal_guardian() const {
  return guardian_;
}
inline bool Trail_profession_filter::guardian() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.profession_filter.guardian)
  return _internal_guardian();
}
inline void Trail_profession_filter::_internal_set_guardian(bool value) {
  
  guardian_ = value;
}
inline void Trail_profession_filter::set_guardian(bool value) {
  _internal_set_guardian(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.profession_filter.guardian)
}

// bool warrior = 2;
inline void Trail_profession_filter::clear_warrior() {
  warrior_ = false;
}
inline bool Trail_profession_filter::_internal_warrior() const {
  return warrior_;
}
inline bool Trail_profession_filter::warrior() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.profession_filter.warrior)
  return _internal_warrior();
}
inline void Trail_profession_filter::_internal_set_warrior(bool value) {
  
  warrior_ = value;
}
inline void Trail_profession_filter::set_warrior(bool value) {
  _internal_set_warrior(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.profession_filter.warrior)
}

// bool engineer = 3;
inline void Trail_profession_filter::clear_engineer() {
  engineer_ = false;
}
inline bool Trail_profession_filter::_internal_engineer() const {
  return engineer_;
}
inline bool Trail_profession_filter::engineer() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.profession_filter.engineer)
  return _internal_engineer();
}
inline void Trail_profession_filter::_internal_set_engineer(bool value) {
  
  engineer_ = value;
}
inline void Trail_profession_filter::set_engineer(bool value) {
  _internal_set_engineer(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.profession_filter.engineer)
}

// bool ranger = 4;
inline void Trail_profession_filter::clear_ranger() {
  ranger_ = false;
}
inline bool Trail_profession_filter::_internal_ranger() const {
  return ranger_;
}
inline bool Trail_profession_filter::ranger() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.profession_filter.ranger)
  return _internal_ranger();
}
inline void Trail_profession_filter::_internal_set_ranger(bool value) {
  
  ranger_ = value;
}
inline void Trail_profession_filter::set_ranger(bool value) {
  _internal_set_ranger(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.profession_filter.ranger)
}

// bool thief = 5;
inline void Trail_profession_filter::clear_thief() {
  thief_ = false;
}
inline bool Trail_profession_filter::_internal_thief() const {
  return thief_;
}
inline bool Trail_profession_filter::thief() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.profession_filter.thief)
  return _internal_thief();
}
inline void Trail_profession_filter::_internal_set_thief(bool value) {
  
  thief_ = value;
}
inline void Trail_profession_filter::set_thief(bool value) {
  _internal_set_thief(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.profession_filter.thief)
}

// bool elementalist = 6;
inline void Trail_profession_filter::clear_elementalist() {
  elementalist_ = false;
}
inline bool Trail_profession_filter::_internal_elementalist() const {
  return elementalist_;
}
inline bool Trail_profession_filter::elementalist() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.profession_filter.elementalist)
  return _internal_elementalist();
}
inline void Trail_profession_filter::_internal_set_elementalist(bool value) {
  
  elementalist_ = value;
}
inline void Trail_profession_filter::set_elementalist(bool value) {
  _internal_set_elementalist(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.profession_filter.elementalist)
}

// bool mesmer = 7;
inline void Trail_profession_filter::clear_mesmer() {
  mesmer_ = false;
}
inline bool Trail_profession_filter::_internal_mesmer() const {
  return mesmer_;
}
inline bool Trail_profession_filter::mesmer() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.profession_filter.mesmer)
  return _internal_mesmer();
}
inline void Trail_profession_filter::_internal_set_mesmer(bool value) {
  
  mesmer_ = value;
}
inline void Trail_profession_filter::set_mesmer(bool value) {
  _internal_set_mesmer(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.profession_filter.mesmer)
}

// bool necromancer = 8;
inline void Trail_profession_filter::clear_necromancer() {
  necromancer_ = false;
}
inline bool Trail_profession_filter::_internal_necromancer() const {
  return necromancer_;
}
inline bool Trail_profession_filter::necromancer() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.profession_filter.necromancer)
  return _internal_necromancer();
}
inline void Trail_profession_filter::_internal_set_necromancer(bool value) {
  
  necromancer_ = value;
}
inline void Trail_profession_filter::set_necromancer(bool value) {
  _internal_set_necromancer(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.profession_filter.necromancer)
}

// bool revenantnt = 9;
inline void Trail_profession_filter::clear_revenantnt() {
  revenantnt_ = false;
}
inline bool Trail_profession_filter::_internal_revenantnt() const {
  return revenantnt_;
}
inline bool Trail_profession_filter::revenantnt() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.profession_filter.revenantnt)
  return _internal_revenantnt();
}
inline void Trail_profession_filter::_internal_set_revenantnt(bool value) {
  
  revenantnt_ = value;
}
inline void Trail_profession_filter::set_revenantnt(bool value) {
  _internal_set_revenantnt(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.profession_filter.revenantnt)
}

// -------------------------------------------------------------------

// Trail_specialization_filter

// bool elementalist_tempest = 48;
inline void Trail_specialization_filter::clear_elementalist_tempest() {
  elementalist_tempest_ = false;
}
inline bool Trail_specialization_filter::_internal_elementalist_tempest() const {
  return elementalist_tempest_;
}
inline bool Trail_specialization_filter::elementalist_tempest() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.elementalist_tempest)
  return _internal_elementalist_tempest();
}
inline void Trail_specialization_filter::_internal_set_elementalist_tempest(bool value) {
  
  elementalist_tempest_ = value;
}
inline void Trail_specialization_filter::set_elementalist_tempest(bool value) {
  _internal_set_elementalist_tempest(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.elementalist_tempest)
}

// bool engineer_scrapper = 43;
inline void Trail_specialization_filter::clear_engineer_scrapper() {
  engineer_scrapper_ = false;
}
inline bool Trail_specialization_filter::_internal_engineer_scrapper() const {
  return engineer_scrapper_;
}
inline bool Trail_specialization_filter::engineer_scrapper() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.engineer_scrapper)
  return _internal_engineer_scrapper();
}
inline void Trail_specialization_filter::_internal_set_engineer_scrapper(bool value) {
  
  engineer_scrapper_ = value;
}
inline void Trail_specialization_filter::set_engineer_scrapper(bool value) {
  _internal_set_engineer_scrapper(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.engineer_scrapper)
}

// bool guardian_dragonhunter = 27;
inline void Trail_specialization_filter::clear_guardian_dragonhunter() {
  guardian_dragonhunter_ = false;
}
inline bool Trail_specialization_filter::_internal_guardian_dragonhunter() const {
  return guardian_dragonhunter_;
}
inline bool Trail_specialization_filter::guardian_dragonhunter() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.guardian_dragonhunter)
  return _internal_guardian_dragonhunter();
}
inline void Trail_specialization_filter::_internal_set_guardian_dragonhunter(bool value) {
  
  guardian_dragonhunter_ = value;
}
inline void Trail_specialization_filter::set_guardian_dragonhunter(bool value) {
  _internal_set_guardian_dragonhunter(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.guardian_dragonhunter)
}

// bool mesmer_chronomancer = 40;
inline void Trail_specialization_filter::clear_mesmer_chronomancer() {
  mesmer_chronomancer_ = false;
}
inline bool Trail_specialization_filter::_internal_mesmer_chronomancer() const {
  return mesmer_chronomancer_;
}
inline bool Trail_specialization_filter::mesmer_chronomancer() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.mesmer_chronomancer)
  return _internal_mesmer_chronomancer();
}
inline void Trail_specialization_filter::_internal_set_mesmer_chronomancer(bool value) {
  
  mesmer_chronomancer_ = value;
}
inline void Trail_specialization_filter::set_mesmer_chronomancer(bool value) {
  _internal_set_mesmer_chronomancer(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.mesmer_chronomancer)
}

// bool necromancer_reaper = 34;
inline void Trail_specialization_filter::clear_necromancer_reaper() {
  necromancer_reaper_ = false;
}
inline bool Trail_specialization_filter::_internal_necromancer_reaper() const {
  return necromancer_reaper_;
}
inline bool Trail_specialization_filter::necromancer_reaper() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.necromancer_reaper)
  return _internal_necromancer_reaper();
}
inline void Trail_specialization_filter::_internal_set_necromancer_reaper(bool value) {
  
  necromancer_reaper_ = value;
}
inline void Trail_specialization_filter::set_necromancer_reaper(bool value) {
  _internal_set_necromancer_reaper(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.necromancer_reaper)
}

// bool ranger_druid = 5;
inline void Trail_specialization_filter::clear_ranger_druid() {
  ranger_druid_ = false;
}
inline bool Trail_specialization_filter::_internal_ranger_druid() const {
  return ranger_druid_;
}
inline bool Trail_specialization_filter::ranger_druid() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.ranger_druid)
  return _internal_ranger_druid();
}
inline void Trail_specialization_filter::_internal_set_ranger_druid(bool value) {
  
  ranger_druid_ = value;
}
inline void Trail_specialization_filter::set_ranger_druid(bool value) {
  _internal_set_ranger_druid(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.ranger_druid)
}

// bool revenant_herald = 52;
inline void Trail_specialization_filter::clear_revenant_herald() {
  revenant_herald_ = false;
}
inline bool Trail_specialization_filter::_internal_revenant_herald() const {
  return revenant_herald_;
}
inline bool Trail_specialization_filter::revenant_herald() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.revenant_herald)
  return _internal_revenant_herald();
}
inline void Trail_specialization_filter::_internal_set_revenant_herald(bool value) {
  
  revenant_herald_ = value;
}
inline void Trail_specialization_filter::set_revenant_herald(bool value) {
  _internal_set_revenant_herald(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.revenant_herald)
}

// bool thief_daredevil = 7;
inline void Trail_specialization_filter::clear_thief_daredevil() {
  thief_daredevil_ = false;
}
inline bool Trail_specialization_filter::_internal_thief_daredevil() const {
  return thief_daredevil_;
}
inline bool Trail_specialization_filter::thief_daredevil() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.thief_daredevil)
  return _internal_thief_daredevil();
}
inline void Trail_specialization_filter::_internal_set_thief_daredevil(bool value) {
  
  thief_daredevil_ = value;
}
inline void Trail_specialization_filter::set_thief_daredevil(bool value) {
  _internal_set_thief_daredevil(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.thief_daredevil)
}

// bool warrior_berserker = 18;
inline void Trail_specialization_filter::clear_warrior_berserker() {
  warrior_berserker_ = false;
}
inline bool Trail_specialization_filter::_internal_warrior_berserker() const {
  return warrior_berserker_;
}
inline bool Trail_specialization_filter::warrior_berserker() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.warrior_berserker)
  return _internal_warrior_berserker();
}
inline void Trail_specialization_filter::_internal_set_warrior_berserker(bool value) {
  
  warrior_berserker_ = value;
}
inline void Trail_specialization_filter::set_warrior_berserker(bool value) {
  _internal_set_warrior_berserker(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.warrior_berserker)
}

// bool elementalist_weaver = 56;
inline void Trail_specialization_filter::clear_elementalist_weaver() {
  elementalist_weaver_ = false;
}
inline bool Trail_specialization_filter::_internal_elementalist_weaver() const {
  return elementalist_weaver_;
}
inline bool Trail_specialization_filter::elementalist_weaver() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.elementalist_weaver)
  return _internal_elementalist_weaver();
}
inline void Trail_specialization_filter::_internal_set_elementalist_weaver(bool value) {
  
  elementalist_weaver_ = value;
}
inline void Trail_specialization_filter::set_elementalist_weaver(bool value) {
  _internal_set_elementalist_weaver(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.elementalist_weaver)
}

// bool engineer_holosmith = 57;
inline void Trail_specialization_filter::clear_engineer_holosmith() {
  engineer_holosmith_ = false;
}
inline bool Trail_specialization_filter::_internal_engineer_holosmith() const {
  return engineer_holosmith_;
}
inline bool Trail_specialization_filter::engineer_holosmith() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.engineer_holosmith)
  return _internal_engineer_holosmith();
}
inline void Trail_specialization_filter::_internal_set_engineer_holosmith(bool value) {
  
  engineer_holosmith_ = value;
}
inline void Trail_specialization_filter::set_engineer_holosmith(bool value) {
  _internal_set_engineer_holosmith(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.engineer_holosmith)
}

// bool guardian_firebrand = 62;
inline void Trail_specialization_filter::clear_guardian_firebrand() {
  guardian_firebrand_ = false;
}
inline bool Trail_specialization_filter::_internal_guardian_firebrand() const {
  return guardian_firebrand_;
}
inline bool Trail_specialization_filter::guardian_firebrand() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.guardian_firebrand)
  return _internal_guardian_firebrand();
}
inline void Trail_specialization_filter::_internal_set_guardian_firebrand(bool value) {
  
  guardian_firebrand_ = value;
}
inline void Trail_specialization_filter::set_guardian_firebrand(bool value) {
  _internal_set_guardian_firebrand(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.guardian_firebrand)
}

// bool mesmer_mirage = 59;
inline void Trail_specialization_filter::clear_mesmer_mirage() {
  mesmer_mirage_ = false;
}
inline bool Trail_specialization_filter::_internal_mesmer_mirage() const {
  return mesmer_mirage_;
}
inline bool Trail_specialization_filter::mesmer_mirage() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.mesmer_mirage)
  return _internal_mesmer_mirage();
}
inline void Trail_specialization_filter::_internal_set_mesmer_mirage(bool value) {
  
  mesmer_mirage_ = value;
}
inline void Trail_specialization_filter::set_mesmer_mirage(bool value) {
  _internal_set_mesmer_mirage(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.mesmer_mirage)
}

// bool necromancer_scourge = 60;
inline void Trail_specialization_filter::clear_necromancer_scourge() {
  necromancer_scourge_ = false;
}
inline bool Trail_specialization_filter::_internal_necromancer_scourge() const {
  return necromancer_scourge_;
}
inline bool Trail_specialization_filter::necromancer_scourge() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.necromancer_scourge)
  return _internal_necromancer_scourge();
}
inline void Trail_specialization_filter::_internal_set_necromancer_scourge(bool value) {
  
  necromancer_scourge_ = value;
}
inline void Trail_specialization_filter::set_necromancer_scourge(bool value) {
  _internal_set_necromancer_scourge(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.necromancer_scourge)
}

// bool ranger_soulbeast = 55;
inline void Trail_specialization_filter::clear_ranger_soulbeast() {
  ranger_soulbeast_ = false;
}
inline bool Trail_specialization_filter::_internal_ranger_soulbeast() const {
  return ranger_soulbeast_;
}
inline bool Trail_specialization_filter::ranger_soulbeast() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.ranger_soulbeast)
  return _internal_ranger_soulbeast();
}
inline void Trail_specialization_filter::_internal_set_ranger_soulbeast(bool value) {
  
  ranger_soulbeast_ = value;
}
inline void Trail_specialization_filter::set_ranger_soulbeast(bool value) {
  _internal_set_ranger_soulbeast(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.ranger_soulbeast)
}

// bool revenant_renegade = 63;
inline void Trail_specialization_filter::clear_revenant_renegade() {
  revenant_renegade_ = false;
}
inline bool Trail_specialization_filter::_internal_revenant_renegade() const {
  return revenant_renegade_;
}
inline bool Trail_specialization_filter::revenant_renegade() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.revenant_renegade)
  return _internal_revenant_renegade();
}
inline void Trail_specialization_filter::_internal_set_revenant_renegade(bool value) {
  
  revenant_renegade_ = value;
}
inline void Trail_specialization_filter::set_revenant_renegade(bool value) {
  _internal_set_revenant_renegade(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.revenant_renegade)
}

// bool thief_deadeye = 58;
inline void Trail_specialization_filter::clear_thief_deadeye() {
  thief_deadeye_ = false;
}
inline bool Trail_specialization_filter::_internal_thief_deadeye() const {
  return thief_deadeye_;
}
inline bool Trail_specialization_filter::thief_deadeye() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.thief_deadeye)
  return _internal_thief_deadeye();
}
inline void Trail_specialization_filter::_internal_set_thief_deadeye(bool value) {
  
  thief_deadeye_ = value;
}
inline void Trail_specialization_filter::set_thief_deadeye(bool value) {
  _internal_set_thief_deadeye(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.thief_deadeye)
}

// bool warrior_spellbreaker = 61;
inline void Trail_specialization_filter::clear_warrior_spellbreaker() {
  warrior_spellbreaker_ = false;
}
inline bool Trail_specialization_filter::_internal_warrior_spellbreaker() const {
  return warrior_spellbreaker_;
}
inline bool Trail_specialization_filter::warrior_spellbreaker() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.warrior_spellbreaker)
  return _internal_warrior_spellbreaker();
}
inline void Trail_specialization_filter::_internal_set_warrior_spellbreaker(bool value) {
  
  warrior_spellbreaker_ = value;
}
inline void Trail_specialization_filter::set_warrior_spellbreaker(bool value) {
  _internal_set_warrior_spellbreaker(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.warrior_spellbreaker)
}

// bool elmentalist_catalyst = 67;
inline void Trail_specialization_filter::clear_elmentalist_catalyst() {
  elmentalist_catalyst_ = false;
}
inline bool Trail_specialization_filter::_internal_elmentalist_catalyst() const {
  return elmentalist_catalyst_;
}
inline bool Trail_specialization_filter::elmentalist_catalyst() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.elmentalist_catalyst)
  return _internal_elmentalist_catalyst();
}
inline void Trail_specialization_filter::_internal_set_elmentalist_catalyst(bool value) {
  
  elmentalist_catalyst_ = value;
}
inline void Trail_specialization_filter::set_elmentalist_catalyst(bool value) {
  _internal_set_elmentalist_catalyst(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.elmentalist_catalyst)
}

// bool engineer_mechanist = 70;
inline void Trail_specialization_filter::clear_engineer_mechanist() {
  engineer_mechanist_ = false;
}
inline bool Trail_specialization_filter::_internal_engineer_mechanist() const {
  return engineer_mechanist_;
}
inline bool Trail_specialization_filter::engineer_mechanist() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.engineer_mechanist)
  return _internal_engineer_mechanist();
}
inline void Trail_specialization_filter::_internal_set_engineer_mechanist(bool value) {
  
  engineer_mechanist_ = value;
}
inline void Trail_specialization_filter::set_engineer_mechanist(bool value) {
  _internal_set_engineer_mechanist(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.engineer_mechanist)
}

// bool guardian_willbender = 65;
inline void Trail_specialization_filter::clear_guardian_willbender() {
  guardian_willbender_ = false;
}
inline bool Trail_specialization_filter::_internal_guardian_willbender() const {
  return guardian_willbender_;
}
inline bool Trail_specialization_filter::guardian_willbender() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.guardian_willbender)
  return _internal_guardian_willbender();
}
inline void Trail_specialization_filter::_internal_set_guardian_willbender(bool value) {
  
  guardian_willbender_ = value;
}
inline void Trail_specialization_filter::set_guardian_willbender(bool value) {
  _internal_set_guardian_willbender(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.guardian_willbender)
}

// bool mesmer_virtuoso = 66;
inline void Trail_specialization_filter::clear_mesmer_virtuoso() {
  mesmer_virtuoso_ = false;
}
inline bool Trail_specialization_filter::_internal_mesmer_virtuoso() const {
  return mesmer_virtuoso_;
}
inline bool Trail_specialization_filter::mesmer_virtuoso() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.mesmer_virtuoso)
  return _internal_mesmer_virtuoso();
}
inline void Trail_specialization_filter::_internal_set_mesmer_virtuoso(bool value) {
  
  mesmer_virtuoso_ = value;
}
inline void Trail_specialization_filter::set_mesmer_virtuoso(bool value) {
  _internal_set_mesmer_virtuoso(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.mesmer_virtuoso)
}

// bool necromancer_harbinger = 64;
inline void Trail_specialization_filter::clear_necromancer_harbinger() {
  necromancer_harbinger_ = false;
}
inline bool Trail_specialization_filter::_internal_necromancer_harbinger() const {
  return necromancer_harbinger_;
}
inline bool Trail_specialization_filter::necromancer_harbinger() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.necromancer_harbinger)
  return _internal_necromancer_harbinger();
}
inline void Trail_specialization_filter::_internal_set_necromancer_harbinger(bool value) {
  
  necromancer_harbinger_ = value;
}
inline void Trail_specialization_filter::set_necromancer_harbinger(bool value) {
  _internal_set_necromancer_harbinger(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.necromancer_harbinger)
}

// bool ranger_untamed = 72;
inline void Trail_specialization_filter::clear_ranger_untamed() {
  ranger_untamed_ = false;
}
inline bool Trail_specialization_filter::_internal_ranger_untamed() const {
  return ranger_untamed_;
}
inline bool Trail_specialization_filter::ranger_untamed() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.ranger_untamed)
  return _internal_ranger_untamed();
}
inline void Trail_specialization_filter::_internal_set_ranger_untamed(bool value) {
  
  ranger_untamed_ = value;
}
inline void Trail_specialization_filter::set_ranger_untamed(bool value) {
  _internal_set_ranger_untamed(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.ranger_untamed)
}

// bool revenant_vindicator = 69;
inline void Trail_specialization_filter::clear_revenant_vindicator() {
  revenant_vindicator_ = false;
}
inline bool Trail_specialization_filter::_internal_revenant_vindicator() const {
  return revenant_vindicator_;
}
inline bool Trail_specialization_filter::revenant_vindicator() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.revenant_vindicator)
  return _internal_revenant_vindicator();
}
inline void Trail_specialization_filter::_internal_set_revenant_vindicator(bool value) {
  
  revenant_vindicator_ = value;
}
inline void Trail_specialization_filter::set_revenant_vindicator(bool value) {
  _internal_set_revenant_vindicator(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.revenant_vindicator)
}

// bool thief_specter = 71;
inline void Trail_specialization_filter::clear_thief_specter() {
  thief_specter_ = false;
}
inline bool Trail_specialization_filter::_internal_thief_specter() const {
  return thief_specter_;
}
inline bool Trail_specialization_filter::thief_specter() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.thief_specter)
  return _internal_thief_specter();
}
inline void Trail_specialization_filter::_internal_set_thief_specter(bool value) {
  
  thief_specter_ = value;
}
inline void Trail_specialization_filter::set_thief_specter(bool value) {
  _internal_set_thief_specter(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.thief_specter)
}

// bool warrior_bladesworn = 68;
inline void Trail_specialization_filter::clear_warrior_bladesworn() {
  warrior_bladesworn_ = false;
}
inline bool Trail_specialization_filter::_internal_warrior_bladesworn() const {
  return warrior_bladesworn_;
}
inline bool Trail_specialization_filter::warrior_bladesworn() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.warrior_bladesworn)
  return _internal_warrior_bladesworn();
}
inline void Trail_specialization_filter::_internal_set_warrior_bladesworn(bool value) {
  
  warrior_bladesworn_ = value;
}
inline void Trail_specialization_filter::set_warrior_bladesworn(bool value) {
  _internal_set_warrior_bladesworn(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.warrior_bladesworn)
}

// bool elementalist_air = 41;
inline void Trail_specialization_filter::clear_elementalist_air() {
  elementalist_air_ = false;
}
inline bool Trail_specialization_filter::_internal_elementalist_air() const {
  return elementalist_air_;
}
inline bool Trail_specialization_filter::elementalist_air() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.elementalist_air)
  return _internal_elementalist_air();
}
inline void Trail_specialization_filter::_internal_set_elementalist_air(bool value) {
  
  elementalist_air_ = value;
}
inline void Trail_specialization_filter::set_elementalist_air(bool value) {
  _internal_set_elementalist_air(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.elementalist_air)
}

// bool elementalist_arcane = 37;
inline void Trail_specialization_filter::clear_elementalist_arcane() {
  elementalist_arcane_ = false;
}
inline bool Trail_specialization_filter::_internal_elementalist_arcane() const {
  return elementalist_arcane_;
}
inline bool Trail_specialization_filter::elementalist_arcane() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.elementalist_arcane)
  return _internal_elementalist_arcane();
}
inline void Trail_specialization_filter::_internal_set_elementalist_arcane(bool value) {
  
  elementalist_arcane_ = value;
}
inline void Trail_specialization_filter::set_elementalist_arcane(bool value) {
  _internal_set_elementalist_arcane(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.elementalist_arcane)
}

// bool elementalist_earth = 26;
inline void Trail_specialization_filter::clear_elementalist_earth() {
  elementalist_earth_ = false;
}
inline bool Trail_specialization_filter::_internal_elementalist_earth() const {
  return elementalist_earth_;
}
inline bool Trail_specialization_filter::elementalist_earth() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.elementalist_earth)
  return _internal_elementalist_earth();
}
inline void Trail_specialization_filter::_internal_set_elementalist_earth(bool value) {
  
  elementalist_earth_ = value;
}
inline void Trail_specialization_filter::set_elementalist_earth(bool value) {
  _internal_set_elementalist_earth(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.elementalist_earth)
}

// bool elementalist_fire = 31;
inline void Trail_specialization_filter::clear_elementalist_fire() {
  elementalist_fire_ = false;
}
inline bool Trail_specialization_filter::_internal_elementalist_fire() const {
  return elementalist_fire_;
}
inline bool Trail_specialization_filter::elementalist_fire() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.elementalist_fire)
  return _internal_elementalist_fire();
}
inline void Trail_specialization_filter::_internal_set_elementalist_fire(bool value) {
  
  elementalist_fire_ = value;
}
inline void Trail_specialization_filter::set_elementalist_fire(bool value) {
  _internal_set_elementalist_fire(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.elementalist_fire)
}

// bool elementalist_water = 17;
inline void Trail_specialization_filter::clear_elementalist_water() {
  elementalist_water_ = false;
}
inline bool Trail_specialization_filter::_internal_elementalist_water() const {
  return elementalist_water_;
}
inline bool Trail_specialization_filter::elementalist_water() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.elementalist_water)
  return _internal_elementalist_water();
}
inline void Trail_specialization_filter::_internal_set_elementalist_water(bool value) {
  
  elementalist_water_ = value;
}
inline void Trail_specialization_filter::set_elementalist_water(bool value) {
  _internal_set_elementalist_water(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.elementalist_water)
}

// bool engineer_alchemy = 29;
inline void Trail_specialization_filter::clear_engineer_alchemy() {
  engineer_alchemy_ = false;
}
inline bool Trail_specialization_filter::_internal_engineer_alchemy() const {
  return engineer_alchemy_;
}
inline bool Trail_specialization_filter::engineer_alchemy() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.engineer_alchemy)
  return _internal_engineer_alchemy();
}
inline void Trail_specialization_filter::_internal_set_engineer_alchemy(bool value) {
  
  engineer_alchemy_ = value;
}
inline void Trail_specialization_filter::set_engineer_alchemy(bool value) {
  _internal_set_engineer_alchemy(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.engineer_alchemy)
}

// bool engineer_explosives = 6;
inline void Trail_specialization_filter::clear_engineer_explosives() {
  engineer_explosives_ = false;
}
inline bool Trail_specialization_filter::_internal_engineer_explosives() const {
  return engineer_explosives_;
}
inline bool Trail_specialization_filter::engineer_explosives() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.engineer_explosives)
  return _internal_engineer_explosives();
}
inline void Trail_specialization_filter::_internal_set_engineer_explosives(bool value) {
  
  engineer_explosives_ = value;
}
inline void Trail_specialization_filter::set_engineer_explosives(bool value) {
  _internal_set_engineer_explosives(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.engineer_explosives)
}

// bool engineer_firearms = 38;
inline void Trail_specialization_filter::clear_engineer_firearms() {
  engineer_firearms_ = false;
}
inline bool Trail_specialization_filter::_internal_engineer_firearms() const {
  return engineer_firearms_;
}
inline bool Trail_specialization_filter::engineer_firearms() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.engineer_firearms)
  return _internal_engineer_firearms();
}
inline void Trail_specialization_filter::_internal_set_engineer_firearms(bool value) {
  
  engineer_firearms_ = value;
}
inline void Trail_specialization_filter::set_engineer_firearms(bool value) {
  _internal_set_engineer_firearms(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.engineer_firearms)
}

// bool engineer_inventions = 47;
inline void Trail_specialization_filter::clear_engineer_inventions() {
  engineer_inventions_ = false;
}
inline bool Trail_specialization_filter::_internal_engineer_inventions() const {
  return engineer_inventions_;
}
inline bool Trail_specialization_filter::engineer_inventions() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.engineer_inventions)
  return _internal_engineer_inventions();
}
inline void Trail_specialization_filter::_internal_set_engineer_inventions(bool value) {
  
  engineer_inventions_ = value;
}
inline void Trail_specialization_filter::set_engineer_inventions(bool value) {
  _internal_set_engineer_inventions(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.engineer_inventions)
}

// bool engineer_tools = 21;
inline void Trail_specialization_filter::clear_engineer_tools() {
  engineer_tools_ = false;
}
inline bool Trail_specialization_filter::_internal_engineer_tools() const {
  return engineer_tools_;
}
inline bool Trail_specialization_filter::engineer_tools() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.engineer_tools)
  return _internal_engineer_tools();
}
inline void Trail_specialization_filter::_internal_set_engineer_tools(bool value) {
  
  engineer_tools_ = value;
}
inline void Trail_specialization_filter::set_engineer_tools(bool value) {
  _internal_set_engineer_tools(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.engineer_tools)
}

// bool guardian_honor = 49;
inline void Trail_specialization_filter::clear_guardian_honor() {
  guardian_honor_ = false;
}
inline bool Trail_specialization_filter::_internal_guardian_honor() const {
  return guardian_honor_;
}
inline bool Trail_specialization_filter::guardian_honor() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.guardian_honor)
  return _internal_guardian_honor();
}
inline void Trail_specialization_filter::_internal_set_guardian_honor(bool value) {
  
  guardian_honor_ = value;
}
inline void Trail_specialization_filter::set_guardian_honor(bool value) {
  _internal_set_guardian_honor(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.guardian_honor)
}

// bool guardian_radiance = 16;
inline void Trail_specialization_filter::clear_guardian_radiance() {
  guardian_radiance_ = false;
}
inline bool Trail_specialization_filter::_internal_guardian_radiance() const {
  return guardian_radiance_;
}
inline bool Trail_specialization_filter::guardian_radiance() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.guardian_radiance)
  return _internal_guardian_radiance();
}
inline void Trail_specialization_filter::_internal_set_guardian_radiance(bool value) {
  
  guardian_radiance_ = value;
}
inline void Trail_specialization_filter::set_guardian_radiance(bool value) {
  _internal_set_guardian_radiance(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.guardian_radiance)
}

// bool guardian_valor = 13;
inline void Trail_specialization_filter::clear_guardian_valor() {
  guardian_valor_ = false;
}
inline bool Trail_specialization_filter::_internal_guardian_valor() const {
  return guardian_valor_;
}
inline bool Trail_specialization_filter::guardian_valor() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.guardian_valor)
  return _internal_guardian_valor();
}
inline void Trail_specialization_filter::_internal_set_guardian_valor(bool value) {
  
  guardian_valor_ = value;
}
inline void Trail_specialization_filter::set_guardian_valor(bool value) {
  _internal_set_guardian_valor(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.guardian_valor)
}

// bool guardian_virtues = 46;
inline void Trail_specialization_filter::clear_guardian_virtues() {
  guardian_virtues_ = false;
}
inline bool Trail_specialization_filter::_internal_guardian_virtues() const {
  return guardian_virtues_;
}
inline bool Trail_specialization_filter::guardian_virtues() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.guardian_virtues)
  return _internal_guardian_virtues();
}
inline void Trail_specialization_filter::_internal_set_guardian_virtues(bool value) {
  
  guardian_virtues_ = value;
}
inline void Trail_specialization_filter::set_guardian_virtues(bool value) {
  _internal_set_guardian_virtues(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.guardian_virtues)
}

// bool guardian_zeal = 42;
inline void Trail_specialization_filter::clear_guardian_zeal() {
  guardian_zeal_ = false;
}
inline bool Trail_specialization_filter::_internal_guardian_zeal() const {
  return guardian_zeal_;
}
inline bool Trail_specialization_filter::guardian_zeal() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.guardian_zeal)
  return _internal_guardian_zeal();
}
inline void Trail_specialization_filter::_internal_set_guardian_zeal(bool value) {
  
  guardian_zeal_ = value;
}
inline void Trail_specialization_filter::set_guardian_zeal(bool value) {
  _internal_set_guardian_zeal(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.guardian_zeal)
}

// bool mesmer_chaos = 45;
inline void Trail_specialization_filter::clear_mesmer_chaos() {
  mesmer_chaos_ = false;
}
inline bool Trail_specialization_filter::_internal_mesmer_chaos() const {
  return mesmer_chaos_;
}
inline bool Trail_specialization_filter::mesmer_chaos() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.mesmer_chaos)
  return _internal_mesmer_chaos();
}
inline void Trail_specialization_filter::_internal_set_mesmer_chaos(bool value) {
  
  mesmer_chaos_ = value;
}
inline void Trail_specialization_filter::set_mesmer_chaos(bool value) {
  _internal_set_mesmer_chaos(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.mesmer_chaos)
}

// bool mesmer_domination = 10;
inline void Trail_specialization_filter::clear_mesmer_domination() {
  mesmer_domination_ = false;
}
inline bool Trail_specialization_filter::_internal_mesmer_domination() const {
  return mesmer_domination_;
}
inline bool Trail_specialization_filter::mesmer_domination() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.mesmer_domination)
  return _internal_mesmer_domination();
}
inline void Trail_specialization_filter::_internal_set_mesmer_domination(bool value) {
  
  mesmer_domination_ = value;
}
inline void Trail_specialization_filter::set_mesmer_domination(bool value) {
  _internal_set_mesmer_domination(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.mesmer_domination)
}

// bool mesmer_dueling = 1;
inline void Trail_specialization_filter::clear_mesmer_dueling() {
  mesmer_dueling_ = false;
}
inline bool Trail_specialization_filter::_internal_mesmer_dueling() const {
  return mesmer_dueling_;
}
inline bool Trail_specialization_filter::mesmer_dueling() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.mesmer_dueling)
  return _internal_mesmer_dueling();
}
inline void Trail_specialization_filter::_internal_set_mesmer_dueling(bool value) {
  
  mesmer_dueling_ = value;
}
inline void Trail_specialization_filter::set_mesmer_dueling(bool value) {
  _internal_set_mesmer_dueling(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.mesmer_dueling)
}

// bool mesmer_illusions = 24;
inline void Trail_specialization_filter::clear_mesmer_illusions() {
  mesmer_illusions_ = false;
}
inline bool Trail_specialization_filter::_internal_mesmer_illusions() const {
  return mesmer_illusions_;
}
inline bool Trail_specialization_filter::mesmer_illusions() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.mesmer_illusions)
  return _internal_mesmer_illusions();
}
inline void Trail_specialization_filter::_internal_set_mesmer_illusions(bool value) {
  
  mesmer_illusions_ = value;
}
inline void Trail_specialization_filter::set_mesmer_illusions(bool value) {
  _internal_set_mesmer_illusions(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.mesmer_illusions)
}

// bool mesmer_inspiration = 23;
inline void Trail_specialization_filter::clear_mesmer_inspiration() {
  mesmer_inspiration_ = false;
}
inline bool Trail_specialization_filter::_internal_mesmer_inspiration() const {
  return mesmer_inspiration_;
}
inline bool Trail_specialization_filter::mesmer_inspiration() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.mesmer_inspiration)
  return _internal_mesmer_inspiration();
}
inline void Trail_specialization_filter::_internal_set_mesmer_inspiration(bool value) {
  
  mesmer_inspiration_ = value;
}
inline void Trail_specialization_filter::set_mesmer_inspiration(bool value) {
  _internal_set_mesmer_inspiration(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.mesmer_inspiration)
}

// bool necromancer_blood_magic = 19;
inline void Trail_specialization_filter::clear_necromancer_blood_magic() {
  necromancer_blood_magic_ = false;
}
inline bool Trail_specialization_filter::_internal_necromancer_blood_magic() const {
  return necromancer_blood_magic_;
}
inline bool Trail_specialization_filter::necromancer_blood_magic() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.necromancer_blood_magic)
  return _internal_necromancer_blood_magic();
}
inline void Trail_specialization_filter::_internal_set_necromancer_blood_magic(bool value) {
  
  necromancer_blood_magic_ = value;
}
inline void Trail_specialization_filter::set_necromancer_blood_magic(bool value) {
  _internal_set_necromancer_blood_magic(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.necromancer_blood_magic)
}

// bool necromancer_curses = 39;
inline void Trail_specialization_filter::clear_necromancer_curses() {
  necromancer_curses_ = false;
}
inline bool Trail_specialization_filter::_internal_necromancer_curses() const {
  return necromancer_curses_;
}
inline bool Trail_specialization_filter::necromancer_curses() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.necromancer_curses)
  return _internal_necromancer_curses();
}
inline void Trail_specialization_filter::_internal_set_necromancer_curses(bool value) {
  
  necromancer_curses_ = value;
}
inline void Trail_specialization_filter::set_necromancer_curses(bool value) {
  _internal_set_necromancer_curses(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.necromancer_curses)
}

// bool necromancer_death_magic = 2;
inline void Trail_specialization_filter::clear_necromancer_death_magic() {
  necromancer_death_magic_ = false;
}
inline bool Trail_specialization_filter::_internal_necromancer_death_magic() const {
  return necromancer_death_magic_;
}
inline bool Trail_specialization_filter::necromancer_death_magic() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.necromancer_death_magic)
  return _internal_necromancer_death_magic();
}
inline void Trail_specialization_filter::_internal_set_necromancer_death_magic(bool value) {
  
  necromancer_death_magic_ = value;
}
inline void Trail_specialization_filter::set_necromancer_death_magic(bool value) {
  _internal_set_necromancer_death_magic(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.necromancer_death_magic)
}

// bool necromancer_soul_reaping = 50;
inline void Trail_specialization_filter::clear_necromancer_soul_reaping() {
  necromancer_soul_reaping_ = false;
}
inline bool Trail_specialization_filter::_internal_necromancer_soul_reaping() const {
  return necromancer_soul_reaping_;
}
inline bool Trail_specialization_filter::necromancer_soul_reaping() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.necromancer_soul_reaping)
  return _internal_necromancer_soul_reaping();
}
inline void Trail_specialization_filter::_internal_set_necromancer_soul_reaping(bool value) {
  
  necromancer_soul_reaping_ = value;
}
inline void Trail_specialization_filter::set_necromancer_soul_reaping(bool value) {
  _internal_set_necromancer_soul_reaping(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.necromancer_soul_reaping)
}

// bool necromancer_spite = 53;
inline void Trail_specialization_filter::clear_necromancer_spite() {
  necromancer_spite_ = false;
}
inline bool Trail_specialization_filter::_internal_necromancer_spite() const {
  return necromancer_spite_;
}
inline bool Trail_specialization_filter::necromancer_spite() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.necromancer_spite)
  return _internal_necromancer_spite();
}
inline void Trail_specialization_filter::_internal_set_necromancer_spite(bool value) {
  
  necromancer_spite_ = value;
}
inline void Trail_specialization_filter::set_necromancer_spite(bool value) {
  _internal_set_necromancer_spite(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.necromancer_spite)
}

// bool ranger_beastmastery = 32;
inline void Trail_specialization_filter::clear_ranger_beastmastery() {
  ranger_beastmastery_ = false;
}
inline bool Trail_specialization_filter::_internal_ranger_beastmastery() const {
  return ranger_beastmastery_;
}
inline bool Trail_specialization_filter::ranger_beastmastery() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.ranger_beastmastery)
  return _internal_ranger_beastmastery();
}
inline void Trail_specialization_filter::_internal_set_ranger_beastmastery(bool value) {
  
  ranger_beastmastery_ = value;
}
inline void Trail_specialization_filter::set_ranger_beastmastery(bool value) {
  _internal_set_ranger_beastmastery(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.ranger_beastmastery)
}

// bool ranger_marksmanship = 8;
inline void Trail_specialization_filter::clear_ranger_marksmanship() {
  ranger_marksmanship_ = false;
}
inline bool Trail_specialization_filter::_internal_ranger_marksmanship() const {
  return ranger_marksmanship_;
}
inline bool Trail_specialization_filter::ranger_marksmanship() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.ranger_marksmanship)
  return _internal_ranger_marksmanship();
}
inline void Trail_specialization_filter::_internal_set_ranger_marksmanship(bool value) {
  
  ranger_marksmanship_ = value;
}
inline void Trail_specialization_filter::set_ranger_marksmanship(bool value) {
  _internal_set_ranger_marksmanship(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.ranger_marksmanship)
}

// bool ranger_nature_magic = 25;
inline void Trail_specialization_filter::clear_ranger_nature_magic() {
  ranger_nature_magic_ = false;
}
inline bool Trail_specialization_filter::_internal_ranger_nature_magic() const {
  return ranger_nature_magic_;
}
inline bool Trail_specialization_filter::ranger_nature_magic() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.ranger_nature_magic)
  return _internal_ranger_nature_magic();
}
inline void Trail_specialization_filter::_internal_set_ranger_nature_magic(bool value) {
  
  ranger_nature_magic_ = value;
}
inline void Trail_specialization_filter::set_ranger_nature_magic(bool value) {
  _internal_set_ranger_nature_magic(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.ranger_nature_magic)
}

// bool ranger_skirmishing = 30;
inline void Trail_specialization_filter::clear_ranger_skirmishing() {
  ranger_skirmishing_ = false;
}
inline bool Trail_specialization_filter::_internal_ranger_skirmishing() const {
  return ranger_skirmishing_;
}
inline bool Trail_specialization_filter::ranger_skirmishing() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.ranger_skirmishing)
  return _internal_ranger_skirmishing();
}
inline void Trail_specialization_filter::_internal_set_ranger_skirmishing(bool value) {
  
  ranger_skirmishing_ = value;
}
inline void Trail_specialization_filter::set_ranger_skirmishing(bool value) {
  _internal_set_ranger_skirmishing(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.ranger_skirmishing)
}

// bool ranger_wilderness_survival = 33;
inline void Trail_specialization_filter::clear_ranger_wilderness_survival() {
  ranger_wilderness_survival_ = false;
}
inline bool Trail_specialization_filter::_internal_ranger_wilderness_survival() const {
  return ranger_wilderness_survival_;
}
inline bool Trail_specialization_filter::ranger_wilderness_survival() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.ranger_wilderness_survival)
  return _internal_ranger_wilderness_survival();
}
inline void Trail_specialization_filter::_internal_set_ranger_wilderness_survival(bool value) {
  
  ranger_wilderness_survival_ = value;
}
inline void Trail_specialization_filter::set_ranger_wilderness_survival(bool value) {
  _internal_set_ranger_wilderness_survival(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.ranger_wilderness_survival)
}

// bool revenant_corruption = 14;
inline void Trail_specialization_filter::clear_revenant_corruption() {
  revenant_corruption_ = false;
}
inline bool Trail_specialization_filter::_internal_revenant_corruption() const {
  return revenant_corruption_;
}
inline bool Trail_specialization_filter::revenant_corruption() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.revenant_corruption)
  return _internal_revenant_corruption();
}
inline void Trail_specialization_filter::_internal_set_revenant_corruption(bool value) {
  
  revenant_corruption_ = value;
}
inline void Trail_specialization_filter::set_revenant_corruption(bool value) {
  _internal_set_revenant_corruption(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.revenant_corruption)
}

// bool revenant_devastation = 15;
inline void Trail_specialization_filter::clear_revenant_devastation() {
  revenant_devastation_ = false;
}
inline bool Trail_specialization_filter::_internal_revenant_devastation() const {
  return revenant_devastation_;
}
inline bool Trail_specialization_filter::revenant_devastation() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.revenant_devastation)
  return _internal_revenant_devastation();
}
inline void Trail_specialization_filter::_internal_set_revenant_devastation(bool value) {
  
  revenant_devastation_ = value;
}
inline void Trail_specialization_filter::set_revenant_devastation(bool value) {
  _internal_set_revenant_devastation(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.revenant_devastation)
}

// bool revenant_invocation = 3;
inline void Trail_specialization_filter::clear_revenant_invocation() {
  revenant_invocation_ = false;
}
inline bool Trail_specialization_filter::_internal_revenant_invocation() const {
  return revenant_invocation_;
}
inline bool Trail_specialization_filter::revenant_invocation() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.revenant_invocation)
  return _internal_revenant_invocation();
}
inline void Trail_specialization_filter::_internal_set_revenant_invocation(bool value) {
  
  revenant_invocation_ = value;
}
inline void Trail_specialization_filter::set_revenant_invocation(bool value) {
  _internal_set_revenant_invocation(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.revenant_invocation)
}

// bool revenant_retribution = 9;
inline void Trail_specialization_filter::clear_revenant_retribution() {
  revenant_retribution_ = false;
}
inline bool Trail_specialization_filter::_internal_revenant_retribution() const {
  return revenant_retribution_;
}
inline bool Trail_specialization_filter::revenant_retribution() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.revenant_retribution)
  return _internal_revenant_retribution();
}
inline void Trail_specialization_filter::_internal_set_revenant_retribution(bool value) {
  
  revenant_retribution_ = value;
}
inline void Trail_specialization_filter::set_revenant_retribution(bool value) {
  _internal_set_revenant_retribution(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.revenant_retribution)
}

// bool revenant_salvation = 12;
inline void Trail_specialization_filter::clear_revenant_salvation() {
  revenant_salvation_ = false;
}
inline bool Trail_specialization_filter::_internal_revenant_salvation() const {
  return revenant_salvation_;
}
inline bool Trail_specialization_filter::revenant_salvation() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.revenant_salvation)
  return _internal_revenant_salvation();
}
inline void Trail_specialization_filter::_internal_set_revenant_salvation(bool value) {
  
  revenant_salvation_ = value;
}
inline void Trail_specialization_filter::set_revenant_salvation(bool value) {
  _internal_set_revenant_salvation(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.revenant_salvation)
}

// bool thief_acrobatics = 54;
inline void Trail_specialization_filter::clear_thief_acrobatics() {
  thief_acrobatics_ = false;
}
inline bool Trail_specialization_filter::_internal_thief_acrobatics() const {
  return thief_acrobatics_;
}
inline bool Trail_specialization_filter::thief_acrobatics() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.thief_acrobatics)
  return _internal_thief_acrobatics();
}
inline void Trail_specialization_filter::_internal_set_thief_acrobatics(bool value) {
  
  thief_acrobatics_ = value;
}
inline void Trail_specialization_filter::set_thief_acrobatics(bool value) {
  _internal_set_thief_acrobatics(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.thief_acrobatics)
}

// bool thief_critical_strikes = 35;
inline void Trail_specialization_filter::clear_thief_critical_strikes() {
  thief_critical_strikes_ = false;
}
inline bool Trail_specialization_filter::_internal_thief_critical_strikes() const {
  return thief_critical_strikes_;
}
inline bool Trail_specialization_filter::thief_critical_strikes() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.thief_critical_strikes)
  return _internal_thief_critical_strikes();
}
inline void Trail_specialization_filter::_internal_set_thief_critical_strikes(bool value) {
  
  thief_critical_strikes_ = value;
}
inline void Trail_specialization_filter::set_thief_critical_strikes(bool value) {
  _internal_set_thief_critical_strikes(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.thief_critical_strikes)
}

// bool thief_deadly_arts = 28;
inline void Trail_specialization_filter::clear_thief_deadly_arts() {
  thief_deadly_arts_ = false;
}
inline bool Trail_specialization_filter::_internal_thief_deadly_arts() const {
  return thief_deadly_arts_;
}
inline bool Trail_specialization_filter::thief_deadly_arts() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.thief_deadly_arts)
  return _internal_thief_deadly_arts();
}
inline void Trail_specialization_filter::_internal_set_thief_deadly_arts(bool value) {
  
  thief_deadly_arts_ = value;
}
inline void Trail_specialization_filter::set_thief_deadly_arts(bool value) {
  _internal_set_thief_deadly_arts(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.thief_deadly_arts)
}

// bool thief_shadow_arts = 20;
inline void Trail_specialization_filter::clear_thief_shadow_arts() {
  thief_shadow_arts_ = false;
}
inline bool Trail_specialization_filter::_internal_thief_shadow_arts() const {
  return thief_shadow_arts_;
}
inline bool Trail_specialization_filter::thief_shadow_arts() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.thief_shadow_arts)
  return _internal_thief_shadow_arts();
}
inline void Trail_specialization_filter::_internal_set_thief_shadow_arts(bool value) {
  
  thief_shadow_arts_ = value;
}
inline void Trail_specialization_filter::set_thief_shadow_arts(bool value) {
  _internal_set_thief_shadow_arts(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.thief_shadow_arts)
}

// bool thief_trickery = 44;
inline void Trail_specialization_filter::clear_thief_trickery() {
  thief_trickery_ = false;
}
inline bool Trail_specialization_filter::_internal_thief_trickery() const {
  return thief_trickery_;
}
inline bool Trail_specialization_filter::thief_trickery() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.thief_trickery)
  return _internal_thief_trickery();
}
inline void Trail_specialization_filter::_internal_set_thief_trickery(bool value) {
  
  thief_trickery_ = value;
}
inline void Trail_specialization_filter::set_thief_trickery(bool value) {
  _internal_set_thief_trickery(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.thief_trickery)
}

// bool warrior_arms = 36;
inline void Trail_specialization_filter::clear_warrior_arms() {
  warrior_arms_ = false;
}
inline bool Trail_specialization_filter::_internal_warrior_arms() const {
  return warrior_arms_;
}
inline bool Trail_specialization_filter::warrior_arms() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.warrior_arms)
  return _internal_warrior_arms();
}
inline void Trail_specialization_filter::_internal_set_warrior_arms(bool value) {
  
  warrior_arms_ = value;
}
inline void Trail_specialization_filter::set_warrior_arms(bool value) {
  _internal_set_warrior_arms(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.warrior_arms)
}

// bool warrior_defense = 22;
inline void Trail_specialization_filter::clear_warrior_defense() {
  warrior_defense_ = false;
}
inline bool Trail_specialization_filter::_internal_warrior_defense() const {
  return warrior_defense_;
}
inline bool Trail_specialization_filter::warrior_defense() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.warrior_defense)
  return _internal_warrior_defense();
}
inline void Trail_specialization_filter::_internal_set_warrior_defense(bool value) {
  
  warrior_defense_ = value;
}
inline void Trail_specialization_filter::set_warrior_defense(bool value) {
  _internal_set_warrior_defense(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.warrior_defense)
}

// bool warrior_discipline = 51;
inline void Trail_specialization_filter::clear_warrior_discipline() {
  warrior_discipline_ = false;
}
inline bool Trail_specialization_filter::_internal_warrior_discipline() const {
  return warrior_discipline_;
}
inline bool Trail_specialization_filter::warrior_discipline() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.warrior_discipline)
  return _internal_warrior_discipline();
}
inline void Trail_specialization_filter::_internal_set_warrior_discipline(bool value) {
  
  warrior_discipline_ = value;
}
inline void Trail_specialization_filter::set_warrior_discipline(bool value) {
  _internal_set_warrior_discipline(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.warrior_discipline)
}

// bool warrior_strength = 4;
inline void Trail_specialization_filter::clear_warrior_strength() {
  warrior_strength_ = false;
}
inline bool Trail_specialization_filter::_internal_warrior_strength() const {
  return warrior_strength_;
}
inline bool Trail_specialization_filter::warrior_strength() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.warrior_strength)
  return _internal_warrior_strength();
}
inline void Trail_specialization_filter::_internal_set_warrior_strength(bool value) {
  
  warrior_strength_ = value;
}
inline void Trail_specialization_filter::set_warrior_strength(bool value) {
  _internal_set_warrior_strength(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.warrior_strength)
}

// bool warrior_tactics = 11;
inline void Trail_specialization_filter::clear_warrior_tactics() {
  warrior_tactics_ = false;
}
inline bool Trail_specialization_filter::_internal_warrior_tactics() const {
  return warrior_tactics_;
}
inline bool Trail_specialization_filter::warrior_tactics() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.specialization_filter.warrior_tactics)
  return _internal_warrior_tactics();
}
inline void Trail_specialization_filter::_internal_set_warrior_tactics(bool value) {
  
  warrior_tactics_ = value;
}
inline void Trail_specialization_filter::set_warrior_tactics(bool value) {
  _internal_set_warrior_tactics(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.specialization_filter.warrior_tactics)
}

// -------------------------------------------------------------------

// Trail_species_filter

// bool asura = 1;
inline void Trail_species_filter::clear_asura() {
  asura_ = false;
}
inline bool Trail_species_filter::_internal_asura() const {
  return asura_;
}
inline bool Trail_species_filter::asura() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.species_filter.asura)
  return _internal_asura();
}
inline void Trail_species_filter::_internal_set_asura(bool value) {
  
  asura_ = value;
}
inline void Trail_species_filter::set_asura(bool value) {
  _internal_set_asura(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.species_filter.asura)
}

// bool charr = 2;
inline void Trail_species_filter::clear_charr() {
  charr_ = false;
}
inline bool Trail_species_filter::_internal_charr() const {
  return charr_;
}
inline bool Trail_species_filter::charr() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.species_filter.charr)
  return _internal_charr();
}
inline void Trail_species_filter::_internal_set_charr(bool value) {
  
  charr_ = value;
}
inline void Trail_species_filter::set_charr(bool value) {
  _internal_set_charr(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.species_filter.charr)
}

// bool human = 3;
inline void Trail_species_filter::clear_human() {
  human_ = false;
}
inline bool Trail_species_filter::_internal_human() const {
  return human_;
}
inline bool Trail_species_filter::human() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.species_filter.human)
  return _internal_human();
}
inline void Trail_species_filter::_internal_set_human(bool value) {
  
  human_ = value;
}
inline void Trail_species_filter::set_human(bool value) {
  _internal_set_human(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.species_filter.human)
}

// bool norn = 4;
inline void Trail_species_filter::clear_norn() {
  norn_ = false;
}
inline bool Trail_species_filter::_internal_norn() const {
  return norn_;
}
inline bool Trail_species_filter::norn() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.species_filter.norn)
  return _internal_norn();
}
inline void Trail_species_filter::_internal_set_norn(bool value) {
  
  norn_ = value;
}
inline void Trail_species_filter::set_norn(bool value) {
  _internal_set_norn(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.species_filter.norn)
}

// bool sylvari = 5;
inline void Trail_species_filter::clear_sylvari() {
  sylvari_ = false;
}
inline bool Trail_species_filter::_internal_sylvari() const {
  return sylvari_;
}
inline bool Trail_species_filter::sylvari() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.species_filter.sylvari)
  return _internal_sylvari();
}
inline void Trail_species_filter::_internal_set_sylvari(bool value) {
  
  sylvari_ = value;
}
inline void Trail_species_filter::set_sylvari(bool value) {
  _internal_set_sylvari(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.species_filter.sylvari)
}

// -------------------------------------------------------------------

// Trail_texture

// string path = 1;
inline void Trail_texture::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trail_texture::path() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.texture.path)
  return _internal_path();
}
inline void Trail_texture::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.texture.path)
}
inline std::string* Trail_texture::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Trail.texture.path)
  return _internal_mutable_path();
}
inline const std::string& Trail_texture::_internal_path() const {
  return path_.Get();
}
inline void Trail_texture::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trail_texture::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Trail.texture.path)
}
inline void Trail_texture::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Trail.texture.path)
}
inline void Trail_texture::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Trail.texture.path)
}
inline std::string* Trail_texture::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trail_texture::release_path() {
  // @@protoc_insertion_point(field_release:Proto_Node.Trail.texture.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trail_texture::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Trail.texture.path)
}
inline std::string* Trail_texture::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Trail.texture.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trail_texture::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Trail.texture.path)
}

// .google.protobuf.Any original_token = 2;
inline bool Trail_texture::_internal_has_original_token() const {
  return this != internal_default_instance() && original_token_ != nullptr;
}
inline bool Trail_texture::has_original_token() const {
  return _internal_has_original_token();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Trail_texture::_internal_original_token() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = original_token_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Trail_texture::original_token() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.texture.original_token)
  return _internal_original_token();
}
inline void Trail_texture::unsafe_arena_set_allocated_original_token(
    PROTOBUF_NAMESPACE_ID::Any* original_token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_token_);
  }
  original_token_ = original_token;
  if (original_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Trail.texture.original_token)
}
inline PROTOBUF_NAMESPACE_ID::Any* Trail_texture::release_original_token() {
  auto temp = unsafe_arena_release_original_token();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Trail_texture::unsafe_arena_release_original_token() {
  // @@protoc_insertion_point(field_release:Proto_Node.Trail.texture.original_token)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = original_token_;
  original_token_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Trail_texture::_internal_mutable_original_token() {
  
  if (original_token_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    original_token_ = p;
  }
  return original_token_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Trail_texture::mutable_original_token() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Trail.texture.original_token)
  return _internal_mutable_original_token();
}
inline void Trail_texture::set_allocated_original_token(PROTOBUF_NAMESPACE_ID::Any* original_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_token_);
  }
  if (original_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_token)->GetArena();
    if (message_arena != submessage_arena) {
      original_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_token, submessage_arena);
    }
    
  } else {
    
  }
  original_token_ = original_token;
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Trail.texture.original_token)
}

// -------------------------------------------------------------------

// Trail_trail_data

// string trail_data = 1;
inline void Trail_trail_data::clear_trail_data() {
  trail_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trail_trail_data::trail_data() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.trail_data.trail_data)
  return _internal_trail_data();
}
inline void Trail_trail_data::set_trail_data(const std::string& value) {
  _internal_set_trail_data(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.trail_data.trail_data)
}
inline std::string* Trail_trail_data::mutable_trail_data() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Trail.trail_data.trail_data)
  return _internal_mutable_trail_data();
}
inline const std::string& Trail_trail_data::_internal_trail_data() const {
  return trail_data_.Get();
}
inline void Trail_trail_data::_internal_set_trail_data(const std::string& value) {
  
  trail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trail_trail_data::set_trail_data(std::string&& value) {
  
  trail_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Trail.trail_data.trail_data)
}
inline void Trail_trail_data::set_trail_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Trail.trail_data.trail_data)
}
inline void Trail_trail_data::set_trail_data(const char* value,
    size_t size) {
  
  trail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Trail.trail_data.trail_data)
}
inline std::string* Trail_trail_data::_internal_mutable_trail_data() {
  
  return trail_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trail_trail_data::release_trail_data() {
  // @@protoc_insertion_point(field_release:Proto_Node.Trail.trail_data.trail_data)
  return trail_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trail_trail_data::set_allocated_trail_data(std::string* trail_data) {
  if (trail_data != nullptr) {
    
  } else {
    
  }
  trail_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trail_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Trail.trail_data.trail_data)
}
inline std::string* Trail_trail_data::unsafe_arena_release_trail_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Trail.trail_data.trail_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trail_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trail_trail_data::unsafe_arena_set_allocated_trail_data(
    std::string* trail_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trail_data != nullptr) {
    
  } else {
    
  }
  trail_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trail_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Trail.trail_data.trail_data)
}

// -------------------------------------------------------------------

// Trail

// fixed32 achievement_bit = 1;
inline void Trail::clear_achievement_bit() {
  achievement_bit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trail::_internal_achievement_bit() const {
  return achievement_bit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trail::achievement_bit() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.achievement_bit)
  return _internal_achievement_bit();
}
inline void Trail::_internal_set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  achievement_bit_ = value;
}
inline void Trail::set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_achievement_bit(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.achievement_bit)
}

// int32 achievement_id = 2;
inline void Trail::clear_achievement_id() {
  achievement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail::_internal_achievement_id() const {
  return achievement_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail::achievement_id() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.achievement_id)
  return _internal_achievement_id();
}
inline void Trail::_internal_set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  achievement_id_ = value;
}
inline void Trail::set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_achievement_id(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.achievement_id)
}

// float alpha = 3;
inline void Trail::clear_alpha() {
  alpha_ = 0;
}
inline float Trail::_internal_alpha() const {
  return alpha_;
}
inline float Trail::alpha() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.alpha)
  return _internal_alpha();
}
inline void Trail::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void Trail::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.alpha)
}

// float animation_speed = 4;
inline void Trail::clear_animation_speed() {
  animation_speed_ = 0;
}
inline float Trail::_internal_animation_speed() const {
  return animation_speed_;
}
inline float Trail::animation_speed() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.animation_speed)
  return _internal_animation_speed();
}
inline void Trail::_internal_set_animation_speed(float value) {
  
  animation_speed_ = value;
}
inline void Trail::set_animation_speed(float value) {
  _internal_set_animation_speed(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.animation_speed)
}

// bool can_fade = 5;
inline void Trail::clear_can_fade() {
  can_fade_ = false;
}
inline bool Trail::_internal_can_fade() const {
  return can_fade_;
}
inline bool Trail::can_fade() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.can_fade)
  return _internal_can_fade();
}
inline void Trail::_internal_set_can_fade(bool value) {
  
  can_fade_ = value;
}
inline void Trail::set_can_fade(bool value) {
  _internal_set_can_fade(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.can_fade)
}

// float distance_fade_end = 6;
inline void Trail::clear_distance_fade_end() {
  distance_fade_end_ = 0;
}
inline float Trail::_internal_distance_fade_end() const {
  return distance_fade_end_;
}
inline float Trail::distance_fade_end() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.distance_fade_end)
  return _internal_distance_fade_end();
}
inline void Trail::_internal_set_distance_fade_end(float value) {
  
  distance_fade_end_ = value;
}
inline void Trail::set_distance_fade_end(float value) {
  _internal_set_distance_fade_end(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.distance_fade_end)
}

// float distance_fade_start = 7;
inline void Trail::clear_distance_fade_start() {
  distance_fade_start_ = 0;
}
inline float Trail::_internal_distance_fade_start() const {
  return distance_fade_start_;
}
inline float Trail::distance_fade_start() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.distance_fade_start)
  return _internal_distance_fade_start();
}
inline void Trail::_internal_set_distance_fade_start(float value) {
  
  distance_fade_start_ = value;
}
inline void Trail::set_distance_fade_start(float value) {
  _internal_set_distance_fade_start(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.distance_fade_start)
}

// bool is_wall = 8;
inline void Trail::clear_is_wall() {
  is_wall_ = false;
}
inline bool Trail::_internal_is_wall() const {
  return is_wall_;
}
inline bool Trail::is_wall() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.is_wall)
  return _internal_is_wall();
}
inline void Trail::_internal_set_is_wall(bool value) {
  
  is_wall_ = value;
}
inline void Trail::set_is_wall(bool value) {
  _internal_set_is_wall(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.is_wall)
}

// string bhdraft__schedule = 9;
inline void Trail::clear_bhdraft__schedule() {
  bhdraft__schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trail::bhdraft__schedule() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.bhdraft__schedule)
  return _internal_bhdraft__schedule();
}
inline void Trail::set_bhdraft__schedule(const std::string& value) {
  _internal_set_bhdraft__schedule(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.bhdraft__schedule)
}
inline std::string* Trail::mutable_bhdraft__schedule() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Trail.bhdraft__schedule)
  return _internal_mutable_bhdraft__schedule();
}
inline const std::string& Trail::_internal_bhdraft__schedule() const {
  return bhdraft__schedule_.Get();
}
inline void Trail::_internal_set_bhdraft__schedule(const std::string& value) {
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trail::set_bhdraft__schedule(std::string&& value) {
  
  bhdraft__schedule_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto_Node.Trail.bhdraft__schedule)
}
inline void Trail::set_bhdraft__schedule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto_Node.Trail.bhdraft__schedule)
}
inline void Trail::set_bhdraft__schedule(const char* value,
    size_t size) {
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto_Node.Trail.bhdraft__schedule)
}
inline std::string* Trail::_internal_mutable_bhdraft__schedule() {
  
  return bhdraft__schedule_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trail::release_bhdraft__schedule() {
  // @@protoc_insertion_point(field_release:Proto_Node.Trail.bhdraft__schedule)
  return bhdraft__schedule_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trail::set_allocated_bhdraft__schedule(std::string* bhdraft__schedule) {
  if (bhdraft__schedule != nullptr) {
    
  } else {
    
  }
  bhdraft__schedule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bhdraft__schedule,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Trail.bhdraft__schedule)
}
inline std::string* Trail::unsafe_arena_release_bhdraft__schedule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Proto_Node.Trail.bhdraft__schedule)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bhdraft__schedule_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trail::unsafe_arena_set_allocated_bhdraft__schedule(
    std::string* bhdraft__schedule) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bhdraft__schedule != nullptr) {
    
  } else {
    
  }
  bhdraft__schedule_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bhdraft__schedule, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Trail.bhdraft__schedule)
}

// float bhdraft__schedule_duration = 10;
inline void Trail::clear_bhdraft__schedule_duration() {
  bhdraft__schedule_duration_ = 0;
}
inline float Trail::_internal_bhdraft__schedule_duration() const {
  return bhdraft__schedule_duration_;
}
inline float Trail::bhdraft__schedule_duration() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.bhdraft__schedule_duration)
  return _internal_bhdraft__schedule_duration();
}
inline void Trail::_internal_set_bhdraft__schedule_duration(float value) {
  
  bhdraft__schedule_duration_ = value;
}
inline void Trail::set_bhdraft__schedule_duration(float value) {
  _internal_set_bhdraft__schedule_duration(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.bhdraft__schedule_duration)
}

// float scale = 11;
inline void Trail::clear_scale() {
  scale_ = 0;
}
inline float Trail::_internal_scale() const {
  return scale_;
}
inline float Trail::scale() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.scale)
  return _internal_scale();
}
inline void Trail::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void Trail::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.scale)
}

// .Proto_Node.Category category = 12;
inline bool Trail::_internal_has_category() const {
  return this != internal_default_instance() && category_ != nullptr;
}
inline bool Trail::has_category() const {
  return _internal_has_category();
}
inline void Trail::clear_category() {
  if (GetArena() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
}
inline const ::Proto_Node::Category& Trail::_internal_category() const {
  const ::Proto_Node::Category* p = category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto_Node::Category*>(
      &::Proto_Node::_Category_default_instance_);
}
inline const ::Proto_Node::Category& Trail::category() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.category)
  return _internal_category();
}
inline void Trail::unsafe_arena_set_allocated_category(
    ::Proto_Node::Category* category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_);
  }
  category_ = category;
  if (category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto_Node.Trail.category)
}
inline ::Proto_Node::Category* Trail::release_category() {
  auto temp = unsafe_arena_release_category();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Proto_Node::Category* Trail::unsafe_arena_release_category() {
  // @@protoc_insertion_point(field_release:Proto_Node.Trail.category)
  
  ::Proto_Node::Category* temp = category_;
  category_ = nullptr;
  return temp;
}
inline ::Proto_Node::Category* Trail::_internal_mutable_category() {
  
  if (category_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto_Node::Category>(GetArena());
    category_ = p;
  }
  return category_;
}
inline ::Proto_Node::Category* Trail::mutable_category() {
  // @@protoc_insertion_point(field_mutable:Proto_Node.Trail.category)
  return _internal_mutable_category();
}
inline void Trail::set_allocated_category(::Proto_Node::Category* category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete category_;
  }
  if (category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(category);
    if (message_arena != submessage_arena) {
      category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    
  } else {
    
  }
  category_ = category;
  // @@protoc_insertion_point(field_set_allocated:Proto_Node.Trail.category)
}

// int32 map_id = 13;
inline void Trail::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail::map_id() const {
  // @@protoc_insertion_point(field_get:Proto_Node.Trail.map_id)
  return _internal_map_id();
}
inline void Trail::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void Trail::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:Proto_Node.Trail.map_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto_Node

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto_Node::Icon_trigger_reset_behavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto_Node::Icon_trigger_reset_behavior>() {
  return ::Proto_Node::Icon_trigger_reset_behavior_descriptor();
}
template <> struct is_proto_enum< ::Proto_Node::Trail_cull_chirality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto_Node::Trail_cull_chirality>() {
  return ::Proto_Node::Trail_cull_chirality_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2eproto
