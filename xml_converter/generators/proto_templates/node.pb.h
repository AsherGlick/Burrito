// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generators/proto_templates/node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_generators_2fproto_5ftemplates_2fnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_generators_2fproto_5ftemplates_2fnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto;
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class Category_ChildrenEntry_DoNotUse;
class Category_ChildrenEntry_DoNotUseDefaultTypeInternal;
extern Category_ChildrenEntry_DoNotUseDefaultTypeInternal _Category_ChildrenEntry_DoNotUse_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class EulerRotation;
class EulerRotationDefaultTypeInternal;
extern EulerRotationDefaultTypeInternal _EulerRotation_default_instance_;
class FestivalFilter;
class FestivalFilterDefaultTypeInternal;
extern FestivalFilterDefaultTypeInternal _FestivalFilter_default_instance_;
class GUID;
class GUIDDefaultTypeInternal;
extern GUIDDefaultTypeInternal _GUID_default_instance_;
class Icon;
class IconDefaultTypeInternal;
extern IconDefaultTypeInternal _Icon_default_instance_;
class MapTypeFilter;
class MapTypeFilterDefaultTypeInternal;
extern MapTypeFilterDefaultTypeInternal _MapTypeFilter_default_instance_;
class MountFilter;
class MountFilterDefaultTypeInternal;
extern MountFilterDefaultTypeInternal _MountFilter_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class ProfessionFilter;
class ProfessionFilterDefaultTypeInternal;
extern ProfessionFilterDefaultTypeInternal _ProfessionFilter_default_instance_;
class SpecializationFilter;
class SpecializationFilterDefaultTypeInternal;
extern SpecializationFilterDefaultTypeInternal _SpecializationFilter_default_instance_;
class SpeciesFilter;
class SpeciesFilterDefaultTypeInternal;
extern SpeciesFilterDefaultTypeInternal _SpeciesFilter_default_instance_;
class Texture;
class TextureDefaultTypeInternal;
extern TextureDefaultTypeInternal _Texture_default_instance_;
class Trail;
class TrailDefaultTypeInternal;
extern TrailDefaultTypeInternal _Trail_default_instance_;
class TrailData;
class TrailDataDefaultTypeInternal;
extern TrailDataDefaultTypeInternal _TrailData_default_instance_;
class Trigger;
class TriggerDefaultTypeInternal;
extern TriggerDefaultTypeInternal _Trigger_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Category* Arena::CreateMaybeMessage<::Category>(Arena*);
template<> ::Category_ChildrenEntry_DoNotUse* Arena::CreateMaybeMessage<::Category_ChildrenEntry_DoNotUse>(Arena*);
template<> ::Color* Arena::CreateMaybeMessage<::Color>(Arena*);
template<> ::EulerRotation* Arena::CreateMaybeMessage<::EulerRotation>(Arena*);
template<> ::FestivalFilter* Arena::CreateMaybeMessage<::FestivalFilter>(Arena*);
template<> ::GUID* Arena::CreateMaybeMessage<::GUID>(Arena*);
template<> ::Icon* Arena::CreateMaybeMessage<::Icon>(Arena*);
template<> ::MapTypeFilter* Arena::CreateMaybeMessage<::MapTypeFilter>(Arena*);
template<> ::MountFilter* Arena::CreateMaybeMessage<::MountFilter>(Arena*);
template<> ::Position* Arena::CreateMaybeMessage<::Position>(Arena*);
template<> ::ProfessionFilter* Arena::CreateMaybeMessage<::ProfessionFilter>(Arena*);
template<> ::SpecializationFilter* Arena::CreateMaybeMessage<::SpecializationFilter>(Arena*);
template<> ::SpeciesFilter* Arena::CreateMaybeMessage<::SpeciesFilter>(Arena*);
template<> ::Texture* Arena::CreateMaybeMessage<::Texture>(Arena*);
template<> ::Trail* Arena::CreateMaybeMessage<::Trail>(Arena*);
template<> ::TrailData* Arena::CreateMaybeMessage<::TrailData>(Arena*);
template<> ::Trigger* Arena::CreateMaybeMessage<::Trigger>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CullChirality : int {
  none = 0,
  clockwise = 1,
  counter_clockwise = 2,
  CullChirality_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CullChirality_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CullChirality_IsValid(int value);
constexpr CullChirality CullChirality_MIN = none;
constexpr CullChirality CullChirality_MAX = counter_clockwise;
constexpr int CullChirality_ARRAYSIZE = CullChirality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CullChirality_descriptor();
template<typename T>
inline const std::string& CullChirality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CullChirality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CullChirality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CullChirality_descriptor(), enum_t_value);
}
inline bool CullChirality_Parse(
    const std::string& name, CullChirality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CullChirality>(
    CullChirality_descriptor(), name, value);
}
enum ResetBehavior : int {
  always_visible = 0,
  map_change = 1,
  daily_reset = 2,
  never = 3,
  timer = 4,
  map_reset = 5,
  instance_change = 6,
  daily_reset_per_character = 7,
  weekly_reset = 8,
  ResetBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResetBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResetBehavior_IsValid(int value);
constexpr ResetBehavior ResetBehavior_MIN = always_visible;
constexpr ResetBehavior ResetBehavior_MAX = weekly_reset;
constexpr int ResetBehavior_ARRAYSIZE = ResetBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResetBehavior_descriptor();
template<typename T>
inline const std::string& ResetBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResetBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResetBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResetBehavior_descriptor(), enum_t_value);
}
inline bool ResetBehavior_Parse(
    const std::string& name, ResetBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResetBehavior>(
    ResetBehavior_descriptor(), name, value);
}
// ===================================================================

class Category_ChildrenEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Category_ChildrenEntry_DoNotUse, 
    std::string, ::Category,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Category_ChildrenEntry_DoNotUse, 
    std::string, ::Category,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Category_ChildrenEntry_DoNotUse();
  Category_ChildrenEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Category_ChildrenEntry_DoNotUse& other);
  static const Category_ChildrenEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Category_ChildrenEntry_DoNotUse*>(&_Category_ChildrenEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Category.ChildrenEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Category PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Category) */ {
 public:
  inline Category() : Category(nullptr) {};
  virtual ~Category();

  Category(const Category& from);
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  inline Category& operator=(Category&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }
  inline void Swap(Category* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Category* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const final {
    return CreateMaybeMessage<Category>(nullptr);
  }

  Category* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Category>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Category* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Category";
  }
  protected:
  explicit Category(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 6,
    kDisplayNameFieldNumber = 2,
    kNameFieldNumber = 4,
    kTooltipNameFieldNumber = 5,
    kDefaultVisibilityFieldNumber = 1,
    kIsSeparatorFieldNumber = 3,
  };
  // map<string, .Category> children = 6;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >&
      _internal_children() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >*
      _internal_mutable_children();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >*
      mutable_children();

  // string display_name = 2;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_display_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_display_name(
      std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string tooltip_name = 5;
  void clear_tooltip_name();
  const std::string& tooltip_name() const;
  void set_tooltip_name(const std::string& value);
  void set_tooltip_name(std::string&& value);
  void set_tooltip_name(const char* value);
  void set_tooltip_name(const char* value, size_t size);
  std::string* mutable_tooltip_name();
  std::string* release_tooltip_name();
  void set_allocated_tooltip_name(std::string* tooltip_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tooltip_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tooltip_name(
      std::string* tooltip_name);
  private:
  const std::string& _internal_tooltip_name() const;
  void _internal_set_tooltip_name(const std::string& value);
  std::string* _internal_mutable_tooltip_name();
  public:

  // bool default_visibility = 1;
  void clear_default_visibility();
  bool default_visibility() const;
  void set_default_visibility(bool value);
  private:
  bool _internal_default_visibility() const;
  void _internal_set_default_visibility(bool value);
  public:

  // bool is_separator = 3;
  void clear_is_separator();
  bool is_separator() const;
  void set_is_separator(bool value);
  private:
  bool _internal_is_separator() const;
  void _internal_set_is_separator(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Category)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Category_ChildrenEntry_DoNotUse,
      std::string, ::Category,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tooltip_name_;
  bool default_visibility_;
  bool is_separator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class Icon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Icon) */ {
 public:
  inline Icon() : Icon(nullptr) {};
  virtual ~Icon();

  Icon(const Icon& from);
  Icon(Icon&& from) noexcept
    : Icon() {
    *this = ::std::move(from);
  }

  inline Icon& operator=(const Icon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Icon& operator=(Icon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Icon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Icon* internal_default_instance() {
    return reinterpret_cast<const Icon*>(
               &_Icon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Icon& a, Icon& b) {
    a.Swap(&b);
  }
  inline void Swap(Icon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Icon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Icon* New() const final {
    return CreateMaybeMessage<Icon>(nullptr);
  }

  Icon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Icon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Icon& from);
  void MergeFrom(const Icon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Icon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Icon";
  }
  protected:
  explicit Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipDescriptionFieldNumber = 24,
    kTipNameFieldNumber = 25,
    kBhdraftScheduleFieldNumber = 2052,
    kCategoryFieldNumber = 1,
    kTextureFieldNumber = 2,
    kGuidFieldNumber = 3,
    kPositionFieldNumber = 8,
    kTriggerFieldNumber = 10,
    kMapIdFieldNumber = 4,
    kDistanceFadeEndFieldNumber = 5,
    kDistanceFadeStartFieldNumber = 6,
    kHeightOffsetFieldNumber = 7,
    kResetBehaviorFieldNumber = 9,
    kAchievementBitFieldNumber = 16,
    kAchievementIdFieldNumber = 17,
    kAlphaFieldNumber = 18,
    kMinimumSizeOnScreenFieldNumber = 20,
    kMapDisplaySizeFieldNumber = 21,
    kBhdraftScheduleDurationFieldNumber = 2053,
    kMaximumSizeOnScreenFieldNumber = 22,
    kCanFadeFieldNumber = 19,
    kScaleOnMapWithZoomFieldNumber = 23,
    kTentativeRenderIngameFieldNumber = 2049,
    kTentativeRenderOnMapFieldNumber = 2050,
    kTentativeScaleFieldNumber = 2048,
    kTentativeRenderOnMinimapFieldNumber = 2051,
  };
  // string tip_description = 24;
  void clear_tip_description();
  const std::string& tip_description() const;
  void set_tip_description(const std::string& value);
  void set_tip_description(std::string&& value);
  void set_tip_description(const char* value);
  void set_tip_description(const char* value, size_t size);
  std::string* mutable_tip_description();
  std::string* release_tip_description();
  void set_allocated_tip_description(std::string* tip_description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tip_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tip_description(
      std::string* tip_description);
  private:
  const std::string& _internal_tip_description() const;
  void _internal_set_tip_description(const std::string& value);
  std::string* _internal_mutable_tip_description();
  public:

  // string tip_name = 25;
  void clear_tip_name();
  const std::string& tip_name() const;
  void set_tip_name(const std::string& value);
  void set_tip_name(std::string&& value);
  void set_tip_name(const char* value);
  void set_tip_name(const char* value, size_t size);
  std::string* mutable_tip_name();
  std::string* release_tip_name();
  void set_allocated_tip_name(std::string* tip_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tip_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tip_name(
      std::string* tip_name);
  private:
  const std::string& _internal_tip_name() const;
  void _internal_set_tip_name(const std::string& value);
  std::string* _internal_mutable_tip_name();
  public:

  // string bhdraft__schedule = 2052;
  void clear_bhdraft__schedule();
  const std::string& bhdraft__schedule() const;
  void set_bhdraft__schedule(const std::string& value);
  void set_bhdraft__schedule(std::string&& value);
  void set_bhdraft__schedule(const char* value);
  void set_bhdraft__schedule(const char* value, size_t size);
  std::string* mutable_bhdraft__schedule();
  std::string* release_bhdraft__schedule();
  void set_allocated_bhdraft__schedule(std::string* bhdraft__schedule);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bhdraft__schedule();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bhdraft__schedule(
      std::string* bhdraft__schedule);
  private:
  const std::string& _internal_bhdraft__schedule() const;
  void _internal_set_bhdraft__schedule(const std::string& value);
  std::string* _internal_mutable_bhdraft__schedule();
  public:

  // .Category category = 1;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const ::Category& category() const;
  ::Category* release_category();
  ::Category* mutable_category();
  void set_allocated_category(::Category* category);
  private:
  const ::Category& _internal_category() const;
  ::Category* _internal_mutable_category();
  public:
  void unsafe_arena_set_allocated_category(
      ::Category* category);
  ::Category* unsafe_arena_release_category();

  // .Texture texture = 2;
  bool has_texture() const;
  private:
  bool _internal_has_texture() const;
  public:
  void clear_texture();
  const ::Texture& texture() const;
  ::Texture* release_texture();
  ::Texture* mutable_texture();
  void set_allocated_texture(::Texture* texture);
  private:
  const ::Texture& _internal_texture() const;
  ::Texture* _internal_mutable_texture();
  public:
  void unsafe_arena_set_allocated_texture(
      ::Texture* texture);
  ::Texture* unsafe_arena_release_texture();

  // .GUID guid = 3;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const ::GUID& guid() const;
  ::GUID* release_guid();
  ::GUID* mutable_guid();
  void set_allocated_guid(::GUID* guid);
  private:
  const ::GUID& _internal_guid() const;
  ::GUID* _internal_mutable_guid();
  public:
  void unsafe_arena_set_allocated_guid(
      ::GUID* guid);
  ::GUID* unsafe_arena_release_guid();

  // .Position position = 8;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Position& position() const;
  ::Position* release_position();
  ::Position* mutable_position();
  void set_allocated_position(::Position* position);
  private:
  const ::Position& _internal_position() const;
  ::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Position* position);
  ::Position* unsafe_arena_release_position();

  // .Trigger trigger = 10;
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;
  public:
  void clear_trigger();
  const ::Trigger& trigger() const;
  ::Trigger* release_trigger();
  ::Trigger* mutable_trigger();
  void set_allocated_trigger(::Trigger* trigger);
  private:
  const ::Trigger& _internal_trigger() const;
  ::Trigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::Trigger* trigger);
  ::Trigger* unsafe_arena_release_trigger();

  // int32 map_id = 4;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float distance_fade_end = 5;
  void clear_distance_fade_end();
  float distance_fade_end() const;
  void set_distance_fade_end(float value);
  private:
  float _internal_distance_fade_end() const;
  void _internal_set_distance_fade_end(float value);
  public:

  // float distance_fade_start = 6;
  void clear_distance_fade_start();
  float distance_fade_start() const;
  void set_distance_fade_start(float value);
  private:
  float _internal_distance_fade_start() const;
  void _internal_set_distance_fade_start(float value);
  public:

  // float height_offset = 7;
  void clear_height_offset();
  float height_offset() const;
  void set_height_offset(float value);
  private:
  float _internal_height_offset() const;
  void _internal_set_height_offset(float value);
  public:

  // .ResetBehavior reset_behavior = 9;
  void clear_reset_behavior();
  ::ResetBehavior reset_behavior() const;
  void set_reset_behavior(::ResetBehavior value);
  private:
  ::ResetBehavior _internal_reset_behavior() const;
  void _internal_set_reset_behavior(::ResetBehavior value);
  public:

  // fixed32 achievement_bit = 16;
  void clear_achievement_bit();
  ::PROTOBUF_NAMESPACE_ID::uint32 achievement_bit() const;
  void set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_achievement_bit() const;
  void _internal_set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 achievement_id = 17;
  void clear_achievement_id();
  ::PROTOBUF_NAMESPACE_ID::int32 achievement_id() const;
  void set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_achievement_id() const;
  void _internal_set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha = 18;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // int32 minimum_size_on_screen = 20;
  void clear_minimum_size_on_screen();
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_size_on_screen() const;
  void set_minimum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minimum_size_on_screen() const;
  void _internal_set_minimum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_display_size = 21;
  void clear_map_display_size();
  ::PROTOBUF_NAMESPACE_ID::int32 map_display_size() const;
  void set_map_display_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_display_size() const;
  void _internal_set_map_display_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float bhdraft__schedule_duration = 2053;
  void clear_bhdraft__schedule_duration();
  float bhdraft__schedule_duration() const;
  void set_bhdraft__schedule_duration(float value);
  private:
  float _internal_bhdraft__schedule_duration() const;
  void _internal_set_bhdraft__schedule_duration(float value);
  public:

  // int32 maximum_size_on_screen = 22;
  void clear_maximum_size_on_screen();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_size_on_screen() const;
  void set_maximum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximum_size_on_screen() const;
  void _internal_set_maximum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool can_fade = 19;
  void clear_can_fade();
  bool can_fade() const;
  void set_can_fade(bool value);
  private:
  bool _internal_can_fade() const;
  void _internal_set_can_fade(bool value);
  public:

  // bool scale_on_map_with_zoom = 23;
  void clear_scale_on_map_with_zoom();
  bool scale_on_map_with_zoom() const;
  void set_scale_on_map_with_zoom(bool value);
  private:
  bool _internal_scale_on_map_with_zoom() const;
  void _internal_set_scale_on_map_with_zoom(bool value);
  public:

  // bool __tentative__render_ingame = 2049;
  void clear___tentative__render_ingame();
  bool __tentative__render_ingame() const;
  void set___tentative__render_ingame(bool value);
  private:
  bool _internal___tentative__render_ingame() const;
  void _internal_set___tentative__render_ingame(bool value);
  public:

  // bool __tentative__render_on_map = 2050;
  void clear___tentative__render_on_map();
  bool __tentative__render_on_map() const;
  void set___tentative__render_on_map(bool value);
  private:
  bool _internal___tentative__render_on_map() const;
  void _internal_set___tentative__render_on_map(bool value);
  public:

  // float __tentative__scale = 2048;
  void clear___tentative__scale();
  float __tentative__scale() const;
  void set___tentative__scale(float value);
  private:
  float _internal___tentative__scale() const;
  void _internal_set___tentative__scale(float value);
  public:

  // bool __tentative__render_on_minimap = 2051;
  void clear___tentative__render_on_minimap();
  bool __tentative__render_on_minimap() const;
  void set___tentative__render_on_minimap(bool value);
  private:
  bool _internal___tentative__render_on_minimap() const;
  void _internal_set___tentative__render_on_minimap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Icon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tip_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tip_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bhdraft__schedule_;
  ::Category* category_;
  ::Texture* texture_;
  ::GUID* guid_;
  ::Position* position_;
  ::Trigger* trigger_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  float distance_fade_end_;
  float distance_fade_start_;
  float height_offset_;
  int reset_behavior_;
  ::PROTOBUF_NAMESPACE_ID::uint32 achievement_bit_;
  ::PROTOBUF_NAMESPACE_ID::int32 achievement_id_;
  float alpha_;
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_size_on_screen_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_display_size_;
  float bhdraft__schedule_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_size_on_screen_;
  bool can_fade_;
  bool scale_on_map_with_zoom_;
  bool __tentative__render_ingame_;
  bool __tentative__render_on_map_;
  float __tentative__scale_;
  bool __tentative__render_on_minimap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class Trail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trail) */ {
 public:
  inline Trail() : Trail(nullptr) {};
  virtual ~Trail();

  Trail(const Trail& from);
  Trail(Trail&& from) noexcept
    : Trail() {
    *this = ::std::move(from);
  }

  inline Trail& operator=(const Trail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trail& operator=(Trail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trail* internal_default_instance() {
    return reinterpret_cast<const Trail*>(
               &_Trail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Trail& a, Trail& b) {
    a.Swap(&b);
  }
  inline void Swap(Trail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trail* New() const final {
    return CreateMaybeMessage<Trail>(nullptr);
  }

  Trail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trail& from);
  void MergeFrom(const Trail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trail";
  }
  protected:
  explicit Trail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBhdraftScheduleFieldNumber = 23,
    kCategoryFieldNumber = 1,
    kTextureFieldNumber = 2,
    kGuidFieldNumber = 3,
    kTrailDataFieldNumber = 7,
    kColorFieldNumber = 26,
    kFestivalFilterFieldNumber = 27,
    kMapTypeFilterFieldNumber = 28,
    kMountFilterFieldNumber = 29,
    kProfessionFilterFieldNumber = 30,
    kSpecializationFilterFieldNumber = 31,
    kSpeciesFilterFieldNumber = 32,
    kMapIdFieldNumber = 4,
    kDistanceFadeEndFieldNumber = 5,
    kDistanceFadeStartFieldNumber = 6,
    kAnimationSpeedFieldNumber = 8,
    kCullChiralityFieldNumber = 9,
    kAchievementBitFieldNumber = 16,
    kAchievementIdFieldNumber = 17,
    kAlphaFieldNumber = 18,
    kCanFadeFieldNumber = 19,
    kIsWallFieldNumber = 22,
    kBhdraftScheduleDurationFieldNumber = 24,
    kScaleFieldNumber = 25,
  };
  // string bhdraft__schedule = 23;
  void clear_bhdraft__schedule();
  const std::string& bhdraft__schedule() const;
  void set_bhdraft__schedule(const std::string& value);
  void set_bhdraft__schedule(std::string&& value);
  void set_bhdraft__schedule(const char* value);
  void set_bhdraft__schedule(const char* value, size_t size);
  std::string* mutable_bhdraft__schedule();
  std::string* release_bhdraft__schedule();
  void set_allocated_bhdraft__schedule(std::string* bhdraft__schedule);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bhdraft__schedule();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bhdraft__schedule(
      std::string* bhdraft__schedule);
  private:
  const std::string& _internal_bhdraft__schedule() const;
  void _internal_set_bhdraft__schedule(const std::string& value);
  std::string* _internal_mutable_bhdraft__schedule();
  public:

  // .Category category = 1;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const ::Category& category() const;
  ::Category* release_category();
  ::Category* mutable_category();
  void set_allocated_category(::Category* category);
  private:
  const ::Category& _internal_category() const;
  ::Category* _internal_mutable_category();
  public:
  void unsafe_arena_set_allocated_category(
      ::Category* category);
  ::Category* unsafe_arena_release_category();

  // .Texture texture = 2;
  bool has_texture() const;
  private:
  bool _internal_has_texture() const;
  public:
  void clear_texture();
  const ::Texture& texture() const;
  ::Texture* release_texture();
  ::Texture* mutable_texture();
  void set_allocated_texture(::Texture* texture);
  private:
  const ::Texture& _internal_texture() const;
  ::Texture* _internal_mutable_texture();
  public:
  void unsafe_arena_set_allocated_texture(
      ::Texture* texture);
  ::Texture* unsafe_arena_release_texture();

  // .GUID guid = 3;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const ::GUID& guid() const;
  ::GUID* release_guid();
  ::GUID* mutable_guid();
  void set_allocated_guid(::GUID* guid);
  private:
  const ::GUID& _internal_guid() const;
  ::GUID* _internal_mutable_guid();
  public:
  void unsafe_arena_set_allocated_guid(
      ::GUID* guid);
  ::GUID* unsafe_arena_release_guid();

  // .TrailData trail_data = 7;
  bool has_trail_data() const;
  private:
  bool _internal_has_trail_data() const;
  public:
  void clear_trail_data();
  const ::TrailData& trail_data() const;
  ::TrailData* release_trail_data();
  ::TrailData* mutable_trail_data();
  void set_allocated_trail_data(::TrailData* trail_data);
  private:
  const ::TrailData& _internal_trail_data() const;
  ::TrailData* _internal_mutable_trail_data();
  public:
  void unsafe_arena_set_allocated_trail_data(
      ::TrailData* trail_data);
  ::TrailData* unsafe_arena_release_trail_data();

  // .Color color = 26;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::Color& color() const;
  ::Color* release_color();
  ::Color* mutable_color();
  void set_allocated_color(::Color* color);
  private:
  const ::Color& _internal_color() const;
  ::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::Color* color);
  ::Color* unsafe_arena_release_color();

  // .FestivalFilter festival_filter = 27;
  bool has_festival_filter() const;
  private:
  bool _internal_has_festival_filter() const;
  public:
  void clear_festival_filter();
  const ::FestivalFilter& festival_filter() const;
  ::FestivalFilter* release_festival_filter();
  ::FestivalFilter* mutable_festival_filter();
  void set_allocated_festival_filter(::FestivalFilter* festival_filter);
  private:
  const ::FestivalFilter& _internal_festival_filter() const;
  ::FestivalFilter* _internal_mutable_festival_filter();
  public:
  void unsafe_arena_set_allocated_festival_filter(
      ::FestivalFilter* festival_filter);
  ::FestivalFilter* unsafe_arena_release_festival_filter();

  // .MapTypeFilter map_type_filter = 28;
  bool has_map_type_filter() const;
  private:
  bool _internal_has_map_type_filter() const;
  public:
  void clear_map_type_filter();
  const ::MapTypeFilter& map_type_filter() const;
  ::MapTypeFilter* release_map_type_filter();
  ::MapTypeFilter* mutable_map_type_filter();
  void set_allocated_map_type_filter(::MapTypeFilter* map_type_filter);
  private:
  const ::MapTypeFilter& _internal_map_type_filter() const;
  ::MapTypeFilter* _internal_mutable_map_type_filter();
  public:
  void unsafe_arena_set_allocated_map_type_filter(
      ::MapTypeFilter* map_type_filter);
  ::MapTypeFilter* unsafe_arena_release_map_type_filter();

  // .MountFilter mount_filter = 29;
  bool has_mount_filter() const;
  private:
  bool _internal_has_mount_filter() const;
  public:
  void clear_mount_filter();
  const ::MountFilter& mount_filter() const;
  ::MountFilter* release_mount_filter();
  ::MountFilter* mutable_mount_filter();
  void set_allocated_mount_filter(::MountFilter* mount_filter);
  private:
  const ::MountFilter& _internal_mount_filter() const;
  ::MountFilter* _internal_mutable_mount_filter();
  public:
  void unsafe_arena_set_allocated_mount_filter(
      ::MountFilter* mount_filter);
  ::MountFilter* unsafe_arena_release_mount_filter();

  // .ProfessionFilter profession_filter = 30;
  bool has_profession_filter() const;
  private:
  bool _internal_has_profession_filter() const;
  public:
  void clear_profession_filter();
  const ::ProfessionFilter& profession_filter() const;
  ::ProfessionFilter* release_profession_filter();
  ::ProfessionFilter* mutable_profession_filter();
  void set_allocated_profession_filter(::ProfessionFilter* profession_filter);
  private:
  const ::ProfessionFilter& _internal_profession_filter() const;
  ::ProfessionFilter* _internal_mutable_profession_filter();
  public:
  void unsafe_arena_set_allocated_profession_filter(
      ::ProfessionFilter* profession_filter);
  ::ProfessionFilter* unsafe_arena_release_profession_filter();

  // .SpecializationFilter specialization_filter = 31;
  bool has_specialization_filter() const;
  private:
  bool _internal_has_specialization_filter() const;
  public:
  void clear_specialization_filter();
  const ::SpecializationFilter& specialization_filter() const;
  ::SpecializationFilter* release_specialization_filter();
  ::SpecializationFilter* mutable_specialization_filter();
  void set_allocated_specialization_filter(::SpecializationFilter* specialization_filter);
  private:
  const ::SpecializationFilter& _internal_specialization_filter() const;
  ::SpecializationFilter* _internal_mutable_specialization_filter();
  public:
  void unsafe_arena_set_allocated_specialization_filter(
      ::SpecializationFilter* specialization_filter);
  ::SpecializationFilter* unsafe_arena_release_specialization_filter();

  // .SpeciesFilter species_filter = 32;
  bool has_species_filter() const;
  private:
  bool _internal_has_species_filter() const;
  public:
  void clear_species_filter();
  const ::SpeciesFilter& species_filter() const;
  ::SpeciesFilter* release_species_filter();
  ::SpeciesFilter* mutable_species_filter();
  void set_allocated_species_filter(::SpeciesFilter* species_filter);
  private:
  const ::SpeciesFilter& _internal_species_filter() const;
  ::SpeciesFilter* _internal_mutable_species_filter();
  public:
  void unsafe_arena_set_allocated_species_filter(
      ::SpeciesFilter* species_filter);
  ::SpeciesFilter* unsafe_arena_release_species_filter();

  // int32 map_id = 4;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float distance_fade_end = 5;
  void clear_distance_fade_end();
  float distance_fade_end() const;
  void set_distance_fade_end(float value);
  private:
  float _internal_distance_fade_end() const;
  void _internal_set_distance_fade_end(float value);
  public:

  // float distance_fade_start = 6;
  void clear_distance_fade_start();
  float distance_fade_start() const;
  void set_distance_fade_start(float value);
  private:
  float _internal_distance_fade_start() const;
  void _internal_set_distance_fade_start(float value);
  public:

  // float animation_speed = 8;
  void clear_animation_speed();
  float animation_speed() const;
  void set_animation_speed(float value);
  private:
  float _internal_animation_speed() const;
  void _internal_set_animation_speed(float value);
  public:

  // .CullChirality cull_chirality = 9;
  void clear_cull_chirality();
  ::CullChirality cull_chirality() const;
  void set_cull_chirality(::CullChirality value);
  private:
  ::CullChirality _internal_cull_chirality() const;
  void _internal_set_cull_chirality(::CullChirality value);
  public:

  // fixed32 achievement_bit = 16;
  void clear_achievement_bit();
  ::PROTOBUF_NAMESPACE_ID::uint32 achievement_bit() const;
  void set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_achievement_bit() const;
  void _internal_set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 achievement_id = 17;
  void clear_achievement_id();
  ::PROTOBUF_NAMESPACE_ID::int32 achievement_id() const;
  void set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_achievement_id() const;
  void _internal_set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha = 18;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // bool can_fade = 19;
  void clear_can_fade();
  bool can_fade() const;
  void set_can_fade(bool value);
  private:
  bool _internal_can_fade() const;
  void _internal_set_can_fade(bool value);
  public:

  // bool is_wall = 22;
  void clear_is_wall();
  bool is_wall() const;
  void set_is_wall(bool value);
  private:
  bool _internal_is_wall() const;
  void _internal_set_is_wall(bool value);
  public:

  // float bhdraft__schedule_duration = 24;
  void clear_bhdraft__schedule_duration();
  float bhdraft__schedule_duration() const;
  void set_bhdraft__schedule_duration(float value);
  private:
  float _internal_bhdraft__schedule_duration() const;
  void _internal_set_bhdraft__schedule_duration(float value);
  public:

  // float scale = 25;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:Trail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bhdraft__schedule_;
  ::Category* category_;
  ::Texture* texture_;
  ::GUID* guid_;
  ::TrailData* trail_data_;
  ::Color* color_;
  ::FestivalFilter* festival_filter_;
  ::MapTypeFilter* map_type_filter_;
  ::MountFilter* mount_filter_;
  ::ProfessionFilter* profession_filter_;
  ::SpecializationFilter* specialization_filter_;
  ::SpeciesFilter* species_filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  float distance_fade_end_;
  float distance_fade_start_;
  float animation_speed_;
  int cull_chirality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 achievement_bit_;
  ::PROTOBUF_NAMESPACE_ID::int32 achievement_id_;
  float alpha_;
  bool can_fade_;
  bool is_wall_;
  float bhdraft__schedule_duration_;
  float scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class Texture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Texture) */ {
 public:
  inline Texture() : Texture(nullptr) {};
  virtual ~Texture();

  Texture(const Texture& from);
  Texture(Texture&& from) noexcept
    : Texture() {
    *this = ::std::move(from);
  }

  inline Texture& operator=(const Texture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Texture& operator=(Texture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Texture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Texture* internal_default_instance() {
    return reinterpret_cast<const Texture*>(
               &_Texture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Texture& a, Texture& b) {
    a.Swap(&b);
  }
  inline void Swap(Texture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Texture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Texture* New() const final {
    return CreateMaybeMessage<Texture>(nullptr);
  }

  Texture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Texture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Texture& from);
  void MergeFrom(const Texture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Texture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Texture";
  }
  protected:
  explicit Texture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Texture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Position) */ {
 public:
  inline Position() : Position(nullptr) {};
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class EulerRotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EulerRotation) */ {
 public:
  inline EulerRotation() : EulerRotation(nullptr) {};
  virtual ~EulerRotation();

  EulerRotation(const EulerRotation& from);
  EulerRotation(EulerRotation&& from) noexcept
    : EulerRotation() {
    *this = ::std::move(from);
  }

  inline EulerRotation& operator=(const EulerRotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerRotation& operator=(EulerRotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EulerRotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EulerRotation* internal_default_instance() {
    return reinterpret_cast<const EulerRotation*>(
               &_EulerRotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EulerRotation& a, EulerRotation& b) {
    a.Swap(&b);
  }
  inline void Swap(EulerRotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EulerRotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EulerRotation* New() const final {
    return CreateMaybeMessage<EulerRotation>(nullptr);
  }

  EulerRotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EulerRotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EulerRotation& from);
  void MergeFrom(const EulerRotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EulerRotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EulerRotation";
  }
  protected:
  explicit EulerRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:EulerRotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class Trigger PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trigger) */ {
 public:
  inline Trigger() : Trigger(nullptr) {};
  virtual ~Trigger();

  Trigger(const Trigger& from);
  Trigger(Trigger&& from) noexcept
    : Trigger() {
    *this = ::std::move(from);
  }

  inline Trigger& operator=(const Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trigger& operator=(Trigger&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trigger* internal_default_instance() {
    return reinterpret_cast<const Trigger*>(
               &_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Trigger& a, Trigger& b) {
    a.Swap(&b);
  }
  inline void Swap(Trigger* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trigger* New() const final {
    return CreateMaybeMessage<Trigger>(nullptr);
  }

  Trigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trigger& from);
  void MergeFrom(const Trigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trigger";
  }
  protected:
  explicit Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionCopyClipboardFieldNumber = 5,
    kActionCopyMessageFieldNumber = 6,
    kActionInfoMessageFieldNumber = 8,
    kActionHideCategoryFieldNumber = 12,
    kActionShowCategoryFieldNumber = 13,
    kActionToggleCategoryFieldNumber = 14,
    kBounceDelayFieldNumber = 2,
    kBounceDurationFieldNumber = 3,
    kBounceHeightFieldNumber = 4,
    kAutoTriggerFieldNumber = 1,
    kHasCountdownFieldNumber = 7,
    kInvertDisplayFieldNumber = 9,
    kResetLengthFieldNumber = 10,
    kRangeFieldNumber = 11,
  };
  // string action_copy_clipboard = 5;
  void clear_action_copy_clipboard();
  const std::string& action_copy_clipboard() const;
  void set_action_copy_clipboard(const std::string& value);
  void set_action_copy_clipboard(std::string&& value);
  void set_action_copy_clipboard(const char* value);
  void set_action_copy_clipboard(const char* value, size_t size);
  std::string* mutable_action_copy_clipboard();
  std::string* release_action_copy_clipboard();
  void set_allocated_action_copy_clipboard(std::string* action_copy_clipboard);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_copy_clipboard();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_copy_clipboard(
      std::string* action_copy_clipboard);
  private:
  const std::string& _internal_action_copy_clipboard() const;
  void _internal_set_action_copy_clipboard(const std::string& value);
  std::string* _internal_mutable_action_copy_clipboard();
  public:

  // string action_copy_message = 6;
  void clear_action_copy_message();
  const std::string& action_copy_message() const;
  void set_action_copy_message(const std::string& value);
  void set_action_copy_message(std::string&& value);
  void set_action_copy_message(const char* value);
  void set_action_copy_message(const char* value, size_t size);
  std::string* mutable_action_copy_message();
  std::string* release_action_copy_message();
  void set_allocated_action_copy_message(std::string* action_copy_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_copy_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_copy_message(
      std::string* action_copy_message);
  private:
  const std::string& _internal_action_copy_message() const;
  void _internal_set_action_copy_message(const std::string& value);
  std::string* _internal_mutable_action_copy_message();
  public:

  // string action_info_message = 8;
  void clear_action_info_message();
  const std::string& action_info_message() const;
  void set_action_info_message(const std::string& value);
  void set_action_info_message(std::string&& value);
  void set_action_info_message(const char* value);
  void set_action_info_message(const char* value, size_t size);
  std::string* mutable_action_info_message();
  std::string* release_action_info_message();
  void set_allocated_action_info_message(std::string* action_info_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_info_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_info_message(
      std::string* action_info_message);
  private:
  const std::string& _internal_action_info_message() const;
  void _internal_set_action_info_message(const std::string& value);
  std::string* _internal_mutable_action_info_message();
  public:

  // .Category action_hide_category = 12;
  bool has_action_hide_category() const;
  private:
  bool _internal_has_action_hide_category() const;
  public:
  void clear_action_hide_category();
  const ::Category& action_hide_category() const;
  ::Category* release_action_hide_category();
  ::Category* mutable_action_hide_category();
  void set_allocated_action_hide_category(::Category* action_hide_category);
  private:
  const ::Category& _internal_action_hide_category() const;
  ::Category* _internal_mutable_action_hide_category();
  public:
  void unsafe_arena_set_allocated_action_hide_category(
      ::Category* action_hide_category);
  ::Category* unsafe_arena_release_action_hide_category();

  // .Category action_show_category = 13;
  bool has_action_show_category() const;
  private:
  bool _internal_has_action_show_category() const;
  public:
  void clear_action_show_category();
  const ::Category& action_show_category() const;
  ::Category* release_action_show_category();
  ::Category* mutable_action_show_category();
  void set_allocated_action_show_category(::Category* action_show_category);
  private:
  const ::Category& _internal_action_show_category() const;
  ::Category* _internal_mutable_action_show_category();
  public:
  void unsafe_arena_set_allocated_action_show_category(
      ::Category* action_show_category);
  ::Category* unsafe_arena_release_action_show_category();

  // .Category action_toggle_category = 14;
  bool has_action_toggle_category() const;
  private:
  bool _internal_has_action_toggle_category() const;
  public:
  void clear_action_toggle_category();
  const ::Category& action_toggle_category() const;
  ::Category* release_action_toggle_category();
  ::Category* mutable_action_toggle_category();
  void set_allocated_action_toggle_category(::Category* action_toggle_category);
  private:
  const ::Category& _internal_action_toggle_category() const;
  ::Category* _internal_mutable_action_toggle_category();
  public:
  void unsafe_arena_set_allocated_action_toggle_category(
      ::Category* action_toggle_category);
  ::Category* unsafe_arena_release_action_toggle_category();

  // float bounce_delay = 2;
  void clear_bounce_delay();
  float bounce_delay() const;
  void set_bounce_delay(float value);
  private:
  float _internal_bounce_delay() const;
  void _internal_set_bounce_delay(float value);
  public:

  // float bounce_duration = 3;
  void clear_bounce_duration();
  float bounce_duration() const;
  void set_bounce_duration(float value);
  private:
  float _internal_bounce_duration() const;
  void _internal_set_bounce_duration(float value);
  public:

  // float bounce_height = 4;
  void clear_bounce_height();
  float bounce_height() const;
  void set_bounce_height(float value);
  private:
  float _internal_bounce_height() const;
  void _internal_set_bounce_height(float value);
  public:

  // bool auto_trigger = 1;
  void clear_auto_trigger();
  bool auto_trigger() const;
  void set_auto_trigger(bool value);
  private:
  bool _internal_auto_trigger() const;
  void _internal_set_auto_trigger(bool value);
  public:

  // bool has_countdown = 7;
  void clear_has_countdown();
  bool has_countdown() const;
  void set_has_countdown(bool value);
  private:
  bool _internal_has_countdown() const;
  void _internal_set_has_countdown(bool value);
  public:

  // bool invert_display = 9;
  void clear_invert_display();
  bool invert_display() const;
  void set_invert_display(bool value);
  private:
  bool _internal_invert_display() const;
  void _internal_set_invert_display(bool value);
  public:

  // float reset_length = 10;
  void clear_reset_length();
  float reset_length() const;
  void set_reset_length(float value);
  private:
  float _internal_reset_length() const;
  void _internal_set_reset_length(float value);
  public:

  // float range = 11;
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:Trigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_copy_clipboard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_copy_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_info_message_;
  ::Category* action_hide_category_;
  ::Category* action_show_category_;
  ::Category* action_toggle_category_;
  float bounce_delay_;
  float bounce_duration_;
  float bounce_height_;
  bool auto_trigger_;
  bool has_countdown_;
  bool invert_display_;
  float reset_length_;
  float range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class GUID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GUID) */ {
 public:
  inline GUID() : GUID(nullptr) {};
  virtual ~GUID();

  GUID(const GUID& from);
  GUID(GUID&& from) noexcept
    : GUID() {
    *this = ::std::move(from);
  }

  inline GUID& operator=(const GUID& from) {
    CopyFrom(from);
    return *this;
  }
  inline GUID& operator=(GUID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GUID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GUID* internal_default_instance() {
    return reinterpret_cast<const GUID*>(
               &_GUID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GUID& a, GUID& b) {
    a.Swap(&b);
  }
  inline void Swap(GUID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GUID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GUID* New() const final {
    return CreateMaybeMessage<GUID>(nullptr);
  }

  GUID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GUID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GUID& from);
  void MergeFrom(const GUID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GUID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GUID";
  }
  protected:
  explicit GUID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
  };
  // int32 guid = 1;
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::int32 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GUID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 guid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Color) */ {
 public:
  inline Color() : Color(nullptr) {};
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHexFieldNumber = 1,
  };
  // string hex = 1;
  void clear_hex();
  const std::string& hex() const;
  void set_hex(const std::string& value);
  void set_hex(std::string&& value);
  void set_hex(const char* value);
  void set_hex(const char* value, size_t size);
  std::string* mutable_hex();
  std::string* release_hex();
  void set_allocated_hex(std::string* hex);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hex();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hex(
      std::string* hex);
  private:
  const std::string& _internal_hex() const;
  void _internal_set_hex(const std::string& value);
  std::string* _internal_mutable_hex();
  public:

  // @@protoc_insertion_point(class_scope:Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class FestivalFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FestivalFilter) */ {
 public:
  inline FestivalFilter() : FestivalFilter(nullptr) {};
  virtual ~FestivalFilter();

  FestivalFilter(const FestivalFilter& from);
  FestivalFilter(FestivalFilter&& from) noexcept
    : FestivalFilter() {
    *this = ::std::move(from);
  }

  inline FestivalFilter& operator=(const FestivalFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FestivalFilter& operator=(FestivalFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FestivalFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FestivalFilter* internal_default_instance() {
    return reinterpret_cast<const FestivalFilter*>(
               &_FestivalFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FestivalFilter& a, FestivalFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(FestivalFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FestivalFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FestivalFilter* New() const final {
    return CreateMaybeMessage<FestivalFilter>(nullptr);
  }

  FestivalFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FestivalFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FestivalFilter& from);
  void MergeFrom(const FestivalFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FestivalFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FestivalFilter";
  }
  protected:
  explicit FestivalFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDragonbashFieldNumber = 1,
    kFestivalOfTheFourWindsFieldNumber = 2,
    kHalloweenFieldNumber = 3,
    kLunarNewYearFieldNumber = 4,
    kSuperAdventureFestivalFieldNumber = 5,
    kWintersdayFieldNumber = 6,
    kNoneFieldNumber = 7,
  };
  // bool dragonbash = 1;
  void clear_dragonbash();
  bool dragonbash() const;
  void set_dragonbash(bool value);
  private:
  bool _internal_dragonbash() const;
  void _internal_set_dragonbash(bool value);
  public:

  // bool festival_of_the_four_winds = 2;
  void clear_festival_of_the_four_winds();
  bool festival_of_the_four_winds() const;
  void set_festival_of_the_four_winds(bool value);
  private:
  bool _internal_festival_of_the_four_winds() const;
  void _internal_set_festival_of_the_four_winds(bool value);
  public:

  // bool halloween = 3;
  void clear_halloween();
  bool halloween() const;
  void set_halloween(bool value);
  private:
  bool _internal_halloween() const;
  void _internal_set_halloween(bool value);
  public:

  // bool lunar_new_year = 4;
  void clear_lunar_new_year();
  bool lunar_new_year() const;
  void set_lunar_new_year(bool value);
  private:
  bool _internal_lunar_new_year() const;
  void _internal_set_lunar_new_year(bool value);
  public:

  // bool super_adventure_festival = 5;
  void clear_super_adventure_festival();
  bool super_adventure_festival() const;
  void set_super_adventure_festival(bool value);
  private:
  bool _internal_super_adventure_festival() const;
  void _internal_set_super_adventure_festival(bool value);
  public:

  // bool wintersday = 6;
  void clear_wintersday();
  bool wintersday() const;
  void set_wintersday(bool value);
  private:
  bool _internal_wintersday() const;
  void _internal_set_wintersday(bool value);
  public:

  // bool none = 7;
  void clear_none();
  bool none() const;
  void set_none(bool value);
  private:
  bool _internal_none() const;
  void _internal_set_none(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FestivalFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool dragonbash_;
  bool festival_of_the_four_winds_;
  bool halloween_;
  bool lunar_new_year_;
  bool super_adventure_festival_;
  bool wintersday_;
  bool none_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class MapTypeFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MapTypeFilter) */ {
 public:
  inline MapTypeFilter() : MapTypeFilter(nullptr) {};
  virtual ~MapTypeFilter();

  MapTypeFilter(const MapTypeFilter& from);
  MapTypeFilter(MapTypeFilter&& from) noexcept
    : MapTypeFilter() {
    *this = ::std::move(from);
  }

  inline MapTypeFilter& operator=(const MapTypeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTypeFilter& operator=(MapTypeFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapTypeFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapTypeFilter* internal_default_instance() {
    return reinterpret_cast<const MapTypeFilter*>(
               &_MapTypeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MapTypeFilter& a, MapTypeFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTypeFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTypeFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapTypeFilter* New() const final {
    return CreateMaybeMessage<MapTypeFilter>(nullptr);
  }

  MapTypeFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapTypeFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapTypeFilter& from);
  void MergeFrom(const MapTypeFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTypeFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MapTypeFilter";
  }
  protected:
  explicit MapTypeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnknownMapFieldNumber = 1,
    kRedirectMapFieldNumber = 2,
    kCharacterCreateMapFieldNumber = 3,
    kPvpMapFieldNumber = 4,
    kGvgMapFieldNumber = 5,
    kInstanceMapFieldNumber = 6,
    kPublicMapFieldNumber = 7,
    kTournamentMapFieldNumber = 8,
    kTutorialMapFieldNumber = 9,
    kUserTournamentMapFieldNumber = 10,
    kCenterMapFieldNumber = 11,
    kEternalBattlegroundsMapFieldNumber = 12,
    kBluehomeMapFieldNumber = 13,
    kBlueBorderlandsMapFieldNumber = 14,
    kGreenHomeMapFieldNumber = 15,
    kGreenBorderlandsMapFieldNumber = 16,
    kRedHomeMapFieldNumber = 17,
    kRedBorderlandsMapFieldNumber = 18,
    kFortunesValeMapFieldNumber = 19,
    kJumpPuzzleMapFieldNumber = 20,
    kObsidianSanctumMapFieldNumber = 21,
    kEdgeOfTheMistsMapFieldNumber = 22,
    kPublicMiniMapFieldNumber = 23,
    kWvwLoungeMapFieldNumber = 24,
  };
  // bool unknown_map = 1;
  void clear_unknown_map();
  bool unknown_map() const;
  void set_unknown_map(bool value);
  private:
  bool _internal_unknown_map() const;
  void _internal_set_unknown_map(bool value);
  public:

  // bool redirect_map = 2;
  void clear_redirect_map();
  bool redirect_map() const;
  void set_redirect_map(bool value);
  private:
  bool _internal_redirect_map() const;
  void _internal_set_redirect_map(bool value);
  public:

  // bool character_create_map = 3;
  void clear_character_create_map();
  bool character_create_map() const;
  void set_character_create_map(bool value);
  private:
  bool _internal_character_create_map() const;
  void _internal_set_character_create_map(bool value);
  public:

  // bool pvp_map = 4;
  void clear_pvp_map();
  bool pvp_map() const;
  void set_pvp_map(bool value);
  private:
  bool _internal_pvp_map() const;
  void _internal_set_pvp_map(bool value);
  public:

  // bool gvg_map = 5;
  void clear_gvg_map();
  bool gvg_map() const;
  void set_gvg_map(bool value);
  private:
  bool _internal_gvg_map() const;
  void _internal_set_gvg_map(bool value);
  public:

  // bool instance_map = 6;
  void clear_instance_map();
  bool instance_map() const;
  void set_instance_map(bool value);
  private:
  bool _internal_instance_map() const;
  void _internal_set_instance_map(bool value);
  public:

  // bool public_map = 7;
  void clear_public_map();
  bool public_map() const;
  void set_public_map(bool value);
  private:
  bool _internal_public_map() const;
  void _internal_set_public_map(bool value);
  public:

  // bool tournament_map = 8;
  void clear_tournament_map();
  bool tournament_map() const;
  void set_tournament_map(bool value);
  private:
  bool _internal_tournament_map() const;
  void _internal_set_tournament_map(bool value);
  public:

  // bool tutorial_map = 9;
  void clear_tutorial_map();
  bool tutorial_map() const;
  void set_tutorial_map(bool value);
  private:
  bool _internal_tutorial_map() const;
  void _internal_set_tutorial_map(bool value);
  public:

  // bool user_tournament_map = 10;
  void clear_user_tournament_map();
  bool user_tournament_map() const;
  void set_user_tournament_map(bool value);
  private:
  bool _internal_user_tournament_map() const;
  void _internal_set_user_tournament_map(bool value);
  public:

  // bool center_map = 11;
  void clear_center_map();
  bool center_map() const;
  void set_center_map(bool value);
  private:
  bool _internal_center_map() const;
  void _internal_set_center_map(bool value);
  public:

  // bool eternal_battlegrounds_map = 12;
  void clear_eternal_battlegrounds_map();
  bool eternal_battlegrounds_map() const;
  void set_eternal_battlegrounds_map(bool value);
  private:
  bool _internal_eternal_battlegrounds_map() const;
  void _internal_set_eternal_battlegrounds_map(bool value);
  public:

  // bool bluehome_map = 13;
  void clear_bluehome_map();
  bool bluehome_map() const;
  void set_bluehome_map(bool value);
  private:
  bool _internal_bluehome_map() const;
  void _internal_set_bluehome_map(bool value);
  public:

  // bool blue_borderlands_map = 14;
  void clear_blue_borderlands_map();
  bool blue_borderlands_map() const;
  void set_blue_borderlands_map(bool value);
  private:
  bool _internal_blue_borderlands_map() const;
  void _internal_set_blue_borderlands_map(bool value);
  public:

  // bool green_home_map = 15;
  void clear_green_home_map();
  bool green_home_map() const;
  void set_green_home_map(bool value);
  private:
  bool _internal_green_home_map() const;
  void _internal_set_green_home_map(bool value);
  public:

  // bool green_borderlands_map = 16;
  void clear_green_borderlands_map();
  bool green_borderlands_map() const;
  void set_green_borderlands_map(bool value);
  private:
  bool _internal_green_borderlands_map() const;
  void _internal_set_green_borderlands_map(bool value);
  public:

  // bool red_home_map = 17;
  void clear_red_home_map();
  bool red_home_map() const;
  void set_red_home_map(bool value);
  private:
  bool _internal_red_home_map() const;
  void _internal_set_red_home_map(bool value);
  public:

  // bool red_borderlands_map = 18;
  void clear_red_borderlands_map();
  bool red_borderlands_map() const;
  void set_red_borderlands_map(bool value);
  private:
  bool _internal_red_borderlands_map() const;
  void _internal_set_red_borderlands_map(bool value);
  public:

  // bool fortunes_vale_map = 19;
  void clear_fortunes_vale_map();
  bool fortunes_vale_map() const;
  void set_fortunes_vale_map(bool value);
  private:
  bool _internal_fortunes_vale_map() const;
  void _internal_set_fortunes_vale_map(bool value);
  public:

  // bool jump_puzzle_map = 20;
  void clear_jump_puzzle_map();
  bool jump_puzzle_map() const;
  void set_jump_puzzle_map(bool value);
  private:
  bool _internal_jump_puzzle_map() const;
  void _internal_set_jump_puzzle_map(bool value);
  public:

  // bool obsidian_sanctum_map = 21;
  void clear_obsidian_sanctum_map();
  bool obsidian_sanctum_map() const;
  void set_obsidian_sanctum_map(bool value);
  private:
  bool _internal_obsidian_sanctum_map() const;
  void _internal_set_obsidian_sanctum_map(bool value);
  public:

  // bool edge_of_the_mists_map = 22;
  void clear_edge_of_the_mists_map();
  bool edge_of_the_mists_map() const;
  void set_edge_of_the_mists_map(bool value);
  private:
  bool _internal_edge_of_the_mists_map() const;
  void _internal_set_edge_of_the_mists_map(bool value);
  public:

  // bool public_mini_map = 23;
  void clear_public_mini_map();
  bool public_mini_map() const;
  void set_public_mini_map(bool value);
  private:
  bool _internal_public_mini_map() const;
  void _internal_set_public_mini_map(bool value);
  public:

  // bool wvw_lounge_map = 24;
  void clear_wvw_lounge_map();
  bool wvw_lounge_map() const;
  void set_wvw_lounge_map(bool value);
  private:
  bool _internal_wvw_lounge_map() const;
  void _internal_set_wvw_lounge_map(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MapTypeFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool unknown_map_;
  bool redirect_map_;
  bool character_create_map_;
  bool pvp_map_;
  bool gvg_map_;
  bool instance_map_;
  bool public_map_;
  bool tournament_map_;
  bool tutorial_map_;
  bool user_tournament_map_;
  bool center_map_;
  bool eternal_battlegrounds_map_;
  bool bluehome_map_;
  bool blue_borderlands_map_;
  bool green_home_map_;
  bool green_borderlands_map_;
  bool red_home_map_;
  bool red_borderlands_map_;
  bool fortunes_vale_map_;
  bool jump_puzzle_map_;
  bool obsidian_sanctum_map_;
  bool edge_of_the_mists_map_;
  bool public_mini_map_;
  bool wvw_lounge_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class MountFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MountFilter) */ {
 public:
  inline MountFilter() : MountFilter(nullptr) {};
  virtual ~MountFilter();

  MountFilter(const MountFilter& from);
  MountFilter(MountFilter&& from) noexcept
    : MountFilter() {
    *this = ::std::move(from);
  }

  inline MountFilter& operator=(const MountFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountFilter& operator=(MountFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MountFilter* internal_default_instance() {
    return reinterpret_cast<const MountFilter*>(
               &_MountFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MountFilter& a, MountFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(MountFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountFilter* New() const final {
    return CreateMaybeMessage<MountFilter>(nullptr);
  }

  MountFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountFilter& from);
  void MergeFrom(const MountFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MountFilter";
  }
  protected:
  explicit MountFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRaptorFieldNumber = 1,
    kSpringerFieldNumber = 2,
    kSkimmerFieldNumber = 3,
    kJackalFieldNumber = 4,
    kGriffonFieldNumber = 5,
    kRollerBeetleFieldNumber = 6,
    kWarclawFieldNumber = 7,
    kSkyscaleeFieldNumber = 8,
    kSkiffFieldNumber = 9,
    kSeigeTurtleFieldNumber = 10,
  };
  // bool raptor = 1;
  void clear_raptor();
  bool raptor() const;
  void set_raptor(bool value);
  private:
  bool _internal_raptor() const;
  void _internal_set_raptor(bool value);
  public:

  // bool springer = 2;
  void clear_springer();
  bool springer() const;
  void set_springer(bool value);
  private:
  bool _internal_springer() const;
  void _internal_set_springer(bool value);
  public:

  // bool skimmer = 3;
  void clear_skimmer();
  bool skimmer() const;
  void set_skimmer(bool value);
  private:
  bool _internal_skimmer() const;
  void _internal_set_skimmer(bool value);
  public:

  // bool jackal = 4;
  void clear_jackal();
  bool jackal() const;
  void set_jackal(bool value);
  private:
  bool _internal_jackal() const;
  void _internal_set_jackal(bool value);
  public:

  // bool griffon = 5;
  void clear_griffon();
  bool griffon() const;
  void set_griffon(bool value);
  private:
  bool _internal_griffon() const;
  void _internal_set_griffon(bool value);
  public:

  // bool roller_beetle = 6;
  void clear_roller_beetle();
  bool roller_beetle() const;
  void set_roller_beetle(bool value);
  private:
  bool _internal_roller_beetle() const;
  void _internal_set_roller_beetle(bool value);
  public:

  // bool warclaw = 7;
  void clear_warclaw();
  bool warclaw() const;
  void set_warclaw(bool value);
  private:
  bool _internal_warclaw() const;
  void _internal_set_warclaw(bool value);
  public:

  // bool skyscalee = 8;
  void clear_skyscalee();
  bool skyscalee() const;
  void set_skyscalee(bool value);
  private:
  bool _internal_skyscalee() const;
  void _internal_set_skyscalee(bool value);
  public:

  // bool skiff = 9;
  void clear_skiff();
  bool skiff() const;
  void set_skiff(bool value);
  private:
  bool _internal_skiff() const;
  void _internal_set_skiff(bool value);
  public:

  // bool seige_turtle = 10;
  void clear_seige_turtle();
  bool seige_turtle() const;
  void set_seige_turtle(bool value);
  private:
  bool _internal_seige_turtle() const;
  void _internal_set_seige_turtle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MountFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool raptor_;
  bool springer_;
  bool skimmer_;
  bool jackal_;
  bool griffon_;
  bool roller_beetle_;
  bool warclaw_;
  bool skyscalee_;
  bool skiff_;
  bool seige_turtle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class ProfessionFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProfessionFilter) */ {
 public:
  inline ProfessionFilter() : ProfessionFilter(nullptr) {};
  virtual ~ProfessionFilter();

  ProfessionFilter(const ProfessionFilter& from);
  ProfessionFilter(ProfessionFilter&& from) noexcept
    : ProfessionFilter() {
    *this = ::std::move(from);
  }

  inline ProfessionFilter& operator=(const ProfessionFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfessionFilter& operator=(ProfessionFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfessionFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfessionFilter* internal_default_instance() {
    return reinterpret_cast<const ProfessionFilter*>(
               &_ProfessionFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProfessionFilter& a, ProfessionFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfessionFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfessionFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfessionFilter* New() const final {
    return CreateMaybeMessage<ProfessionFilter>(nullptr);
  }

  ProfessionFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfessionFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfessionFilter& from);
  void MergeFrom(const ProfessionFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfessionFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProfessionFilter";
  }
  protected:
  explicit ProfessionFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuardianFieldNumber = 1,
    kWarriorFieldNumber = 2,
    kEngineerFieldNumber = 3,
    kRangerFieldNumber = 4,
    kThiefFieldNumber = 5,
    kElementalistFieldNumber = 6,
    kMesmerFieldNumber = 7,
    kNecromancerFieldNumber = 8,
    kRevenantntFieldNumber = 9,
  };
  // bool guardian = 1;
  void clear_guardian();
  bool guardian() const;
  void set_guardian(bool value);
  private:
  bool _internal_guardian() const;
  void _internal_set_guardian(bool value);
  public:

  // bool warrior = 2;
  void clear_warrior();
  bool warrior() const;
  void set_warrior(bool value);
  private:
  bool _internal_warrior() const;
  void _internal_set_warrior(bool value);
  public:

  // bool engineer = 3;
  void clear_engineer();
  bool engineer() const;
  void set_engineer(bool value);
  private:
  bool _internal_engineer() const;
  void _internal_set_engineer(bool value);
  public:

  // bool ranger = 4;
  void clear_ranger();
  bool ranger() const;
  void set_ranger(bool value);
  private:
  bool _internal_ranger() const;
  void _internal_set_ranger(bool value);
  public:

  // bool thief = 5;
  void clear_thief();
  bool thief() const;
  void set_thief(bool value);
  private:
  bool _internal_thief() const;
  void _internal_set_thief(bool value);
  public:

  // bool elementalist = 6;
  void clear_elementalist();
  bool elementalist() const;
  void set_elementalist(bool value);
  private:
  bool _internal_elementalist() const;
  void _internal_set_elementalist(bool value);
  public:

  // bool mesmer = 7;
  void clear_mesmer();
  bool mesmer() const;
  void set_mesmer(bool value);
  private:
  bool _internal_mesmer() const;
  void _internal_set_mesmer(bool value);
  public:

  // bool necromancer = 8;
  void clear_necromancer();
  bool necromancer() const;
  void set_necromancer(bool value);
  private:
  bool _internal_necromancer() const;
  void _internal_set_necromancer(bool value);
  public:

  // bool revenantnt = 9;
  void clear_revenantnt();
  bool revenantnt() const;
  void set_revenantnt(bool value);
  private:
  bool _internal_revenantnt() const;
  void _internal_set_revenantnt(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProfessionFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool guardian_;
  bool warrior_;
  bool engineer_;
  bool ranger_;
  bool thief_;
  bool elementalist_;
  bool mesmer_;
  bool necromancer_;
  bool revenantnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class SpecializationFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SpecializationFilter) */ {
 public:
  inline SpecializationFilter() : SpecializationFilter(nullptr) {};
  virtual ~SpecializationFilter();

  SpecializationFilter(const SpecializationFilter& from);
  SpecializationFilter(SpecializationFilter&& from) noexcept
    : SpecializationFilter() {
    *this = ::std::move(from);
  }

  inline SpecializationFilter& operator=(const SpecializationFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpecializationFilter& operator=(SpecializationFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpecializationFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpecializationFilter* internal_default_instance() {
    return reinterpret_cast<const SpecializationFilter*>(
               &_SpecializationFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SpecializationFilter& a, SpecializationFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(SpecializationFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpecializationFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpecializationFilter* New() const final {
    return CreateMaybeMessage<SpecializationFilter>(nullptr);
  }

  SpecializationFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpecializationFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpecializationFilter& from);
  void MergeFrom(const SpecializationFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecializationFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SpecializationFilter";
  }
  protected:
  explicit SpecializationFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementalistTempestFieldNumber = 1,
    kEngineerScrapperFieldNumber = 2,
    kGuardianDragonhunterFieldNumber = 3,
    kMesmerChronomancerFieldNumber = 4,
    kNecromancerReaperFieldNumber = 5,
    kRangerDruidFieldNumber = 6,
    kRevenantHeraldFieldNumber = 7,
    kThiefDaredevilFieldNumber = 8,
    kWarriorBerserkerFieldNumber = 9,
    kElementalistWeaverFieldNumber = 10,
    kEngineerHolosmithFieldNumber = 11,
    kGuardianFirebrandFieldNumber = 12,
    kMesmerMirageFieldNumber = 13,
    kNecromancerScourgeFieldNumber = 14,
    kRangerSoulbeastFieldNumber = 15,
    kRevenantRenegadeFieldNumber = 16,
    kThiefDeadeyeFieldNumber = 17,
    kWarriorSpellbreakerFieldNumber = 18,
    kElmentalistCatalystFieldNumber = 19,
    kEngineerMechanistFieldNumber = 20,
    kGuardianWillbenderFieldNumber = 21,
    kMesmerVirtuosoFieldNumber = 22,
    kNecromancerHarbingerFieldNumber = 23,
    kRangerUntamedFieldNumber = 24,
    kRevenantVindicatorFieldNumber = 25,
    kThiefSpecterFieldNumber = 26,
    kWarriorBladeswornFieldNumber = 27,
    kElementalistAirFieldNumber = 28,
    kElementalistArcaneFieldNumber = 29,
    kElementalistEarthFieldNumber = 30,
    kElementalistFireFieldNumber = 31,
    kElementalistWaterFieldNumber = 32,
    kEngineerAlchemyFieldNumber = 33,
    kEngineerExplosivesFieldNumber = 34,
    kEngineerFirearmsFieldNumber = 35,
    kEngineerInventionsFieldNumber = 36,
    kEngineerToolsFieldNumber = 37,
    kGuardianHonorFieldNumber = 38,
    kGuardianRadianceFieldNumber = 39,
    kGuardianValorFieldNumber = 40,
    kGuardianVirtuesFieldNumber = 41,
    kGuardianZealFieldNumber = 42,
    kMesmerChaosFieldNumber = 43,
    kMesmerDominationFieldNumber = 44,
    kMesmerDuelingFieldNumber = 45,
    kMesmerIllusionsFieldNumber = 46,
    kMesmerInspirationFieldNumber = 47,
    kNecromancerBloodMagicFieldNumber = 48,
    kNecromancerCursesFieldNumber = 49,
    kNecromancerDeathMagicFieldNumber = 50,
    kNecromancerSoulReapingFieldNumber = 51,
    kNecromancerSpiteFieldNumber = 52,
    kRangerBeastmasteryFieldNumber = 53,
    kRangerMarksmanshipFieldNumber = 54,
    kRangerNatureMagicFieldNumber = 55,
    kRangerSkirmishingFieldNumber = 56,
    kRangerWildernessSurvivalFieldNumber = 57,
    kRevenantCorruptionFieldNumber = 58,
    kRevenantDevastationFieldNumber = 59,
    kRevenantInvocationFieldNumber = 60,
    kRevenantRetributionFieldNumber = 61,
    kRevenantSalvationFieldNumber = 62,
    kThiefAcrobaticsFieldNumber = 63,
    kThiefCriticalStrikesFieldNumber = 64,
    kThiefDeadlyArtsFieldNumber = 65,
    kThiefShadowArtsFieldNumber = 66,
    kThiefTrickeryFieldNumber = 67,
    kWarriorArmsFieldNumber = 68,
    kWarriorDefenseFieldNumber = 69,
    kWarriorDisciplineFieldNumber = 70,
    kWarriorStrengthFieldNumber = 71,
    kWarriorTacticsFieldNumber = 72,
  };
  // bool elementalist_tempest = 1;
  void clear_elementalist_tempest();
  bool elementalist_tempest() const;
  void set_elementalist_tempest(bool value);
  private:
  bool _internal_elementalist_tempest() const;
  void _internal_set_elementalist_tempest(bool value);
  public:

  // bool engineer_scrapper = 2;
  void clear_engineer_scrapper();
  bool engineer_scrapper() const;
  void set_engineer_scrapper(bool value);
  private:
  bool _internal_engineer_scrapper() const;
  void _internal_set_engineer_scrapper(bool value);
  public:

  // bool guardian_dragonhunter = 3;
  void clear_guardian_dragonhunter();
  bool guardian_dragonhunter() const;
  void set_guardian_dragonhunter(bool value);
  private:
  bool _internal_guardian_dragonhunter() const;
  void _internal_set_guardian_dragonhunter(bool value);
  public:

  // bool mesmer_chronomancer = 4;
  void clear_mesmer_chronomancer();
  bool mesmer_chronomancer() const;
  void set_mesmer_chronomancer(bool value);
  private:
  bool _internal_mesmer_chronomancer() const;
  void _internal_set_mesmer_chronomancer(bool value);
  public:

  // bool necromancer_reaper = 5;
  void clear_necromancer_reaper();
  bool necromancer_reaper() const;
  void set_necromancer_reaper(bool value);
  private:
  bool _internal_necromancer_reaper() const;
  void _internal_set_necromancer_reaper(bool value);
  public:

  // bool ranger_druid = 6;
  void clear_ranger_druid();
  bool ranger_druid() const;
  void set_ranger_druid(bool value);
  private:
  bool _internal_ranger_druid() const;
  void _internal_set_ranger_druid(bool value);
  public:

  // bool revenant_herald = 7;
  void clear_revenant_herald();
  bool revenant_herald() const;
  void set_revenant_herald(bool value);
  private:
  bool _internal_revenant_herald() const;
  void _internal_set_revenant_herald(bool value);
  public:

  // bool thief_daredevil = 8;
  void clear_thief_daredevil();
  bool thief_daredevil() const;
  void set_thief_daredevil(bool value);
  private:
  bool _internal_thief_daredevil() const;
  void _internal_set_thief_daredevil(bool value);
  public:

  // bool warrior_berserker = 9;
  void clear_warrior_berserker();
  bool warrior_berserker() const;
  void set_warrior_berserker(bool value);
  private:
  bool _internal_warrior_berserker() const;
  void _internal_set_warrior_berserker(bool value);
  public:

  // bool elementalist_weaver = 10;
  void clear_elementalist_weaver();
  bool elementalist_weaver() const;
  void set_elementalist_weaver(bool value);
  private:
  bool _internal_elementalist_weaver() const;
  void _internal_set_elementalist_weaver(bool value);
  public:

  // bool engineer_holosmith = 11;
  void clear_engineer_holosmith();
  bool engineer_holosmith() const;
  void set_engineer_holosmith(bool value);
  private:
  bool _internal_engineer_holosmith() const;
  void _internal_set_engineer_holosmith(bool value);
  public:

  // bool guardian_firebrand = 12;
  void clear_guardian_firebrand();
  bool guardian_firebrand() const;
  void set_guardian_firebrand(bool value);
  private:
  bool _internal_guardian_firebrand() const;
  void _internal_set_guardian_firebrand(bool value);
  public:

  // bool mesmer_mirage = 13;
  void clear_mesmer_mirage();
  bool mesmer_mirage() const;
  void set_mesmer_mirage(bool value);
  private:
  bool _internal_mesmer_mirage() const;
  void _internal_set_mesmer_mirage(bool value);
  public:

  // bool necromancer_scourge = 14;
  void clear_necromancer_scourge();
  bool necromancer_scourge() const;
  void set_necromancer_scourge(bool value);
  private:
  bool _internal_necromancer_scourge() const;
  void _internal_set_necromancer_scourge(bool value);
  public:

  // bool ranger_soulbeast = 15;
  void clear_ranger_soulbeast();
  bool ranger_soulbeast() const;
  void set_ranger_soulbeast(bool value);
  private:
  bool _internal_ranger_soulbeast() const;
  void _internal_set_ranger_soulbeast(bool value);
  public:

  // bool revenant_renegade = 16;
  void clear_revenant_renegade();
  bool revenant_renegade() const;
  void set_revenant_renegade(bool value);
  private:
  bool _internal_revenant_renegade() const;
  void _internal_set_revenant_renegade(bool value);
  public:

  // bool thief_deadeye = 17;
  void clear_thief_deadeye();
  bool thief_deadeye() const;
  void set_thief_deadeye(bool value);
  private:
  bool _internal_thief_deadeye() const;
  void _internal_set_thief_deadeye(bool value);
  public:

  // bool warrior_spellbreaker = 18;
  void clear_warrior_spellbreaker();
  bool warrior_spellbreaker() const;
  void set_warrior_spellbreaker(bool value);
  private:
  bool _internal_warrior_spellbreaker() const;
  void _internal_set_warrior_spellbreaker(bool value);
  public:

  // bool elmentalist_catalyst = 19;
  void clear_elmentalist_catalyst();
  bool elmentalist_catalyst() const;
  void set_elmentalist_catalyst(bool value);
  private:
  bool _internal_elmentalist_catalyst() const;
  void _internal_set_elmentalist_catalyst(bool value);
  public:

  // bool engineer_mechanist = 20;
  void clear_engineer_mechanist();
  bool engineer_mechanist() const;
  void set_engineer_mechanist(bool value);
  private:
  bool _internal_engineer_mechanist() const;
  void _internal_set_engineer_mechanist(bool value);
  public:

  // bool guardian_willbender = 21;
  void clear_guardian_willbender();
  bool guardian_willbender() const;
  void set_guardian_willbender(bool value);
  private:
  bool _internal_guardian_willbender() const;
  void _internal_set_guardian_willbender(bool value);
  public:

  // bool mesmer_virtuoso = 22;
  void clear_mesmer_virtuoso();
  bool mesmer_virtuoso() const;
  void set_mesmer_virtuoso(bool value);
  private:
  bool _internal_mesmer_virtuoso() const;
  void _internal_set_mesmer_virtuoso(bool value);
  public:

  // bool necromancer_harbinger = 23;
  void clear_necromancer_harbinger();
  bool necromancer_harbinger() const;
  void set_necromancer_harbinger(bool value);
  private:
  bool _internal_necromancer_harbinger() const;
  void _internal_set_necromancer_harbinger(bool value);
  public:

  // bool ranger_untamed = 24;
  void clear_ranger_untamed();
  bool ranger_untamed() const;
  void set_ranger_untamed(bool value);
  private:
  bool _internal_ranger_untamed() const;
  void _internal_set_ranger_untamed(bool value);
  public:

  // bool revenant_vindicator = 25;
  void clear_revenant_vindicator();
  bool revenant_vindicator() const;
  void set_revenant_vindicator(bool value);
  private:
  bool _internal_revenant_vindicator() const;
  void _internal_set_revenant_vindicator(bool value);
  public:

  // bool thief_specter = 26;
  void clear_thief_specter();
  bool thief_specter() const;
  void set_thief_specter(bool value);
  private:
  bool _internal_thief_specter() const;
  void _internal_set_thief_specter(bool value);
  public:

  // bool warrior_bladesworn = 27;
  void clear_warrior_bladesworn();
  bool warrior_bladesworn() const;
  void set_warrior_bladesworn(bool value);
  private:
  bool _internal_warrior_bladesworn() const;
  void _internal_set_warrior_bladesworn(bool value);
  public:

  // bool elementalist_air = 28;
  void clear_elementalist_air();
  bool elementalist_air() const;
  void set_elementalist_air(bool value);
  private:
  bool _internal_elementalist_air() const;
  void _internal_set_elementalist_air(bool value);
  public:

  // bool elementalist_arcane = 29;
  void clear_elementalist_arcane();
  bool elementalist_arcane() const;
  void set_elementalist_arcane(bool value);
  private:
  bool _internal_elementalist_arcane() const;
  void _internal_set_elementalist_arcane(bool value);
  public:

  // bool elementalist_earth = 30;
  void clear_elementalist_earth();
  bool elementalist_earth() const;
  void set_elementalist_earth(bool value);
  private:
  bool _internal_elementalist_earth() const;
  void _internal_set_elementalist_earth(bool value);
  public:

  // bool elementalist_fire = 31;
  void clear_elementalist_fire();
  bool elementalist_fire() const;
  void set_elementalist_fire(bool value);
  private:
  bool _internal_elementalist_fire() const;
  void _internal_set_elementalist_fire(bool value);
  public:

  // bool elementalist_water = 32;
  void clear_elementalist_water();
  bool elementalist_water() const;
  void set_elementalist_water(bool value);
  private:
  bool _internal_elementalist_water() const;
  void _internal_set_elementalist_water(bool value);
  public:

  // bool engineer_alchemy = 33;
  void clear_engineer_alchemy();
  bool engineer_alchemy() const;
  void set_engineer_alchemy(bool value);
  private:
  bool _internal_engineer_alchemy() const;
  void _internal_set_engineer_alchemy(bool value);
  public:

  // bool engineer_explosives = 34;
  void clear_engineer_explosives();
  bool engineer_explosives() const;
  void set_engineer_explosives(bool value);
  private:
  bool _internal_engineer_explosives() const;
  void _internal_set_engineer_explosives(bool value);
  public:

  // bool engineer_firearms = 35;
  void clear_engineer_firearms();
  bool engineer_firearms() const;
  void set_engineer_firearms(bool value);
  private:
  bool _internal_engineer_firearms() const;
  void _internal_set_engineer_firearms(bool value);
  public:

  // bool engineer_inventions = 36;
  void clear_engineer_inventions();
  bool engineer_inventions() const;
  void set_engineer_inventions(bool value);
  private:
  bool _internal_engineer_inventions() const;
  void _internal_set_engineer_inventions(bool value);
  public:

  // bool engineer_tools = 37;
  void clear_engineer_tools();
  bool engineer_tools() const;
  void set_engineer_tools(bool value);
  private:
  bool _internal_engineer_tools() const;
  void _internal_set_engineer_tools(bool value);
  public:

  // bool guardian_honor = 38;
  void clear_guardian_honor();
  bool guardian_honor() const;
  void set_guardian_honor(bool value);
  private:
  bool _internal_guardian_honor() const;
  void _internal_set_guardian_honor(bool value);
  public:

  // bool guardian_radiance = 39;
  void clear_guardian_radiance();
  bool guardian_radiance() const;
  void set_guardian_radiance(bool value);
  private:
  bool _internal_guardian_radiance() const;
  void _internal_set_guardian_radiance(bool value);
  public:

  // bool guardian_valor = 40;
  void clear_guardian_valor();
  bool guardian_valor() const;
  void set_guardian_valor(bool value);
  private:
  bool _internal_guardian_valor() const;
  void _internal_set_guardian_valor(bool value);
  public:

  // bool guardian_virtues = 41;
  void clear_guardian_virtues();
  bool guardian_virtues() const;
  void set_guardian_virtues(bool value);
  private:
  bool _internal_guardian_virtues() const;
  void _internal_set_guardian_virtues(bool value);
  public:

  // bool guardian_zeal = 42;
  void clear_guardian_zeal();
  bool guardian_zeal() const;
  void set_guardian_zeal(bool value);
  private:
  bool _internal_guardian_zeal() const;
  void _internal_set_guardian_zeal(bool value);
  public:

  // bool mesmer_chaos = 43;
  void clear_mesmer_chaos();
  bool mesmer_chaos() const;
  void set_mesmer_chaos(bool value);
  private:
  bool _internal_mesmer_chaos() const;
  void _internal_set_mesmer_chaos(bool value);
  public:

  // bool mesmer_domination = 44;
  void clear_mesmer_domination();
  bool mesmer_domination() const;
  void set_mesmer_domination(bool value);
  private:
  bool _internal_mesmer_domination() const;
  void _internal_set_mesmer_domination(bool value);
  public:

  // bool mesmer_dueling = 45;
  void clear_mesmer_dueling();
  bool mesmer_dueling() const;
  void set_mesmer_dueling(bool value);
  private:
  bool _internal_mesmer_dueling() const;
  void _internal_set_mesmer_dueling(bool value);
  public:

  // bool mesmer_illusions = 46;
  void clear_mesmer_illusions();
  bool mesmer_illusions() const;
  void set_mesmer_illusions(bool value);
  private:
  bool _internal_mesmer_illusions() const;
  void _internal_set_mesmer_illusions(bool value);
  public:

  // bool mesmer_inspiration = 47;
  void clear_mesmer_inspiration();
  bool mesmer_inspiration() const;
  void set_mesmer_inspiration(bool value);
  private:
  bool _internal_mesmer_inspiration() const;
  void _internal_set_mesmer_inspiration(bool value);
  public:

  // bool necromancer_blood_magic = 48;
  void clear_necromancer_blood_magic();
  bool necromancer_blood_magic() const;
  void set_necromancer_blood_magic(bool value);
  private:
  bool _internal_necromancer_blood_magic() const;
  void _internal_set_necromancer_blood_magic(bool value);
  public:

  // bool necromancer_curses = 49;
  void clear_necromancer_curses();
  bool necromancer_curses() const;
  void set_necromancer_curses(bool value);
  private:
  bool _internal_necromancer_curses() const;
  void _internal_set_necromancer_curses(bool value);
  public:

  // bool necromancer_death_magic = 50;
  void clear_necromancer_death_magic();
  bool necromancer_death_magic() const;
  void set_necromancer_death_magic(bool value);
  private:
  bool _internal_necromancer_death_magic() const;
  void _internal_set_necromancer_death_magic(bool value);
  public:

  // bool necromancer_soul_reaping = 51;
  void clear_necromancer_soul_reaping();
  bool necromancer_soul_reaping() const;
  void set_necromancer_soul_reaping(bool value);
  private:
  bool _internal_necromancer_soul_reaping() const;
  void _internal_set_necromancer_soul_reaping(bool value);
  public:

  // bool necromancer_spite = 52;
  void clear_necromancer_spite();
  bool necromancer_spite() const;
  void set_necromancer_spite(bool value);
  private:
  bool _internal_necromancer_spite() const;
  void _internal_set_necromancer_spite(bool value);
  public:

  // bool ranger_beastmastery = 53;
  void clear_ranger_beastmastery();
  bool ranger_beastmastery() const;
  void set_ranger_beastmastery(bool value);
  private:
  bool _internal_ranger_beastmastery() const;
  void _internal_set_ranger_beastmastery(bool value);
  public:

  // bool ranger_marksmanship = 54;
  void clear_ranger_marksmanship();
  bool ranger_marksmanship() const;
  void set_ranger_marksmanship(bool value);
  private:
  bool _internal_ranger_marksmanship() const;
  void _internal_set_ranger_marksmanship(bool value);
  public:

  // bool ranger_nature_magic = 55;
  void clear_ranger_nature_magic();
  bool ranger_nature_magic() const;
  void set_ranger_nature_magic(bool value);
  private:
  bool _internal_ranger_nature_magic() const;
  void _internal_set_ranger_nature_magic(bool value);
  public:

  // bool ranger_skirmishing = 56;
  void clear_ranger_skirmishing();
  bool ranger_skirmishing() const;
  void set_ranger_skirmishing(bool value);
  private:
  bool _internal_ranger_skirmishing() const;
  void _internal_set_ranger_skirmishing(bool value);
  public:

  // bool ranger_wilderness_survival = 57;
  void clear_ranger_wilderness_survival();
  bool ranger_wilderness_survival() const;
  void set_ranger_wilderness_survival(bool value);
  private:
  bool _internal_ranger_wilderness_survival() const;
  void _internal_set_ranger_wilderness_survival(bool value);
  public:

  // bool revenant_corruption = 58;
  void clear_revenant_corruption();
  bool revenant_corruption() const;
  void set_revenant_corruption(bool value);
  private:
  bool _internal_revenant_corruption() const;
  void _internal_set_revenant_corruption(bool value);
  public:

  // bool revenant_devastation = 59;
  void clear_revenant_devastation();
  bool revenant_devastation() const;
  void set_revenant_devastation(bool value);
  private:
  bool _internal_revenant_devastation() const;
  void _internal_set_revenant_devastation(bool value);
  public:

  // bool revenant_invocation = 60;
  void clear_revenant_invocation();
  bool revenant_invocation() const;
  void set_revenant_invocation(bool value);
  private:
  bool _internal_revenant_invocation() const;
  void _internal_set_revenant_invocation(bool value);
  public:

  // bool revenant_retribution = 61;
  void clear_revenant_retribution();
  bool revenant_retribution() const;
  void set_revenant_retribution(bool value);
  private:
  bool _internal_revenant_retribution() const;
  void _internal_set_revenant_retribution(bool value);
  public:

  // bool revenant_salvation = 62;
  void clear_revenant_salvation();
  bool revenant_salvation() const;
  void set_revenant_salvation(bool value);
  private:
  bool _internal_revenant_salvation() const;
  void _internal_set_revenant_salvation(bool value);
  public:

  // bool thief_acrobatics = 63;
  void clear_thief_acrobatics();
  bool thief_acrobatics() const;
  void set_thief_acrobatics(bool value);
  private:
  bool _internal_thief_acrobatics() const;
  void _internal_set_thief_acrobatics(bool value);
  public:

  // bool thief_critical_strikes = 64;
  void clear_thief_critical_strikes();
  bool thief_critical_strikes() const;
  void set_thief_critical_strikes(bool value);
  private:
  bool _internal_thief_critical_strikes() const;
  void _internal_set_thief_critical_strikes(bool value);
  public:

  // bool thief_deadly_arts = 65;
  void clear_thief_deadly_arts();
  bool thief_deadly_arts() const;
  void set_thief_deadly_arts(bool value);
  private:
  bool _internal_thief_deadly_arts() const;
  void _internal_set_thief_deadly_arts(bool value);
  public:

  // bool thief_shadow_arts = 66;
  void clear_thief_shadow_arts();
  bool thief_shadow_arts() const;
  void set_thief_shadow_arts(bool value);
  private:
  bool _internal_thief_shadow_arts() const;
  void _internal_set_thief_shadow_arts(bool value);
  public:

  // bool thief_trickery = 67;
  void clear_thief_trickery();
  bool thief_trickery() const;
  void set_thief_trickery(bool value);
  private:
  bool _internal_thief_trickery() const;
  void _internal_set_thief_trickery(bool value);
  public:

  // bool warrior_arms = 68;
  void clear_warrior_arms();
  bool warrior_arms() const;
  void set_warrior_arms(bool value);
  private:
  bool _internal_warrior_arms() const;
  void _internal_set_warrior_arms(bool value);
  public:

  // bool warrior_defense = 69;
  void clear_warrior_defense();
  bool warrior_defense() const;
  void set_warrior_defense(bool value);
  private:
  bool _internal_warrior_defense() const;
  void _internal_set_warrior_defense(bool value);
  public:

  // bool warrior_discipline = 70;
  void clear_warrior_discipline();
  bool warrior_discipline() const;
  void set_warrior_discipline(bool value);
  private:
  bool _internal_warrior_discipline() const;
  void _internal_set_warrior_discipline(bool value);
  public:

  // bool warrior_strength = 71;
  void clear_warrior_strength();
  bool warrior_strength() const;
  void set_warrior_strength(bool value);
  private:
  bool _internal_warrior_strength() const;
  void _internal_set_warrior_strength(bool value);
  public:

  // bool warrior_tactics = 72;
  void clear_warrior_tactics();
  bool warrior_tactics() const;
  void set_warrior_tactics(bool value);
  private:
  bool _internal_warrior_tactics() const;
  void _internal_set_warrior_tactics(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SpecializationFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool elementalist_tempest_;
  bool engineer_scrapper_;
  bool guardian_dragonhunter_;
  bool mesmer_chronomancer_;
  bool necromancer_reaper_;
  bool ranger_druid_;
  bool revenant_herald_;
  bool thief_daredevil_;
  bool warrior_berserker_;
  bool elementalist_weaver_;
  bool engineer_holosmith_;
  bool guardian_firebrand_;
  bool mesmer_mirage_;
  bool necromancer_scourge_;
  bool ranger_soulbeast_;
  bool revenant_renegade_;
  bool thief_deadeye_;
  bool warrior_spellbreaker_;
  bool elmentalist_catalyst_;
  bool engineer_mechanist_;
  bool guardian_willbender_;
  bool mesmer_virtuoso_;
  bool necromancer_harbinger_;
  bool ranger_untamed_;
  bool revenant_vindicator_;
  bool thief_specter_;
  bool warrior_bladesworn_;
  bool elementalist_air_;
  bool elementalist_arcane_;
  bool elementalist_earth_;
  bool elementalist_fire_;
  bool elementalist_water_;
  bool engineer_alchemy_;
  bool engineer_explosives_;
  bool engineer_firearms_;
  bool engineer_inventions_;
  bool engineer_tools_;
  bool guardian_honor_;
  bool guardian_radiance_;
  bool guardian_valor_;
  bool guardian_virtues_;
  bool guardian_zeal_;
  bool mesmer_chaos_;
  bool mesmer_domination_;
  bool mesmer_dueling_;
  bool mesmer_illusions_;
  bool mesmer_inspiration_;
  bool necromancer_blood_magic_;
  bool necromancer_curses_;
  bool necromancer_death_magic_;
  bool necromancer_soul_reaping_;
  bool necromancer_spite_;
  bool ranger_beastmastery_;
  bool ranger_marksmanship_;
  bool ranger_nature_magic_;
  bool ranger_skirmishing_;
  bool ranger_wilderness_survival_;
  bool revenant_corruption_;
  bool revenant_devastation_;
  bool revenant_invocation_;
  bool revenant_retribution_;
  bool revenant_salvation_;
  bool thief_acrobatics_;
  bool thief_critical_strikes_;
  bool thief_deadly_arts_;
  bool thief_shadow_arts_;
  bool thief_trickery_;
  bool warrior_arms_;
  bool warrior_defense_;
  bool warrior_discipline_;
  bool warrior_strength_;
  bool warrior_tactics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class SpeciesFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SpeciesFilter) */ {
 public:
  inline SpeciesFilter() : SpeciesFilter(nullptr) {};
  virtual ~SpeciesFilter();

  SpeciesFilter(const SpeciesFilter& from);
  SpeciesFilter(SpeciesFilter&& from) noexcept
    : SpeciesFilter() {
    *this = ::std::move(from);
  }

  inline SpeciesFilter& operator=(const SpeciesFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeciesFilter& operator=(SpeciesFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeciesFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeciesFilter* internal_default_instance() {
    return reinterpret_cast<const SpeciesFilter*>(
               &_SpeciesFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SpeciesFilter& a, SpeciesFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeciesFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeciesFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeciesFilter* New() const final {
    return CreateMaybeMessage<SpeciesFilter>(nullptr);
  }

  SpeciesFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeciesFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeciesFilter& from);
  void MergeFrom(const SpeciesFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeciesFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SpeciesFilter";
  }
  protected:
  explicit SpeciesFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsuraFieldNumber = 1,
    kCharrFieldNumber = 2,
    kHumanFieldNumber = 3,
    kNornFieldNumber = 4,
    kSylvariFieldNumber = 5,
  };
  // bool asura = 1;
  void clear_asura();
  bool asura() const;
  void set_asura(bool value);
  private:
  bool _internal_asura() const;
  void _internal_set_asura(bool value);
  public:

  // bool charr = 2;
  void clear_charr();
  bool charr() const;
  void set_charr(bool value);
  private:
  bool _internal_charr() const;
  void _internal_set_charr(bool value);
  public:

  // bool human = 3;
  void clear_human();
  bool human() const;
  void set_human(bool value);
  private:
  bool _internal_human() const;
  void _internal_set_human(bool value);
  public:

  // bool norn = 4;
  void clear_norn();
  bool norn() const;
  void set_norn(bool value);
  private:
  bool _internal_norn() const;
  void _internal_set_norn(bool value);
  public:

  // bool sylvari = 5;
  void clear_sylvari();
  bool sylvari() const;
  void set_sylvari(bool value);
  private:
  bool _internal_sylvari() const;
  void _internal_set_sylvari(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SpeciesFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool asura_;
  bool charr_;
  bool human_;
  bool norn_;
  bool sylvari_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// -------------------------------------------------------------------

class TrailData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrailData) */ {
 public:
  inline TrailData() : TrailData(nullptr) {};
  virtual ~TrailData();

  TrailData(const TrailData& from);
  TrailData(TrailData&& from) noexcept
    : TrailData() {
    *this = ::std::move(from);
  }

  inline TrailData& operator=(const TrailData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrailData& operator=(TrailData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrailData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrailData* internal_default_instance() {
    return reinterpret_cast<const TrailData*>(
               &_TrailData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TrailData& a, TrailData& b) {
    a.Swap(&b);
  }
  inline void Swap(TrailData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrailData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrailData* New() const final {
    return CreateMaybeMessage<TrailData>(nullptr);
  }

  TrailData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrailData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrailData& from);
  void MergeFrom(const TrailData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrailData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrailData";
  }
  protected:
  explicit TrailData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
    return ::descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrailDataFieldNumber = 1,
  };
  // string trail_data = 1;
  void clear_trail_data();
  const std::string& trail_data() const;
  void set_trail_data(const std::string& value);
  void set_trail_data(std::string&& value);
  void set_trail_data(const char* value);
  void set_trail_data(const char* value, size_t size);
  std::string* mutable_trail_data();
  std::string* release_trail_data();
  void set_allocated_trail_data(std::string* trail_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trail_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trail_data(
      std::string* trail_data);
  private:
  const std::string& _internal_trail_data() const;
  void _internal_set_trail_data(const std::string& value);
  std::string* _internal_mutable_trail_data();
  public:

  // @@protoc_insertion_point(class_scope:TrailData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trail_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Category

// bool default_visibility = 1;
inline void Category::clear_default_visibility() {
  default_visibility_ = false;
}
inline bool Category::_internal_default_visibility() const {
  return default_visibility_;
}
inline bool Category::default_visibility() const {
  // @@protoc_insertion_point(field_get:Category.default_visibility)
  return _internal_default_visibility();
}
inline void Category::_internal_set_default_visibility(bool value) {
  
  default_visibility_ = value;
}
inline void Category::set_default_visibility(bool value) {
  _internal_set_default_visibility(value);
  // @@protoc_insertion_point(field_set:Category.default_visibility)
}

// string display_name = 2;
inline void Category::clear_display_name() {
  display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Category::display_name() const {
  // @@protoc_insertion_point(field_get:Category.display_name)
  return _internal_display_name();
}
inline void Category::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:Category.display_name)
}
inline std::string* Category::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:Category.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& Category::_internal_display_name() const {
  return display_name_.Get();
}
inline void Category::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Category::set_display_name(std::string&& value) {
  
  display_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Category.display_name)
}
inline void Category::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Category.display_name)
}
inline void Category::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Category.display_name)
}
inline std::string* Category::_internal_mutable_display_name() {
  
  return display_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Category::release_display_name() {
  // @@protoc_insertion_point(field_release:Category.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Category.display_name)
}
inline std::string* Category::unsafe_arena_release_display_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Category.display_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return display_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Category::unsafe_arena_set_allocated_display_name(
    std::string* display_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      display_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Category.display_name)
}

// bool is_separator = 3;
inline void Category::clear_is_separator() {
  is_separator_ = false;
}
inline bool Category::_internal_is_separator() const {
  return is_separator_;
}
inline bool Category::is_separator() const {
  // @@protoc_insertion_point(field_get:Category.is_separator)
  return _internal_is_separator();
}
inline void Category::_internal_set_is_separator(bool value) {
  
  is_separator_ = value;
}
inline void Category::set_is_separator(bool value) {
  _internal_set_is_separator(value);
  // @@protoc_insertion_point(field_set:Category.is_separator)
}

// string name = 4;
inline void Category::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Category::name() const {
  // @@protoc_insertion_point(field_get:Category.name)
  return _internal_name();
}
inline void Category::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Category.name)
}
inline std::string* Category::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Category.name)
  return _internal_mutable_name();
}
inline const std::string& Category::_internal_name() const {
  return name_.Get();
}
inline void Category::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Category::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Category.name)
}
inline void Category::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Category.name)
}
inline void Category::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Category.name)
}
inline std::string* Category::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Category::release_name() {
  // @@protoc_insertion_point(field_release:Category.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Category.name)
}
inline std::string* Category::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Category.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Category::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Category.name)
}

// string tooltip_name = 5;
inline void Category::clear_tooltip_name() {
  tooltip_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Category::tooltip_name() const {
  // @@protoc_insertion_point(field_get:Category.tooltip_name)
  return _internal_tooltip_name();
}
inline void Category::set_tooltip_name(const std::string& value) {
  _internal_set_tooltip_name(value);
  // @@protoc_insertion_point(field_set:Category.tooltip_name)
}
inline std::string* Category::mutable_tooltip_name() {
  // @@protoc_insertion_point(field_mutable:Category.tooltip_name)
  return _internal_mutable_tooltip_name();
}
inline const std::string& Category::_internal_tooltip_name() const {
  return tooltip_name_.Get();
}
inline void Category::_internal_set_tooltip_name(const std::string& value) {
  
  tooltip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Category::set_tooltip_name(std::string&& value) {
  
  tooltip_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Category.tooltip_name)
}
inline void Category::set_tooltip_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tooltip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Category.tooltip_name)
}
inline void Category::set_tooltip_name(const char* value,
    size_t size) {
  
  tooltip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Category.tooltip_name)
}
inline std::string* Category::_internal_mutable_tooltip_name() {
  
  return tooltip_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Category::release_tooltip_name() {
  // @@protoc_insertion_point(field_release:Category.tooltip_name)
  return tooltip_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_tooltip_name(std::string* tooltip_name) {
  if (tooltip_name != nullptr) {
    
  } else {
    
  }
  tooltip_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tooltip_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Category.tooltip_name)
}
inline std::string* Category::unsafe_arena_release_tooltip_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Category.tooltip_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tooltip_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Category::unsafe_arena_set_allocated_tooltip_name(
    std::string* tooltip_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tooltip_name != nullptr) {
    
  } else {
    
  }
  tooltip_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tooltip_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Category.tooltip_name)
}

// map<string, .Category> children = 6;
inline int Category::_internal_children_size() const {
  return children_.size();
}
inline int Category::children_size() const {
  return _internal_children_size();
}
inline void Category::clear_children() {
  children_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >&
Category::_internal_children() const {
  return children_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >&
Category::children() const {
  // @@protoc_insertion_point(field_map:Category.children)
  return _internal_children();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >*
Category::_internal_mutable_children() {
  return children_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >*
Category::mutable_children() {
  // @@protoc_insertion_point(field_mutable_map:Category.children)
  return _internal_mutable_children();
}

// -------------------------------------------------------------------

// Icon

// .Category category = 1;
inline bool Icon::_internal_has_category() const {
  return this != internal_default_instance() && category_ != nullptr;
}
inline bool Icon::has_category() const {
  return _internal_has_category();
}
inline void Icon::clear_category() {
  if (GetArena() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
}
inline const ::Category& Icon::_internal_category() const {
  const ::Category* p = category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Category*>(
      &::_Category_default_instance_);
}
inline const ::Category& Icon::category() const {
  // @@protoc_insertion_point(field_get:Icon.category)
  return _internal_category();
}
inline void Icon::unsafe_arena_set_allocated_category(
    ::Category* category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_);
  }
  category_ = category;
  if (category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Icon.category)
}
inline ::Category* Icon::release_category() {
  auto temp = unsafe_arena_release_category();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Category* Icon::unsafe_arena_release_category() {
  // @@protoc_insertion_point(field_release:Icon.category)
  
  ::Category* temp = category_;
  category_ = nullptr;
  return temp;
}
inline ::Category* Icon::_internal_mutable_category() {
  
  if (category_ == nullptr) {
    auto* p = CreateMaybeMessage<::Category>(GetArena());
    category_ = p;
  }
  return category_;
}
inline ::Category* Icon::mutable_category() {
  // @@protoc_insertion_point(field_mutable:Icon.category)
  return _internal_mutable_category();
}
inline void Icon::set_allocated_category(::Category* category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete category_;
  }
  if (category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(category);
    if (message_arena != submessage_arena) {
      category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    
  } else {
    
  }
  category_ = category;
  // @@protoc_insertion_point(field_set_allocated:Icon.category)
}

// .Texture texture = 2;
inline bool Icon::_internal_has_texture() const {
  return this != internal_default_instance() && texture_ != nullptr;
}
inline bool Icon::has_texture() const {
  return _internal_has_texture();
}
inline void Icon::clear_texture() {
  if (GetArena() == nullptr && texture_ != nullptr) {
    delete texture_;
  }
  texture_ = nullptr;
}
inline const ::Texture& Icon::_internal_texture() const {
  const ::Texture* p = texture_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Texture*>(
      &::_Texture_default_instance_);
}
inline const ::Texture& Icon::texture() const {
  // @@protoc_insertion_point(field_get:Icon.texture)
  return _internal_texture();
}
inline void Icon::unsafe_arena_set_allocated_texture(
    ::Texture* texture) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texture_);
  }
  texture_ = texture;
  if (texture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Icon.texture)
}
inline ::Texture* Icon::release_texture() {
  auto temp = unsafe_arena_release_texture();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Texture* Icon::unsafe_arena_release_texture() {
  // @@protoc_insertion_point(field_release:Icon.texture)
  
  ::Texture* temp = texture_;
  texture_ = nullptr;
  return temp;
}
inline ::Texture* Icon::_internal_mutable_texture() {
  
  if (texture_ == nullptr) {
    auto* p = CreateMaybeMessage<::Texture>(GetArena());
    texture_ = p;
  }
  return texture_;
}
inline ::Texture* Icon::mutable_texture() {
  // @@protoc_insertion_point(field_mutable:Icon.texture)
  return _internal_mutable_texture();
}
inline void Icon::set_allocated_texture(::Texture* texture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete texture_;
  }
  if (texture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(texture);
    if (message_arena != submessage_arena) {
      texture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture, submessage_arena);
    }
    
  } else {
    
  }
  texture_ = texture;
  // @@protoc_insertion_point(field_set_allocated:Icon.texture)
}

// .GUID guid = 3;
inline bool Icon::_internal_has_guid() const {
  return this != internal_default_instance() && guid_ != nullptr;
}
inline bool Icon::has_guid() const {
  return _internal_has_guid();
}
inline void Icon::clear_guid() {
  if (GetArena() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
}
inline const ::GUID& Icon::_internal_guid() const {
  const ::GUID* p = guid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GUID*>(
      &::_GUID_default_instance_);
}
inline const ::GUID& Icon::guid() const {
  // @@protoc_insertion_point(field_get:Icon.guid)
  return _internal_guid();
}
inline void Icon::unsafe_arena_set_allocated_guid(
    ::GUID* guid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guid_);
  }
  guid_ = guid;
  if (guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Icon.guid)
}
inline ::GUID* Icon::release_guid() {
  auto temp = unsafe_arena_release_guid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GUID* Icon::unsafe_arena_release_guid() {
  // @@protoc_insertion_point(field_release:Icon.guid)
  
  ::GUID* temp = guid_;
  guid_ = nullptr;
  return temp;
}
inline ::GUID* Icon::_internal_mutable_guid() {
  
  if (guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::GUID>(GetArena());
    guid_ = p;
  }
  return guid_;
}
inline ::GUID* Icon::mutable_guid() {
  // @@protoc_insertion_point(field_mutable:Icon.guid)
  return _internal_mutable_guid();
}
inline void Icon::set_allocated_guid(::GUID* guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guid_;
  }
  if (guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guid);
    if (message_arena != submessage_arena) {
      guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guid, submessage_arena);
    }
    
  } else {
    
  }
  guid_ = guid;
  // @@protoc_insertion_point(field_set_allocated:Icon.guid)
}

// int32 map_id = 4;
inline void Icon::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::map_id() const {
  // @@protoc_insertion_point(field_get:Icon.map_id)
  return _internal_map_id();
}
inline void Icon::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void Icon::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:Icon.map_id)
}

// float distance_fade_end = 5;
inline void Icon::clear_distance_fade_end() {
  distance_fade_end_ = 0;
}
inline float Icon::_internal_distance_fade_end() const {
  return distance_fade_end_;
}
inline float Icon::distance_fade_end() const {
  // @@protoc_insertion_point(field_get:Icon.distance_fade_end)
  return _internal_distance_fade_end();
}
inline void Icon::_internal_set_distance_fade_end(float value) {
  
  distance_fade_end_ = value;
}
inline void Icon::set_distance_fade_end(float value) {
  _internal_set_distance_fade_end(value);
  // @@protoc_insertion_point(field_set:Icon.distance_fade_end)
}

// float distance_fade_start = 6;
inline void Icon::clear_distance_fade_start() {
  distance_fade_start_ = 0;
}
inline float Icon::_internal_distance_fade_start() const {
  return distance_fade_start_;
}
inline float Icon::distance_fade_start() const {
  // @@protoc_insertion_point(field_get:Icon.distance_fade_start)
  return _internal_distance_fade_start();
}
inline void Icon::_internal_set_distance_fade_start(float value) {
  
  distance_fade_start_ = value;
}
inline void Icon::set_distance_fade_start(float value) {
  _internal_set_distance_fade_start(value);
  // @@protoc_insertion_point(field_set:Icon.distance_fade_start)
}

// float height_offset = 7;
inline void Icon::clear_height_offset() {
  height_offset_ = 0;
}
inline float Icon::_internal_height_offset() const {
  return height_offset_;
}
inline float Icon::height_offset() const {
  // @@protoc_insertion_point(field_get:Icon.height_offset)
  return _internal_height_offset();
}
inline void Icon::_internal_set_height_offset(float value) {
  
  height_offset_ = value;
}
inline void Icon::set_height_offset(float value) {
  _internal_set_height_offset(value);
  // @@protoc_insertion_point(field_set:Icon.height_offset)
}

// .Position position = 8;
inline bool Icon::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Icon::has_position() const {
  return _internal_has_position();
}
inline void Icon::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Position& Icon::_internal_position() const {
  const ::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Position*>(
      &::_Position_default_instance_);
}
inline const ::Position& Icon::position() const {
  // @@protoc_insertion_point(field_get:Icon.position)
  return _internal_position();
}
inline void Icon::unsafe_arena_set_allocated_position(
    ::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Icon.position)
}
inline ::Position* Icon::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Position* Icon::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Icon.position)
  
  ::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Position* Icon::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::Position* Icon::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Icon.position)
  return _internal_mutable_position();
}
inline void Icon::set_allocated_position(::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Icon.position)
}

// .ResetBehavior reset_behavior = 9;
inline void Icon::clear_reset_behavior() {
  reset_behavior_ = 0;
}
inline ::ResetBehavior Icon::_internal_reset_behavior() const {
  return static_cast< ::ResetBehavior >(reset_behavior_);
}
inline ::ResetBehavior Icon::reset_behavior() const {
  // @@protoc_insertion_point(field_get:Icon.reset_behavior)
  return _internal_reset_behavior();
}
inline void Icon::_internal_set_reset_behavior(::ResetBehavior value) {
  
  reset_behavior_ = value;
}
inline void Icon::set_reset_behavior(::ResetBehavior value) {
  _internal_set_reset_behavior(value);
  // @@protoc_insertion_point(field_set:Icon.reset_behavior)
}

// .Trigger trigger = 10;
inline bool Icon::_internal_has_trigger() const {
  return this != internal_default_instance() && trigger_ != nullptr;
}
inline bool Icon::has_trigger() const {
  return _internal_has_trigger();
}
inline void Icon::clear_trigger() {
  if (GetArena() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
}
inline const ::Trigger& Icon::_internal_trigger() const {
  const ::Trigger* p = trigger_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Trigger*>(
      &::_Trigger_default_instance_);
}
inline const ::Trigger& Icon::trigger() const {
  // @@protoc_insertion_point(field_get:Icon.trigger)
  return _internal_trigger();
}
inline void Icon::unsafe_arena_set_allocated_trigger(
    ::Trigger* trigger) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_);
  }
  trigger_ = trigger;
  if (trigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Icon.trigger)
}
inline ::Trigger* Icon::release_trigger() {
  auto temp = unsafe_arena_release_trigger();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Trigger* Icon::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:Icon.trigger)
  
  ::Trigger* temp = trigger_;
  trigger_ = nullptr;
  return temp;
}
inline ::Trigger* Icon::_internal_mutable_trigger() {
  
  if (trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::Trigger>(GetArena());
    trigger_ = p;
  }
  return trigger_;
}
inline ::Trigger* Icon::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable:Icon.trigger)
  return _internal_mutable_trigger();
}
inline void Icon::set_allocated_trigger(::Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trigger_;
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trigger);
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:Icon.trigger)
}

// fixed32 achievement_bit = 16;
inline void Icon::clear_achievement_bit() {
  achievement_bit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Icon::_internal_achievement_bit() const {
  return achievement_bit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Icon::achievement_bit() const {
  // @@protoc_insertion_point(field_get:Icon.achievement_bit)
  return _internal_achievement_bit();
}
inline void Icon::_internal_set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  achievement_bit_ = value;
}
inline void Icon::set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_achievement_bit(value);
  // @@protoc_insertion_point(field_set:Icon.achievement_bit)
}

// int32 achievement_id = 17;
inline void Icon::clear_achievement_id() {
  achievement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_achievement_id() const {
  return achievement_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::achievement_id() const {
  // @@protoc_insertion_point(field_get:Icon.achievement_id)
  return _internal_achievement_id();
}
inline void Icon::_internal_set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  achievement_id_ = value;
}
inline void Icon::set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_achievement_id(value);
  // @@protoc_insertion_point(field_set:Icon.achievement_id)
}

// float alpha = 18;
inline void Icon::clear_alpha() {
  alpha_ = 0;
}
inline float Icon::_internal_alpha() const {
  return alpha_;
}
inline float Icon::alpha() const {
  // @@protoc_insertion_point(field_get:Icon.alpha)
  return _internal_alpha();
}
inline void Icon::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void Icon::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:Icon.alpha)
}

// bool can_fade = 19;
inline void Icon::clear_can_fade() {
  can_fade_ = false;
}
inline bool Icon::_internal_can_fade() const {
  return can_fade_;
}
inline bool Icon::can_fade() const {
  // @@protoc_insertion_point(field_get:Icon.can_fade)
  return _internal_can_fade();
}
inline void Icon::_internal_set_can_fade(bool value) {
  
  can_fade_ = value;
}
inline void Icon::set_can_fade(bool value) {
  _internal_set_can_fade(value);
  // @@protoc_insertion_point(field_set:Icon.can_fade)
}

// int32 minimum_size_on_screen = 20;
inline void Icon::clear_minimum_size_on_screen() {
  minimum_size_on_screen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_minimum_size_on_screen() const {
  return minimum_size_on_screen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::minimum_size_on_screen() const {
  // @@protoc_insertion_point(field_get:Icon.minimum_size_on_screen)
  return _internal_minimum_size_on_screen();
}
inline void Icon::_internal_set_minimum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minimum_size_on_screen_ = value;
}
inline void Icon::set_minimum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minimum_size_on_screen(value);
  // @@protoc_insertion_point(field_set:Icon.minimum_size_on_screen)
}

// int32 map_display_size = 21;
inline void Icon::clear_map_display_size() {
  map_display_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_map_display_size() const {
  return map_display_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::map_display_size() const {
  // @@protoc_insertion_point(field_get:Icon.map_display_size)
  return _internal_map_display_size();
}
inline void Icon::_internal_set_map_display_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_display_size_ = value;
}
inline void Icon::set_map_display_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_display_size(value);
  // @@protoc_insertion_point(field_set:Icon.map_display_size)
}

// int32 maximum_size_on_screen = 22;
inline void Icon::clear_maximum_size_on_screen() {
  maximum_size_on_screen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::_internal_maximum_size_on_screen() const {
  return maximum_size_on_screen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Icon::maximum_size_on_screen() const {
  // @@protoc_insertion_point(field_get:Icon.maximum_size_on_screen)
  return _internal_maximum_size_on_screen();
}
inline void Icon::_internal_set_maximum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maximum_size_on_screen_ = value;
}
inline void Icon::set_maximum_size_on_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximum_size_on_screen(value);
  // @@protoc_insertion_point(field_set:Icon.maximum_size_on_screen)
}

// bool scale_on_map_with_zoom = 23;
inline void Icon::clear_scale_on_map_with_zoom() {
  scale_on_map_with_zoom_ = false;
}
inline bool Icon::_internal_scale_on_map_with_zoom() const {
  return scale_on_map_with_zoom_;
}
inline bool Icon::scale_on_map_with_zoom() const {
  // @@protoc_insertion_point(field_get:Icon.scale_on_map_with_zoom)
  return _internal_scale_on_map_with_zoom();
}
inline void Icon::_internal_set_scale_on_map_with_zoom(bool value) {
  
  scale_on_map_with_zoom_ = value;
}
inline void Icon::set_scale_on_map_with_zoom(bool value) {
  _internal_set_scale_on_map_with_zoom(value);
  // @@protoc_insertion_point(field_set:Icon.scale_on_map_with_zoom)
}

// string tip_description = 24;
inline void Icon::clear_tip_description() {
  tip_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon::tip_description() const {
  // @@protoc_insertion_point(field_get:Icon.tip_description)
  return _internal_tip_description();
}
inline void Icon::set_tip_description(const std::string& value) {
  _internal_set_tip_description(value);
  // @@protoc_insertion_point(field_set:Icon.tip_description)
}
inline std::string* Icon::mutable_tip_description() {
  // @@protoc_insertion_point(field_mutable:Icon.tip_description)
  return _internal_mutable_tip_description();
}
inline const std::string& Icon::_internal_tip_description() const {
  return tip_description_.Get();
}
inline void Icon::_internal_set_tip_description(const std::string& value) {
  
  tip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon::set_tip_description(std::string&& value) {
  
  tip_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Icon.tip_description)
}
inline void Icon::set_tip_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Icon.tip_description)
}
inline void Icon::set_tip_description(const char* value,
    size_t size) {
  
  tip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Icon.tip_description)
}
inline std::string* Icon::_internal_mutable_tip_description() {
  
  return tip_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon::release_tip_description() {
  // @@protoc_insertion_point(field_release:Icon.tip_description)
  return tip_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon::set_allocated_tip_description(std::string* tip_description) {
  if (tip_description != nullptr) {
    
  } else {
    
  }
  tip_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tip_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Icon.tip_description)
}
inline std::string* Icon::unsafe_arena_release_tip_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Icon.tip_description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tip_description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon::unsafe_arena_set_allocated_tip_description(
    std::string* tip_description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tip_description != nullptr) {
    
  } else {
    
  }
  tip_description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tip_description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Icon.tip_description)
}

// string tip_name = 25;
inline void Icon::clear_tip_name() {
  tip_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon::tip_name() const {
  // @@protoc_insertion_point(field_get:Icon.tip_name)
  return _internal_tip_name();
}
inline void Icon::set_tip_name(const std::string& value) {
  _internal_set_tip_name(value);
  // @@protoc_insertion_point(field_set:Icon.tip_name)
}
inline std::string* Icon::mutable_tip_name() {
  // @@protoc_insertion_point(field_mutable:Icon.tip_name)
  return _internal_mutable_tip_name();
}
inline const std::string& Icon::_internal_tip_name() const {
  return tip_name_.Get();
}
inline void Icon::_internal_set_tip_name(const std::string& value) {
  
  tip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon::set_tip_name(std::string&& value) {
  
  tip_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Icon.tip_name)
}
inline void Icon::set_tip_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Icon.tip_name)
}
inline void Icon::set_tip_name(const char* value,
    size_t size) {
  
  tip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Icon.tip_name)
}
inline std::string* Icon::_internal_mutable_tip_name() {
  
  return tip_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon::release_tip_name() {
  // @@protoc_insertion_point(field_release:Icon.tip_name)
  return tip_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon::set_allocated_tip_name(std::string* tip_name) {
  if (tip_name != nullptr) {
    
  } else {
    
  }
  tip_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tip_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Icon.tip_name)
}
inline std::string* Icon::unsafe_arena_release_tip_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Icon.tip_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tip_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon::unsafe_arena_set_allocated_tip_name(
    std::string* tip_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tip_name != nullptr) {
    
  } else {
    
  }
  tip_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tip_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Icon.tip_name)
}

// float __tentative__scale = 2048;
inline void Icon::clear___tentative__scale() {
  __tentative__scale_ = 0;
}
inline float Icon::_internal___tentative__scale() const {
  return __tentative__scale_;
}
inline float Icon::__tentative__scale() const {
  // @@protoc_insertion_point(field_get:Icon.__tentative__scale)
  return _internal___tentative__scale();
}
inline void Icon::_internal_set___tentative__scale(float value) {
  
  __tentative__scale_ = value;
}
inline void Icon::set___tentative__scale(float value) {
  _internal_set___tentative__scale(value);
  // @@protoc_insertion_point(field_set:Icon.__tentative__scale)
}

// bool __tentative__render_ingame = 2049;
inline void Icon::clear___tentative__render_ingame() {
  __tentative__render_ingame_ = false;
}
inline bool Icon::_internal___tentative__render_ingame() const {
  return __tentative__render_ingame_;
}
inline bool Icon::__tentative__render_ingame() const {
  // @@protoc_insertion_point(field_get:Icon.__tentative__render_ingame)
  return _internal___tentative__render_ingame();
}
inline void Icon::_internal_set___tentative__render_ingame(bool value) {
  
  __tentative__render_ingame_ = value;
}
inline void Icon::set___tentative__render_ingame(bool value) {
  _internal_set___tentative__render_ingame(value);
  // @@protoc_insertion_point(field_set:Icon.__tentative__render_ingame)
}

// bool __tentative__render_on_map = 2050;
inline void Icon::clear___tentative__render_on_map() {
  __tentative__render_on_map_ = false;
}
inline bool Icon::_internal___tentative__render_on_map() const {
  return __tentative__render_on_map_;
}
inline bool Icon::__tentative__render_on_map() const {
  // @@protoc_insertion_point(field_get:Icon.__tentative__render_on_map)
  return _internal___tentative__render_on_map();
}
inline void Icon::_internal_set___tentative__render_on_map(bool value) {
  
  __tentative__render_on_map_ = value;
}
inline void Icon::set___tentative__render_on_map(bool value) {
  _internal_set___tentative__render_on_map(value);
  // @@protoc_insertion_point(field_set:Icon.__tentative__render_on_map)
}

// bool __tentative__render_on_minimap = 2051;
inline void Icon::clear___tentative__render_on_minimap() {
  __tentative__render_on_minimap_ = false;
}
inline bool Icon::_internal___tentative__render_on_minimap() const {
  return __tentative__render_on_minimap_;
}
inline bool Icon::__tentative__render_on_minimap() const {
  // @@protoc_insertion_point(field_get:Icon.__tentative__render_on_minimap)
  return _internal___tentative__render_on_minimap();
}
inline void Icon::_internal_set___tentative__render_on_minimap(bool value) {
  
  __tentative__render_on_minimap_ = value;
}
inline void Icon::set___tentative__render_on_minimap(bool value) {
  _internal_set___tentative__render_on_minimap(value);
  // @@protoc_insertion_point(field_set:Icon.__tentative__render_on_minimap)
}

// string bhdraft__schedule = 2052;
inline void Icon::clear_bhdraft__schedule() {
  bhdraft__schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Icon::bhdraft__schedule() const {
  // @@protoc_insertion_point(field_get:Icon.bhdraft__schedule)
  return _internal_bhdraft__schedule();
}
inline void Icon::set_bhdraft__schedule(const std::string& value) {
  _internal_set_bhdraft__schedule(value);
  // @@protoc_insertion_point(field_set:Icon.bhdraft__schedule)
}
inline std::string* Icon::mutable_bhdraft__schedule() {
  // @@protoc_insertion_point(field_mutable:Icon.bhdraft__schedule)
  return _internal_mutable_bhdraft__schedule();
}
inline const std::string& Icon::_internal_bhdraft__schedule() const {
  return bhdraft__schedule_.Get();
}
inline void Icon::_internal_set_bhdraft__schedule(const std::string& value) {
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon::set_bhdraft__schedule(std::string&& value) {
  
  bhdraft__schedule_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Icon.bhdraft__schedule)
}
inline void Icon::set_bhdraft__schedule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Icon.bhdraft__schedule)
}
inline void Icon::set_bhdraft__schedule(const char* value,
    size_t size) {
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Icon.bhdraft__schedule)
}
inline std::string* Icon::_internal_mutable_bhdraft__schedule() {
  
  return bhdraft__schedule_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon::release_bhdraft__schedule() {
  // @@protoc_insertion_point(field_release:Icon.bhdraft__schedule)
  return bhdraft__schedule_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon::set_allocated_bhdraft__schedule(std::string* bhdraft__schedule) {
  if (bhdraft__schedule != nullptr) {
    
  } else {
    
  }
  bhdraft__schedule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bhdraft__schedule,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Icon.bhdraft__schedule)
}
inline std::string* Icon::unsafe_arena_release_bhdraft__schedule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Icon.bhdraft__schedule)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bhdraft__schedule_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Icon::unsafe_arena_set_allocated_bhdraft__schedule(
    std::string* bhdraft__schedule) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bhdraft__schedule != nullptr) {
    
  } else {
    
  }
  bhdraft__schedule_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bhdraft__schedule, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Icon.bhdraft__schedule)
}

// float bhdraft__schedule_duration = 2053;
inline void Icon::clear_bhdraft__schedule_duration() {
  bhdraft__schedule_duration_ = 0;
}
inline float Icon::_internal_bhdraft__schedule_duration() const {
  return bhdraft__schedule_duration_;
}
inline float Icon::bhdraft__schedule_duration() const {
  // @@protoc_insertion_point(field_get:Icon.bhdraft__schedule_duration)
  return _internal_bhdraft__schedule_duration();
}
inline void Icon::_internal_set_bhdraft__schedule_duration(float value) {
  
  bhdraft__schedule_duration_ = value;
}
inline void Icon::set_bhdraft__schedule_duration(float value) {
  _internal_set_bhdraft__schedule_duration(value);
  // @@protoc_insertion_point(field_set:Icon.bhdraft__schedule_duration)
}

// -------------------------------------------------------------------

// Trail

// .Category category = 1;
inline bool Trail::_internal_has_category() const {
  return this != internal_default_instance() && category_ != nullptr;
}
inline bool Trail::has_category() const {
  return _internal_has_category();
}
inline void Trail::clear_category() {
  if (GetArena() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
}
inline const ::Category& Trail::_internal_category() const {
  const ::Category* p = category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Category*>(
      &::_Category_default_instance_);
}
inline const ::Category& Trail::category() const {
  // @@protoc_insertion_point(field_get:Trail.category)
  return _internal_category();
}
inline void Trail::unsafe_arena_set_allocated_category(
    ::Category* category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_);
  }
  category_ = category;
  if (category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.category)
}
inline ::Category* Trail::release_category() {
  auto temp = unsafe_arena_release_category();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Category* Trail::unsafe_arena_release_category() {
  // @@protoc_insertion_point(field_release:Trail.category)
  
  ::Category* temp = category_;
  category_ = nullptr;
  return temp;
}
inline ::Category* Trail::_internal_mutable_category() {
  
  if (category_ == nullptr) {
    auto* p = CreateMaybeMessage<::Category>(GetArena());
    category_ = p;
  }
  return category_;
}
inline ::Category* Trail::mutable_category() {
  // @@protoc_insertion_point(field_mutable:Trail.category)
  return _internal_mutable_category();
}
inline void Trail::set_allocated_category(::Category* category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete category_;
  }
  if (category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(category);
    if (message_arena != submessage_arena) {
      category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    
  } else {
    
  }
  category_ = category;
  // @@protoc_insertion_point(field_set_allocated:Trail.category)
}

// .Texture texture = 2;
inline bool Trail::_internal_has_texture() const {
  return this != internal_default_instance() && texture_ != nullptr;
}
inline bool Trail::has_texture() const {
  return _internal_has_texture();
}
inline void Trail::clear_texture() {
  if (GetArena() == nullptr && texture_ != nullptr) {
    delete texture_;
  }
  texture_ = nullptr;
}
inline const ::Texture& Trail::_internal_texture() const {
  const ::Texture* p = texture_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Texture*>(
      &::_Texture_default_instance_);
}
inline const ::Texture& Trail::texture() const {
  // @@protoc_insertion_point(field_get:Trail.texture)
  return _internal_texture();
}
inline void Trail::unsafe_arena_set_allocated_texture(
    ::Texture* texture) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texture_);
  }
  texture_ = texture;
  if (texture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.texture)
}
inline ::Texture* Trail::release_texture() {
  auto temp = unsafe_arena_release_texture();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Texture* Trail::unsafe_arena_release_texture() {
  // @@protoc_insertion_point(field_release:Trail.texture)
  
  ::Texture* temp = texture_;
  texture_ = nullptr;
  return temp;
}
inline ::Texture* Trail::_internal_mutable_texture() {
  
  if (texture_ == nullptr) {
    auto* p = CreateMaybeMessage<::Texture>(GetArena());
    texture_ = p;
  }
  return texture_;
}
inline ::Texture* Trail::mutable_texture() {
  // @@protoc_insertion_point(field_mutable:Trail.texture)
  return _internal_mutable_texture();
}
inline void Trail::set_allocated_texture(::Texture* texture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete texture_;
  }
  if (texture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(texture);
    if (message_arena != submessage_arena) {
      texture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture, submessage_arena);
    }
    
  } else {
    
  }
  texture_ = texture;
  // @@protoc_insertion_point(field_set_allocated:Trail.texture)
}

// .GUID guid = 3;
inline bool Trail::_internal_has_guid() const {
  return this != internal_default_instance() && guid_ != nullptr;
}
inline bool Trail::has_guid() const {
  return _internal_has_guid();
}
inline void Trail::clear_guid() {
  if (GetArena() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
}
inline const ::GUID& Trail::_internal_guid() const {
  const ::GUID* p = guid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GUID*>(
      &::_GUID_default_instance_);
}
inline const ::GUID& Trail::guid() const {
  // @@protoc_insertion_point(field_get:Trail.guid)
  return _internal_guid();
}
inline void Trail::unsafe_arena_set_allocated_guid(
    ::GUID* guid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guid_);
  }
  guid_ = guid;
  if (guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.guid)
}
inline ::GUID* Trail::release_guid() {
  auto temp = unsafe_arena_release_guid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GUID* Trail::unsafe_arena_release_guid() {
  // @@protoc_insertion_point(field_release:Trail.guid)
  
  ::GUID* temp = guid_;
  guid_ = nullptr;
  return temp;
}
inline ::GUID* Trail::_internal_mutable_guid() {
  
  if (guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::GUID>(GetArena());
    guid_ = p;
  }
  return guid_;
}
inline ::GUID* Trail::mutable_guid() {
  // @@protoc_insertion_point(field_mutable:Trail.guid)
  return _internal_mutable_guid();
}
inline void Trail::set_allocated_guid(::GUID* guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guid_;
  }
  if (guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guid);
    if (message_arena != submessage_arena) {
      guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guid, submessage_arena);
    }
    
  } else {
    
  }
  guid_ = guid;
  // @@protoc_insertion_point(field_set_allocated:Trail.guid)
}

// int32 map_id = 4;
inline void Trail::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail::map_id() const {
  // @@protoc_insertion_point(field_get:Trail.map_id)
  return _internal_map_id();
}
inline void Trail::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void Trail::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:Trail.map_id)
}

// float distance_fade_end = 5;
inline void Trail::clear_distance_fade_end() {
  distance_fade_end_ = 0;
}
inline float Trail::_internal_distance_fade_end() const {
  return distance_fade_end_;
}
inline float Trail::distance_fade_end() const {
  // @@protoc_insertion_point(field_get:Trail.distance_fade_end)
  return _internal_distance_fade_end();
}
inline void Trail::_internal_set_distance_fade_end(float value) {
  
  distance_fade_end_ = value;
}
inline void Trail::set_distance_fade_end(float value) {
  _internal_set_distance_fade_end(value);
  // @@protoc_insertion_point(field_set:Trail.distance_fade_end)
}

// float distance_fade_start = 6;
inline void Trail::clear_distance_fade_start() {
  distance_fade_start_ = 0;
}
inline float Trail::_internal_distance_fade_start() const {
  return distance_fade_start_;
}
inline float Trail::distance_fade_start() const {
  // @@protoc_insertion_point(field_get:Trail.distance_fade_start)
  return _internal_distance_fade_start();
}
inline void Trail::_internal_set_distance_fade_start(float value) {
  
  distance_fade_start_ = value;
}
inline void Trail::set_distance_fade_start(float value) {
  _internal_set_distance_fade_start(value);
  // @@protoc_insertion_point(field_set:Trail.distance_fade_start)
}

// .TrailData trail_data = 7;
inline bool Trail::_internal_has_trail_data() const {
  return this != internal_default_instance() && trail_data_ != nullptr;
}
inline bool Trail::has_trail_data() const {
  return _internal_has_trail_data();
}
inline void Trail::clear_trail_data() {
  if (GetArena() == nullptr && trail_data_ != nullptr) {
    delete trail_data_;
  }
  trail_data_ = nullptr;
}
inline const ::TrailData& Trail::_internal_trail_data() const {
  const ::TrailData* p = trail_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TrailData*>(
      &::_TrailData_default_instance_);
}
inline const ::TrailData& Trail::trail_data() const {
  // @@protoc_insertion_point(field_get:Trail.trail_data)
  return _internal_trail_data();
}
inline void Trail::unsafe_arena_set_allocated_trail_data(
    ::TrailData* trail_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trail_data_);
  }
  trail_data_ = trail_data;
  if (trail_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.trail_data)
}
inline ::TrailData* Trail::release_trail_data() {
  auto temp = unsafe_arena_release_trail_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TrailData* Trail::unsafe_arena_release_trail_data() {
  // @@protoc_insertion_point(field_release:Trail.trail_data)
  
  ::TrailData* temp = trail_data_;
  trail_data_ = nullptr;
  return temp;
}
inline ::TrailData* Trail::_internal_mutable_trail_data() {
  
  if (trail_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TrailData>(GetArena());
    trail_data_ = p;
  }
  return trail_data_;
}
inline ::TrailData* Trail::mutable_trail_data() {
  // @@protoc_insertion_point(field_mutable:Trail.trail_data)
  return _internal_mutable_trail_data();
}
inline void Trail::set_allocated_trail_data(::TrailData* trail_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trail_data_;
  }
  if (trail_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trail_data);
    if (message_arena != submessage_arena) {
      trail_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trail_data, submessage_arena);
    }
    
  } else {
    
  }
  trail_data_ = trail_data;
  // @@protoc_insertion_point(field_set_allocated:Trail.trail_data)
}

// float animation_speed = 8;
inline void Trail::clear_animation_speed() {
  animation_speed_ = 0;
}
inline float Trail::_internal_animation_speed() const {
  return animation_speed_;
}
inline float Trail::animation_speed() const {
  // @@protoc_insertion_point(field_get:Trail.animation_speed)
  return _internal_animation_speed();
}
inline void Trail::_internal_set_animation_speed(float value) {
  
  animation_speed_ = value;
}
inline void Trail::set_animation_speed(float value) {
  _internal_set_animation_speed(value);
  // @@protoc_insertion_point(field_set:Trail.animation_speed)
}

// .CullChirality cull_chirality = 9;
inline void Trail::clear_cull_chirality() {
  cull_chirality_ = 0;
}
inline ::CullChirality Trail::_internal_cull_chirality() const {
  return static_cast< ::CullChirality >(cull_chirality_);
}
inline ::CullChirality Trail::cull_chirality() const {
  // @@protoc_insertion_point(field_get:Trail.cull_chirality)
  return _internal_cull_chirality();
}
inline void Trail::_internal_set_cull_chirality(::CullChirality value) {
  
  cull_chirality_ = value;
}
inline void Trail::set_cull_chirality(::CullChirality value) {
  _internal_set_cull_chirality(value);
  // @@protoc_insertion_point(field_set:Trail.cull_chirality)
}

// fixed32 achievement_bit = 16;
inline void Trail::clear_achievement_bit() {
  achievement_bit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trail::_internal_achievement_bit() const {
  return achievement_bit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trail::achievement_bit() const {
  // @@protoc_insertion_point(field_get:Trail.achievement_bit)
  return _internal_achievement_bit();
}
inline void Trail::_internal_set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  achievement_bit_ = value;
}
inline void Trail::set_achievement_bit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_achievement_bit(value);
  // @@protoc_insertion_point(field_set:Trail.achievement_bit)
}

// int32 achievement_id = 17;
inline void Trail::clear_achievement_id() {
  achievement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail::_internal_achievement_id() const {
  return achievement_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trail::achievement_id() const {
  // @@protoc_insertion_point(field_get:Trail.achievement_id)
  return _internal_achievement_id();
}
inline void Trail::_internal_set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  achievement_id_ = value;
}
inline void Trail::set_achievement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_achievement_id(value);
  // @@protoc_insertion_point(field_set:Trail.achievement_id)
}

// float alpha = 18;
inline void Trail::clear_alpha() {
  alpha_ = 0;
}
inline float Trail::_internal_alpha() const {
  return alpha_;
}
inline float Trail::alpha() const {
  // @@protoc_insertion_point(field_get:Trail.alpha)
  return _internal_alpha();
}
inline void Trail::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void Trail::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:Trail.alpha)
}

// bool can_fade = 19;
inline void Trail::clear_can_fade() {
  can_fade_ = false;
}
inline bool Trail::_internal_can_fade() const {
  return can_fade_;
}
inline bool Trail::can_fade() const {
  // @@protoc_insertion_point(field_get:Trail.can_fade)
  return _internal_can_fade();
}
inline void Trail::_internal_set_can_fade(bool value) {
  
  can_fade_ = value;
}
inline void Trail::set_can_fade(bool value) {
  _internal_set_can_fade(value);
  // @@protoc_insertion_point(field_set:Trail.can_fade)
}

// bool is_wall = 22;
inline void Trail::clear_is_wall() {
  is_wall_ = false;
}
inline bool Trail::_internal_is_wall() const {
  return is_wall_;
}
inline bool Trail::is_wall() const {
  // @@protoc_insertion_point(field_get:Trail.is_wall)
  return _internal_is_wall();
}
inline void Trail::_internal_set_is_wall(bool value) {
  
  is_wall_ = value;
}
inline void Trail::set_is_wall(bool value) {
  _internal_set_is_wall(value);
  // @@protoc_insertion_point(field_set:Trail.is_wall)
}

// string bhdraft__schedule = 23;
inline void Trail::clear_bhdraft__schedule() {
  bhdraft__schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trail::bhdraft__schedule() const {
  // @@protoc_insertion_point(field_get:Trail.bhdraft__schedule)
  return _internal_bhdraft__schedule();
}
inline void Trail::set_bhdraft__schedule(const std::string& value) {
  _internal_set_bhdraft__schedule(value);
  // @@protoc_insertion_point(field_set:Trail.bhdraft__schedule)
}
inline std::string* Trail::mutable_bhdraft__schedule() {
  // @@protoc_insertion_point(field_mutable:Trail.bhdraft__schedule)
  return _internal_mutable_bhdraft__schedule();
}
inline const std::string& Trail::_internal_bhdraft__schedule() const {
  return bhdraft__schedule_.Get();
}
inline void Trail::_internal_set_bhdraft__schedule(const std::string& value) {
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trail::set_bhdraft__schedule(std::string&& value) {
  
  bhdraft__schedule_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trail.bhdraft__schedule)
}
inline void Trail::set_bhdraft__schedule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trail.bhdraft__schedule)
}
inline void Trail::set_bhdraft__schedule(const char* value,
    size_t size) {
  
  bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trail.bhdraft__schedule)
}
inline std::string* Trail::_internal_mutable_bhdraft__schedule() {
  
  return bhdraft__schedule_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trail::release_bhdraft__schedule() {
  // @@protoc_insertion_point(field_release:Trail.bhdraft__schedule)
  return bhdraft__schedule_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trail::set_allocated_bhdraft__schedule(std::string* bhdraft__schedule) {
  if (bhdraft__schedule != nullptr) {
    
  } else {
    
  }
  bhdraft__schedule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bhdraft__schedule,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trail.bhdraft__schedule)
}
inline std::string* Trail::unsafe_arena_release_bhdraft__schedule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trail.bhdraft__schedule)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bhdraft__schedule_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trail::unsafe_arena_set_allocated_bhdraft__schedule(
    std::string* bhdraft__schedule) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bhdraft__schedule != nullptr) {
    
  } else {
    
  }
  bhdraft__schedule_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bhdraft__schedule, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.bhdraft__schedule)
}

// float bhdraft__schedule_duration = 24;
inline void Trail::clear_bhdraft__schedule_duration() {
  bhdraft__schedule_duration_ = 0;
}
inline float Trail::_internal_bhdraft__schedule_duration() const {
  return bhdraft__schedule_duration_;
}
inline float Trail::bhdraft__schedule_duration() const {
  // @@protoc_insertion_point(field_get:Trail.bhdraft__schedule_duration)
  return _internal_bhdraft__schedule_duration();
}
inline void Trail::_internal_set_bhdraft__schedule_duration(float value) {
  
  bhdraft__schedule_duration_ = value;
}
inline void Trail::set_bhdraft__schedule_duration(float value) {
  _internal_set_bhdraft__schedule_duration(value);
  // @@protoc_insertion_point(field_set:Trail.bhdraft__schedule_duration)
}

// float scale = 25;
inline void Trail::clear_scale() {
  scale_ = 0;
}
inline float Trail::_internal_scale() const {
  return scale_;
}
inline float Trail::scale() const {
  // @@protoc_insertion_point(field_get:Trail.scale)
  return _internal_scale();
}
inline void Trail::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void Trail::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:Trail.scale)
}

// .Color color = 26;
inline bool Trail::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Trail::has_color() const {
  return _internal_has_color();
}
inline void Trail::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::Color& Trail::_internal_color() const {
  const ::Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Color*>(
      &::_Color_default_instance_);
}
inline const ::Color& Trail::color() const {
  // @@protoc_insertion_point(field_get:Trail.color)
  return _internal_color();
}
inline void Trail::unsafe_arena_set_allocated_color(
    ::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.color)
}
inline ::Color* Trail::release_color() {
  auto temp = unsafe_arena_release_color();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Color* Trail::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:Trail.color)
  
  ::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::Color* Trail::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::Color* Trail::mutable_color() {
  // @@protoc_insertion_point(field_mutable:Trail.color)
  return _internal_mutable_color();
}
inline void Trail::set_allocated_color(::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:Trail.color)
}

// .FestivalFilter festival_filter = 27;
inline bool Trail::_internal_has_festival_filter() const {
  return this != internal_default_instance() && festival_filter_ != nullptr;
}
inline bool Trail::has_festival_filter() const {
  return _internal_has_festival_filter();
}
inline void Trail::clear_festival_filter() {
  if (GetArena() == nullptr && festival_filter_ != nullptr) {
    delete festival_filter_;
  }
  festival_filter_ = nullptr;
}
inline const ::FestivalFilter& Trail::_internal_festival_filter() const {
  const ::FestivalFilter* p = festival_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::FestivalFilter*>(
      &::_FestivalFilter_default_instance_);
}
inline const ::FestivalFilter& Trail::festival_filter() const {
  // @@protoc_insertion_point(field_get:Trail.festival_filter)
  return _internal_festival_filter();
}
inline void Trail::unsafe_arena_set_allocated_festival_filter(
    ::FestivalFilter* festival_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(festival_filter_);
  }
  festival_filter_ = festival_filter;
  if (festival_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.festival_filter)
}
inline ::FestivalFilter* Trail::release_festival_filter() {
  auto temp = unsafe_arena_release_festival_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FestivalFilter* Trail::unsafe_arena_release_festival_filter() {
  // @@protoc_insertion_point(field_release:Trail.festival_filter)
  
  ::FestivalFilter* temp = festival_filter_;
  festival_filter_ = nullptr;
  return temp;
}
inline ::FestivalFilter* Trail::_internal_mutable_festival_filter() {
  
  if (festival_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::FestivalFilter>(GetArena());
    festival_filter_ = p;
  }
  return festival_filter_;
}
inline ::FestivalFilter* Trail::mutable_festival_filter() {
  // @@protoc_insertion_point(field_mutable:Trail.festival_filter)
  return _internal_mutable_festival_filter();
}
inline void Trail::set_allocated_festival_filter(::FestivalFilter* festival_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete festival_filter_;
  }
  if (festival_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(festival_filter);
    if (message_arena != submessage_arena) {
      festival_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, festival_filter, submessage_arena);
    }
    
  } else {
    
  }
  festival_filter_ = festival_filter;
  // @@protoc_insertion_point(field_set_allocated:Trail.festival_filter)
}

// .MapTypeFilter map_type_filter = 28;
inline bool Trail::_internal_has_map_type_filter() const {
  return this != internal_default_instance() && map_type_filter_ != nullptr;
}
inline bool Trail::has_map_type_filter() const {
  return _internal_has_map_type_filter();
}
inline void Trail::clear_map_type_filter() {
  if (GetArena() == nullptr && map_type_filter_ != nullptr) {
    delete map_type_filter_;
  }
  map_type_filter_ = nullptr;
}
inline const ::MapTypeFilter& Trail::_internal_map_type_filter() const {
  const ::MapTypeFilter* p = map_type_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MapTypeFilter*>(
      &::_MapTypeFilter_default_instance_);
}
inline const ::MapTypeFilter& Trail::map_type_filter() const {
  // @@protoc_insertion_point(field_get:Trail.map_type_filter)
  return _internal_map_type_filter();
}
inline void Trail::unsafe_arena_set_allocated_map_type_filter(
    ::MapTypeFilter* map_type_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_type_filter_);
  }
  map_type_filter_ = map_type_filter;
  if (map_type_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.map_type_filter)
}
inline ::MapTypeFilter* Trail::release_map_type_filter() {
  auto temp = unsafe_arena_release_map_type_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MapTypeFilter* Trail::unsafe_arena_release_map_type_filter() {
  // @@protoc_insertion_point(field_release:Trail.map_type_filter)
  
  ::MapTypeFilter* temp = map_type_filter_;
  map_type_filter_ = nullptr;
  return temp;
}
inline ::MapTypeFilter* Trail::_internal_mutable_map_type_filter() {
  
  if (map_type_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::MapTypeFilter>(GetArena());
    map_type_filter_ = p;
  }
  return map_type_filter_;
}
inline ::MapTypeFilter* Trail::mutable_map_type_filter() {
  // @@protoc_insertion_point(field_mutable:Trail.map_type_filter)
  return _internal_mutable_map_type_filter();
}
inline void Trail::set_allocated_map_type_filter(::MapTypeFilter* map_type_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_type_filter_;
  }
  if (map_type_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_type_filter);
    if (message_arena != submessage_arena) {
      map_type_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_type_filter, submessage_arena);
    }
    
  } else {
    
  }
  map_type_filter_ = map_type_filter;
  // @@protoc_insertion_point(field_set_allocated:Trail.map_type_filter)
}

// .MountFilter mount_filter = 29;
inline bool Trail::_internal_has_mount_filter() const {
  return this != internal_default_instance() && mount_filter_ != nullptr;
}
inline bool Trail::has_mount_filter() const {
  return _internal_has_mount_filter();
}
inline void Trail::clear_mount_filter() {
  if (GetArena() == nullptr && mount_filter_ != nullptr) {
    delete mount_filter_;
  }
  mount_filter_ = nullptr;
}
inline const ::MountFilter& Trail::_internal_mount_filter() const {
  const ::MountFilter* p = mount_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MountFilter*>(
      &::_MountFilter_default_instance_);
}
inline const ::MountFilter& Trail::mount_filter() const {
  // @@protoc_insertion_point(field_get:Trail.mount_filter)
  return _internal_mount_filter();
}
inline void Trail::unsafe_arena_set_allocated_mount_filter(
    ::MountFilter* mount_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mount_filter_);
  }
  mount_filter_ = mount_filter;
  if (mount_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.mount_filter)
}
inline ::MountFilter* Trail::release_mount_filter() {
  auto temp = unsafe_arena_release_mount_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MountFilter* Trail::unsafe_arena_release_mount_filter() {
  // @@protoc_insertion_point(field_release:Trail.mount_filter)
  
  ::MountFilter* temp = mount_filter_;
  mount_filter_ = nullptr;
  return temp;
}
inline ::MountFilter* Trail::_internal_mutable_mount_filter() {
  
  if (mount_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::MountFilter>(GetArena());
    mount_filter_ = p;
  }
  return mount_filter_;
}
inline ::MountFilter* Trail::mutable_mount_filter() {
  // @@protoc_insertion_point(field_mutable:Trail.mount_filter)
  return _internal_mutable_mount_filter();
}
inline void Trail::set_allocated_mount_filter(::MountFilter* mount_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mount_filter_;
  }
  if (mount_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mount_filter);
    if (message_arena != submessage_arena) {
      mount_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mount_filter, submessage_arena);
    }
    
  } else {
    
  }
  mount_filter_ = mount_filter;
  // @@protoc_insertion_point(field_set_allocated:Trail.mount_filter)
}

// .ProfessionFilter profession_filter = 30;
inline bool Trail::_internal_has_profession_filter() const {
  return this != internal_default_instance() && profession_filter_ != nullptr;
}
inline bool Trail::has_profession_filter() const {
  return _internal_has_profession_filter();
}
inline void Trail::clear_profession_filter() {
  if (GetArena() == nullptr && profession_filter_ != nullptr) {
    delete profession_filter_;
  }
  profession_filter_ = nullptr;
}
inline const ::ProfessionFilter& Trail::_internal_profession_filter() const {
  const ::ProfessionFilter* p = profession_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ProfessionFilter*>(
      &::_ProfessionFilter_default_instance_);
}
inline const ::ProfessionFilter& Trail::profession_filter() const {
  // @@protoc_insertion_point(field_get:Trail.profession_filter)
  return _internal_profession_filter();
}
inline void Trail::unsafe_arena_set_allocated_profession_filter(
    ::ProfessionFilter* profession_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profession_filter_);
  }
  profession_filter_ = profession_filter;
  if (profession_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.profession_filter)
}
inline ::ProfessionFilter* Trail::release_profession_filter() {
  auto temp = unsafe_arena_release_profession_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ProfessionFilter* Trail::unsafe_arena_release_profession_filter() {
  // @@protoc_insertion_point(field_release:Trail.profession_filter)
  
  ::ProfessionFilter* temp = profession_filter_;
  profession_filter_ = nullptr;
  return temp;
}
inline ::ProfessionFilter* Trail::_internal_mutable_profession_filter() {
  
  if (profession_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProfessionFilter>(GetArena());
    profession_filter_ = p;
  }
  return profession_filter_;
}
inline ::ProfessionFilter* Trail::mutable_profession_filter() {
  // @@protoc_insertion_point(field_mutable:Trail.profession_filter)
  return _internal_mutable_profession_filter();
}
inline void Trail::set_allocated_profession_filter(::ProfessionFilter* profession_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete profession_filter_;
  }
  if (profession_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profession_filter);
    if (message_arena != submessage_arena) {
      profession_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profession_filter, submessage_arena);
    }
    
  } else {
    
  }
  profession_filter_ = profession_filter;
  // @@protoc_insertion_point(field_set_allocated:Trail.profession_filter)
}

// .SpecializationFilter specialization_filter = 31;
inline bool Trail::_internal_has_specialization_filter() const {
  return this != internal_default_instance() && specialization_filter_ != nullptr;
}
inline bool Trail::has_specialization_filter() const {
  return _internal_has_specialization_filter();
}
inline void Trail::clear_specialization_filter() {
  if (GetArena() == nullptr && specialization_filter_ != nullptr) {
    delete specialization_filter_;
  }
  specialization_filter_ = nullptr;
}
inline const ::SpecializationFilter& Trail::_internal_specialization_filter() const {
  const ::SpecializationFilter* p = specialization_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SpecializationFilter*>(
      &::_SpecializationFilter_default_instance_);
}
inline const ::SpecializationFilter& Trail::specialization_filter() const {
  // @@protoc_insertion_point(field_get:Trail.specialization_filter)
  return _internal_specialization_filter();
}
inline void Trail::unsafe_arena_set_allocated_specialization_filter(
    ::SpecializationFilter* specialization_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specialization_filter_);
  }
  specialization_filter_ = specialization_filter;
  if (specialization_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.specialization_filter)
}
inline ::SpecializationFilter* Trail::release_specialization_filter() {
  auto temp = unsafe_arena_release_specialization_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SpecializationFilter* Trail::unsafe_arena_release_specialization_filter() {
  // @@protoc_insertion_point(field_release:Trail.specialization_filter)
  
  ::SpecializationFilter* temp = specialization_filter_;
  specialization_filter_ = nullptr;
  return temp;
}
inline ::SpecializationFilter* Trail::_internal_mutable_specialization_filter() {
  
  if (specialization_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::SpecializationFilter>(GetArena());
    specialization_filter_ = p;
  }
  return specialization_filter_;
}
inline ::SpecializationFilter* Trail::mutable_specialization_filter() {
  // @@protoc_insertion_point(field_mutable:Trail.specialization_filter)
  return _internal_mutable_specialization_filter();
}
inline void Trail::set_allocated_specialization_filter(::SpecializationFilter* specialization_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete specialization_filter_;
  }
  if (specialization_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(specialization_filter);
    if (message_arena != submessage_arena) {
      specialization_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specialization_filter, submessage_arena);
    }
    
  } else {
    
  }
  specialization_filter_ = specialization_filter;
  // @@protoc_insertion_point(field_set_allocated:Trail.specialization_filter)
}

// .SpeciesFilter species_filter = 32;
inline bool Trail::_internal_has_species_filter() const {
  return this != internal_default_instance() && species_filter_ != nullptr;
}
inline bool Trail::has_species_filter() const {
  return _internal_has_species_filter();
}
inline void Trail::clear_species_filter() {
  if (GetArena() == nullptr && species_filter_ != nullptr) {
    delete species_filter_;
  }
  species_filter_ = nullptr;
}
inline const ::SpeciesFilter& Trail::_internal_species_filter() const {
  const ::SpeciesFilter* p = species_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SpeciesFilter*>(
      &::_SpeciesFilter_default_instance_);
}
inline const ::SpeciesFilter& Trail::species_filter() const {
  // @@protoc_insertion_point(field_get:Trail.species_filter)
  return _internal_species_filter();
}
inline void Trail::unsafe_arena_set_allocated_species_filter(
    ::SpeciesFilter* species_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(species_filter_);
  }
  species_filter_ = species_filter;
  if (species_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trail.species_filter)
}
inline ::SpeciesFilter* Trail::release_species_filter() {
  auto temp = unsafe_arena_release_species_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SpeciesFilter* Trail::unsafe_arena_release_species_filter() {
  // @@protoc_insertion_point(field_release:Trail.species_filter)
  
  ::SpeciesFilter* temp = species_filter_;
  species_filter_ = nullptr;
  return temp;
}
inline ::SpeciesFilter* Trail::_internal_mutable_species_filter() {
  
  if (species_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::SpeciesFilter>(GetArena());
    species_filter_ = p;
  }
  return species_filter_;
}
inline ::SpeciesFilter* Trail::mutable_species_filter() {
  // @@protoc_insertion_point(field_mutable:Trail.species_filter)
  return _internal_mutable_species_filter();
}
inline void Trail::set_allocated_species_filter(::SpeciesFilter* species_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete species_filter_;
  }
  if (species_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(species_filter);
    if (message_arena != submessage_arena) {
      species_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, species_filter, submessage_arena);
    }
    
  } else {
    
  }
  species_filter_ = species_filter;
  // @@protoc_insertion_point(field_set_allocated:Trail.species_filter)
}

// -------------------------------------------------------------------

// Texture

// string path = 1;
inline void Texture::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Texture::path() const {
  // @@protoc_insertion_point(field_get:Texture.path)
  return _internal_path();
}
inline void Texture::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Texture.path)
}
inline std::string* Texture::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Texture.path)
  return _internal_mutable_path();
}
inline const std::string& Texture::_internal_path() const {
  return path_.Get();
}
inline void Texture::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Texture::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Texture.path)
}
inline void Texture::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Texture.path)
}
inline void Texture::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Texture.path)
}
inline std::string* Texture::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Texture::release_path() {
  // @@protoc_insertion_point(field_release:Texture.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Texture::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Texture.path)
}
inline std::string* Texture::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Texture.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Texture::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Texture.path)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::_internal_x() const {
  return x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::_internal_y() const {
  return y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::_internal_z() const {
  return z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Position.z)
}

// -------------------------------------------------------------------

// EulerRotation

// float x = 1;
inline void EulerRotation::clear_x() {
  x_ = 0;
}
inline float EulerRotation::_internal_x() const {
  return x_;
}
inline float EulerRotation::x() const {
  // @@protoc_insertion_point(field_get:EulerRotation.x)
  return _internal_x();
}
inline void EulerRotation::_internal_set_x(float value) {
  
  x_ = value;
}
inline void EulerRotation::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:EulerRotation.x)
}

// float y = 2;
inline void EulerRotation::clear_y() {
  y_ = 0;
}
inline float EulerRotation::_internal_y() const {
  return y_;
}
inline float EulerRotation::y() const {
  // @@protoc_insertion_point(field_get:EulerRotation.y)
  return _internal_y();
}
inline void EulerRotation::_internal_set_y(float value) {
  
  y_ = value;
}
inline void EulerRotation::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:EulerRotation.y)
}

// float z = 3;
inline void EulerRotation::clear_z() {
  z_ = 0;
}
inline float EulerRotation::_internal_z() const {
  return z_;
}
inline float EulerRotation::z() const {
  // @@protoc_insertion_point(field_get:EulerRotation.z)
  return _internal_z();
}
inline void EulerRotation::_internal_set_z(float value) {
  
  z_ = value;
}
inline void EulerRotation::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:EulerRotation.z)
}

// -------------------------------------------------------------------

// Trigger

// bool auto_trigger = 1;
inline void Trigger::clear_auto_trigger() {
  auto_trigger_ = false;
}
inline bool Trigger::_internal_auto_trigger() const {
  return auto_trigger_;
}
inline bool Trigger::auto_trigger() const {
  // @@protoc_insertion_point(field_get:Trigger.auto_trigger)
  return _internal_auto_trigger();
}
inline void Trigger::_internal_set_auto_trigger(bool value) {
  
  auto_trigger_ = value;
}
inline void Trigger::set_auto_trigger(bool value) {
  _internal_set_auto_trigger(value);
  // @@protoc_insertion_point(field_set:Trigger.auto_trigger)
}

// float bounce_delay = 2;
inline void Trigger::clear_bounce_delay() {
  bounce_delay_ = 0;
}
inline float Trigger::_internal_bounce_delay() const {
  return bounce_delay_;
}
inline float Trigger::bounce_delay() const {
  // @@protoc_insertion_point(field_get:Trigger.bounce_delay)
  return _internal_bounce_delay();
}
inline void Trigger::_internal_set_bounce_delay(float value) {
  
  bounce_delay_ = value;
}
inline void Trigger::set_bounce_delay(float value) {
  _internal_set_bounce_delay(value);
  // @@protoc_insertion_point(field_set:Trigger.bounce_delay)
}

// float bounce_duration = 3;
inline void Trigger::clear_bounce_duration() {
  bounce_duration_ = 0;
}
inline float Trigger::_internal_bounce_duration() const {
  return bounce_duration_;
}
inline float Trigger::bounce_duration() const {
  // @@protoc_insertion_point(field_get:Trigger.bounce_duration)
  return _internal_bounce_duration();
}
inline void Trigger::_internal_set_bounce_duration(float value) {
  
  bounce_duration_ = value;
}
inline void Trigger::set_bounce_duration(float value) {
  _internal_set_bounce_duration(value);
  // @@protoc_insertion_point(field_set:Trigger.bounce_duration)
}

// float bounce_height = 4;
inline void Trigger::clear_bounce_height() {
  bounce_height_ = 0;
}
inline float Trigger::_internal_bounce_height() const {
  return bounce_height_;
}
inline float Trigger::bounce_height() const {
  // @@protoc_insertion_point(field_get:Trigger.bounce_height)
  return _internal_bounce_height();
}
inline void Trigger::_internal_set_bounce_height(float value) {
  
  bounce_height_ = value;
}
inline void Trigger::set_bounce_height(float value) {
  _internal_set_bounce_height(value);
  // @@protoc_insertion_point(field_set:Trigger.bounce_height)
}

// string action_copy_clipboard = 5;
inline void Trigger::clear_action_copy_clipboard() {
  action_copy_clipboard_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trigger::action_copy_clipboard() const {
  // @@protoc_insertion_point(field_get:Trigger.action_copy_clipboard)
  return _internal_action_copy_clipboard();
}
inline void Trigger::set_action_copy_clipboard(const std::string& value) {
  _internal_set_action_copy_clipboard(value);
  // @@protoc_insertion_point(field_set:Trigger.action_copy_clipboard)
}
inline std::string* Trigger::mutable_action_copy_clipboard() {
  // @@protoc_insertion_point(field_mutable:Trigger.action_copy_clipboard)
  return _internal_mutable_action_copy_clipboard();
}
inline const std::string& Trigger::_internal_action_copy_clipboard() const {
  return action_copy_clipboard_.Get();
}
inline void Trigger::_internal_set_action_copy_clipboard(const std::string& value) {
  
  action_copy_clipboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trigger::set_action_copy_clipboard(std::string&& value) {
  
  action_copy_clipboard_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trigger.action_copy_clipboard)
}
inline void Trigger::set_action_copy_clipboard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_copy_clipboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trigger.action_copy_clipboard)
}
inline void Trigger::set_action_copy_clipboard(const char* value,
    size_t size) {
  
  action_copy_clipboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trigger.action_copy_clipboard)
}
inline std::string* Trigger::_internal_mutable_action_copy_clipboard() {
  
  return action_copy_clipboard_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trigger::release_action_copy_clipboard() {
  // @@protoc_insertion_point(field_release:Trigger.action_copy_clipboard)
  return action_copy_clipboard_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trigger::set_allocated_action_copy_clipboard(std::string* action_copy_clipboard) {
  if (action_copy_clipboard != nullptr) {
    
  } else {
    
  }
  action_copy_clipboard_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_copy_clipboard,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trigger.action_copy_clipboard)
}
inline std::string* Trigger::unsafe_arena_release_action_copy_clipboard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trigger.action_copy_clipboard)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_copy_clipboard_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trigger::unsafe_arena_set_allocated_action_copy_clipboard(
    std::string* action_copy_clipboard) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_copy_clipboard != nullptr) {
    
  } else {
    
  }
  action_copy_clipboard_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_copy_clipboard, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trigger.action_copy_clipboard)
}

// string action_copy_message = 6;
inline void Trigger::clear_action_copy_message() {
  action_copy_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trigger::action_copy_message() const {
  // @@protoc_insertion_point(field_get:Trigger.action_copy_message)
  return _internal_action_copy_message();
}
inline void Trigger::set_action_copy_message(const std::string& value) {
  _internal_set_action_copy_message(value);
  // @@protoc_insertion_point(field_set:Trigger.action_copy_message)
}
inline std::string* Trigger::mutable_action_copy_message() {
  // @@protoc_insertion_point(field_mutable:Trigger.action_copy_message)
  return _internal_mutable_action_copy_message();
}
inline const std::string& Trigger::_internal_action_copy_message() const {
  return action_copy_message_.Get();
}
inline void Trigger::_internal_set_action_copy_message(const std::string& value) {
  
  action_copy_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trigger::set_action_copy_message(std::string&& value) {
  
  action_copy_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trigger.action_copy_message)
}
inline void Trigger::set_action_copy_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_copy_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trigger.action_copy_message)
}
inline void Trigger::set_action_copy_message(const char* value,
    size_t size) {
  
  action_copy_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trigger.action_copy_message)
}
inline std::string* Trigger::_internal_mutable_action_copy_message() {
  
  return action_copy_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trigger::release_action_copy_message() {
  // @@protoc_insertion_point(field_release:Trigger.action_copy_message)
  return action_copy_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trigger::set_allocated_action_copy_message(std::string* action_copy_message) {
  if (action_copy_message != nullptr) {
    
  } else {
    
  }
  action_copy_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_copy_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trigger.action_copy_message)
}
inline std::string* Trigger::unsafe_arena_release_action_copy_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trigger.action_copy_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_copy_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trigger::unsafe_arena_set_allocated_action_copy_message(
    std::string* action_copy_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_copy_message != nullptr) {
    
  } else {
    
  }
  action_copy_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_copy_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trigger.action_copy_message)
}

// bool has_countdown = 7;
inline void Trigger::clear_has_countdown() {
  has_countdown_ = false;
}
inline bool Trigger::_internal_has_countdown() const {
  return has_countdown_;
}
inline bool Trigger::has_countdown() const {
  // @@protoc_insertion_point(field_get:Trigger.has_countdown)
  return _internal_has_countdown();
}
inline void Trigger::_internal_set_has_countdown(bool value) {
  
  has_countdown_ = value;
}
inline void Trigger::set_has_countdown(bool value) {
  _internal_set_has_countdown(value);
  // @@protoc_insertion_point(field_set:Trigger.has_countdown)
}

// string action_info_message = 8;
inline void Trigger::clear_action_info_message() {
  action_info_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trigger::action_info_message() const {
  // @@protoc_insertion_point(field_get:Trigger.action_info_message)
  return _internal_action_info_message();
}
inline void Trigger::set_action_info_message(const std::string& value) {
  _internal_set_action_info_message(value);
  // @@protoc_insertion_point(field_set:Trigger.action_info_message)
}
inline std::string* Trigger::mutable_action_info_message() {
  // @@protoc_insertion_point(field_mutable:Trigger.action_info_message)
  return _internal_mutable_action_info_message();
}
inline const std::string& Trigger::_internal_action_info_message() const {
  return action_info_message_.Get();
}
inline void Trigger::_internal_set_action_info_message(const std::string& value) {
  
  action_info_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trigger::set_action_info_message(std::string&& value) {
  
  action_info_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trigger.action_info_message)
}
inline void Trigger::set_action_info_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_info_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trigger.action_info_message)
}
inline void Trigger::set_action_info_message(const char* value,
    size_t size) {
  
  action_info_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trigger.action_info_message)
}
inline std::string* Trigger::_internal_mutable_action_info_message() {
  
  return action_info_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trigger::release_action_info_message() {
  // @@protoc_insertion_point(field_release:Trigger.action_info_message)
  return action_info_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trigger::set_allocated_action_info_message(std::string* action_info_message) {
  if (action_info_message != nullptr) {
    
  } else {
    
  }
  action_info_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_info_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trigger.action_info_message)
}
inline std::string* Trigger::unsafe_arena_release_action_info_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trigger.action_info_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_info_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trigger::unsafe_arena_set_allocated_action_info_message(
    std::string* action_info_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_info_message != nullptr) {
    
  } else {
    
  }
  action_info_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_info_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trigger.action_info_message)
}

// bool invert_display = 9;
inline void Trigger::clear_invert_display() {
  invert_display_ = false;
}
inline bool Trigger::_internal_invert_display() const {
  return invert_display_;
}
inline bool Trigger::invert_display() const {
  // @@protoc_insertion_point(field_get:Trigger.invert_display)
  return _internal_invert_display();
}
inline void Trigger::_internal_set_invert_display(bool value) {
  
  invert_display_ = value;
}
inline void Trigger::set_invert_display(bool value) {
  _internal_set_invert_display(value);
  // @@protoc_insertion_point(field_set:Trigger.invert_display)
}

// float reset_length = 10;
inline void Trigger::clear_reset_length() {
  reset_length_ = 0;
}
inline float Trigger::_internal_reset_length() const {
  return reset_length_;
}
inline float Trigger::reset_length() const {
  // @@protoc_insertion_point(field_get:Trigger.reset_length)
  return _internal_reset_length();
}
inline void Trigger::_internal_set_reset_length(float value) {
  
  reset_length_ = value;
}
inline void Trigger::set_reset_length(float value) {
  _internal_set_reset_length(value);
  // @@protoc_insertion_point(field_set:Trigger.reset_length)
}

// float range = 11;
inline void Trigger::clear_range() {
  range_ = 0;
}
inline float Trigger::_internal_range() const {
  return range_;
}
inline float Trigger::range() const {
  // @@protoc_insertion_point(field_get:Trigger.range)
  return _internal_range();
}
inline void Trigger::_internal_set_range(float value) {
  
  range_ = value;
}
inline void Trigger::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:Trigger.range)
}

// .Category action_hide_category = 12;
inline bool Trigger::_internal_has_action_hide_category() const {
  return this != internal_default_instance() && action_hide_category_ != nullptr;
}
inline bool Trigger::has_action_hide_category() const {
  return _internal_has_action_hide_category();
}
inline void Trigger::clear_action_hide_category() {
  if (GetArena() == nullptr && action_hide_category_ != nullptr) {
    delete action_hide_category_;
  }
  action_hide_category_ = nullptr;
}
inline const ::Category& Trigger::_internal_action_hide_category() const {
  const ::Category* p = action_hide_category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Category*>(
      &::_Category_default_instance_);
}
inline const ::Category& Trigger::action_hide_category() const {
  // @@protoc_insertion_point(field_get:Trigger.action_hide_category)
  return _internal_action_hide_category();
}
inline void Trigger::unsafe_arena_set_allocated_action_hide_category(
    ::Category* action_hide_category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_hide_category_);
  }
  action_hide_category_ = action_hide_category;
  if (action_hide_category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trigger.action_hide_category)
}
inline ::Category* Trigger::release_action_hide_category() {
  auto temp = unsafe_arena_release_action_hide_category();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Category* Trigger::unsafe_arena_release_action_hide_category() {
  // @@protoc_insertion_point(field_release:Trigger.action_hide_category)
  
  ::Category* temp = action_hide_category_;
  action_hide_category_ = nullptr;
  return temp;
}
inline ::Category* Trigger::_internal_mutable_action_hide_category() {
  
  if (action_hide_category_ == nullptr) {
    auto* p = CreateMaybeMessage<::Category>(GetArena());
    action_hide_category_ = p;
  }
  return action_hide_category_;
}
inline ::Category* Trigger::mutable_action_hide_category() {
  // @@protoc_insertion_point(field_mutable:Trigger.action_hide_category)
  return _internal_mutable_action_hide_category();
}
inline void Trigger::set_allocated_action_hide_category(::Category* action_hide_category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_hide_category_;
  }
  if (action_hide_category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_hide_category);
    if (message_arena != submessage_arena) {
      action_hide_category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_hide_category, submessage_arena);
    }
    
  } else {
    
  }
  action_hide_category_ = action_hide_category;
  // @@protoc_insertion_point(field_set_allocated:Trigger.action_hide_category)
}

// .Category action_show_category = 13;
inline bool Trigger::_internal_has_action_show_category() const {
  return this != internal_default_instance() && action_show_category_ != nullptr;
}
inline bool Trigger::has_action_show_category() const {
  return _internal_has_action_show_category();
}
inline void Trigger::clear_action_show_category() {
  if (GetArena() == nullptr && action_show_category_ != nullptr) {
    delete action_show_category_;
  }
  action_show_category_ = nullptr;
}
inline const ::Category& Trigger::_internal_action_show_category() const {
  const ::Category* p = action_show_category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Category*>(
      &::_Category_default_instance_);
}
inline const ::Category& Trigger::action_show_category() const {
  // @@protoc_insertion_point(field_get:Trigger.action_show_category)
  return _internal_action_show_category();
}
inline void Trigger::unsafe_arena_set_allocated_action_show_category(
    ::Category* action_show_category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_show_category_);
  }
  action_show_category_ = action_show_category;
  if (action_show_category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trigger.action_show_category)
}
inline ::Category* Trigger::release_action_show_category() {
  auto temp = unsafe_arena_release_action_show_category();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Category* Trigger::unsafe_arena_release_action_show_category() {
  // @@protoc_insertion_point(field_release:Trigger.action_show_category)
  
  ::Category* temp = action_show_category_;
  action_show_category_ = nullptr;
  return temp;
}
inline ::Category* Trigger::_internal_mutable_action_show_category() {
  
  if (action_show_category_ == nullptr) {
    auto* p = CreateMaybeMessage<::Category>(GetArena());
    action_show_category_ = p;
  }
  return action_show_category_;
}
inline ::Category* Trigger::mutable_action_show_category() {
  // @@protoc_insertion_point(field_mutable:Trigger.action_show_category)
  return _internal_mutable_action_show_category();
}
inline void Trigger::set_allocated_action_show_category(::Category* action_show_category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_show_category_;
  }
  if (action_show_category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_show_category);
    if (message_arena != submessage_arena) {
      action_show_category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_show_category, submessage_arena);
    }
    
  } else {
    
  }
  action_show_category_ = action_show_category;
  // @@protoc_insertion_point(field_set_allocated:Trigger.action_show_category)
}

// .Category action_toggle_category = 14;
inline bool Trigger::_internal_has_action_toggle_category() const {
  return this != internal_default_instance() && action_toggle_category_ != nullptr;
}
inline bool Trigger::has_action_toggle_category() const {
  return _internal_has_action_toggle_category();
}
inline void Trigger::clear_action_toggle_category() {
  if (GetArena() == nullptr && action_toggle_category_ != nullptr) {
    delete action_toggle_category_;
  }
  action_toggle_category_ = nullptr;
}
inline const ::Category& Trigger::_internal_action_toggle_category() const {
  const ::Category* p = action_toggle_category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Category*>(
      &::_Category_default_instance_);
}
inline const ::Category& Trigger::action_toggle_category() const {
  // @@protoc_insertion_point(field_get:Trigger.action_toggle_category)
  return _internal_action_toggle_category();
}
inline void Trigger::unsafe_arena_set_allocated_action_toggle_category(
    ::Category* action_toggle_category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_toggle_category_);
  }
  action_toggle_category_ = action_toggle_category;
  if (action_toggle_category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trigger.action_toggle_category)
}
inline ::Category* Trigger::release_action_toggle_category() {
  auto temp = unsafe_arena_release_action_toggle_category();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Category* Trigger::unsafe_arena_release_action_toggle_category() {
  // @@protoc_insertion_point(field_release:Trigger.action_toggle_category)
  
  ::Category* temp = action_toggle_category_;
  action_toggle_category_ = nullptr;
  return temp;
}
inline ::Category* Trigger::_internal_mutable_action_toggle_category() {
  
  if (action_toggle_category_ == nullptr) {
    auto* p = CreateMaybeMessage<::Category>(GetArena());
    action_toggle_category_ = p;
  }
  return action_toggle_category_;
}
inline ::Category* Trigger::mutable_action_toggle_category() {
  // @@protoc_insertion_point(field_mutable:Trigger.action_toggle_category)
  return _internal_mutable_action_toggle_category();
}
inline void Trigger::set_allocated_action_toggle_category(::Category* action_toggle_category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_toggle_category_;
  }
  if (action_toggle_category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_toggle_category);
    if (message_arena != submessage_arena) {
      action_toggle_category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_toggle_category, submessage_arena);
    }
    
  } else {
    
  }
  action_toggle_category_ = action_toggle_category;
  // @@protoc_insertion_point(field_set_allocated:Trigger.action_toggle_category)
}

// -------------------------------------------------------------------

// GUID

// int32 guid = 1;
inline void GUID::clear_guid() {
  guid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GUID::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GUID::guid() const {
  // @@protoc_insertion_point(field_get:GUID.guid)
  return _internal_guid();
}
inline void GUID::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guid_ = value;
}
inline void GUID::set_guid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:GUID.guid)
}

// -------------------------------------------------------------------

// Color

// string hex = 1;
inline void Color::clear_hex() {
  hex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Color::hex() const {
  // @@protoc_insertion_point(field_get:Color.hex)
  return _internal_hex();
}
inline void Color::set_hex(const std::string& value) {
  _internal_set_hex(value);
  // @@protoc_insertion_point(field_set:Color.hex)
}
inline std::string* Color::mutable_hex() {
  // @@protoc_insertion_point(field_mutable:Color.hex)
  return _internal_mutable_hex();
}
inline const std::string& Color::_internal_hex() const {
  return hex_.Get();
}
inline void Color::_internal_set_hex(const std::string& value) {
  
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Color::set_hex(std::string&& value) {
  
  hex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Color.hex)
}
inline void Color::set_hex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Color.hex)
}
inline void Color::set_hex(const char* value,
    size_t size) {
  
  hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Color.hex)
}
inline std::string* Color::_internal_mutable_hex() {
  
  return hex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Color::release_hex() {
  // @@protoc_insertion_point(field_release:Color.hex)
  return hex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Color::set_allocated_hex(std::string* hex) {
  if (hex != nullptr) {
    
  } else {
    
  }
  hex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Color.hex)
}
inline std::string* Color::unsafe_arena_release_hex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Color.hex)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hex_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Color::unsafe_arena_set_allocated_hex(
    std::string* hex) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hex != nullptr) {
    
  } else {
    
  }
  hex_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hex, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Color.hex)
}

// -------------------------------------------------------------------

// FestivalFilter

// bool dragonbash = 1;
inline void FestivalFilter::clear_dragonbash() {
  dragonbash_ = false;
}
inline bool FestivalFilter::_internal_dragonbash() const {
  return dragonbash_;
}
inline bool FestivalFilter::dragonbash() const {
  // @@protoc_insertion_point(field_get:FestivalFilter.dragonbash)
  return _internal_dragonbash();
}
inline void FestivalFilter::_internal_set_dragonbash(bool value) {
  
  dragonbash_ = value;
}
inline void FestivalFilter::set_dragonbash(bool value) {
  _internal_set_dragonbash(value);
  // @@protoc_insertion_point(field_set:FestivalFilter.dragonbash)
}

// bool festival_of_the_four_winds = 2;
inline void FestivalFilter::clear_festival_of_the_four_winds() {
  festival_of_the_four_winds_ = false;
}
inline bool FestivalFilter::_internal_festival_of_the_four_winds() const {
  return festival_of_the_four_winds_;
}
inline bool FestivalFilter::festival_of_the_four_winds() const {
  // @@protoc_insertion_point(field_get:FestivalFilter.festival_of_the_four_winds)
  return _internal_festival_of_the_four_winds();
}
inline void FestivalFilter::_internal_set_festival_of_the_four_winds(bool value) {
  
  festival_of_the_four_winds_ = value;
}
inline void FestivalFilter::set_festival_of_the_four_winds(bool value) {
  _internal_set_festival_of_the_four_winds(value);
  // @@protoc_insertion_point(field_set:FestivalFilter.festival_of_the_four_winds)
}

// bool halloween = 3;
inline void FestivalFilter::clear_halloween() {
  halloween_ = false;
}
inline bool FestivalFilter::_internal_halloween() const {
  return halloween_;
}
inline bool FestivalFilter::halloween() const {
  // @@protoc_insertion_point(field_get:FestivalFilter.halloween)
  return _internal_halloween();
}
inline void FestivalFilter::_internal_set_halloween(bool value) {
  
  halloween_ = value;
}
inline void FestivalFilter::set_halloween(bool value) {
  _internal_set_halloween(value);
  // @@protoc_insertion_point(field_set:FestivalFilter.halloween)
}

// bool lunar_new_year = 4;
inline void FestivalFilter::clear_lunar_new_year() {
  lunar_new_year_ = false;
}
inline bool FestivalFilter::_internal_lunar_new_year() const {
  return lunar_new_year_;
}
inline bool FestivalFilter::lunar_new_year() const {
  // @@protoc_insertion_point(field_get:FestivalFilter.lunar_new_year)
  return _internal_lunar_new_year();
}
inline void FestivalFilter::_internal_set_lunar_new_year(bool value) {
  
  lunar_new_year_ = value;
}
inline void FestivalFilter::set_lunar_new_year(bool value) {
  _internal_set_lunar_new_year(value);
  // @@protoc_insertion_point(field_set:FestivalFilter.lunar_new_year)
}

// bool super_adventure_festival = 5;
inline void FestivalFilter::clear_super_adventure_festival() {
  super_adventure_festival_ = false;
}
inline bool FestivalFilter::_internal_super_adventure_festival() const {
  return super_adventure_festival_;
}
inline bool FestivalFilter::super_adventure_festival() const {
  // @@protoc_insertion_point(field_get:FestivalFilter.super_adventure_festival)
  return _internal_super_adventure_festival();
}
inline void FestivalFilter::_internal_set_super_adventure_festival(bool value) {
  
  super_adventure_festival_ = value;
}
inline void FestivalFilter::set_super_adventure_festival(bool value) {
  _internal_set_super_adventure_festival(value);
  // @@protoc_insertion_point(field_set:FestivalFilter.super_adventure_festival)
}

// bool wintersday = 6;
inline void FestivalFilter::clear_wintersday() {
  wintersday_ = false;
}
inline bool FestivalFilter::_internal_wintersday() const {
  return wintersday_;
}
inline bool FestivalFilter::wintersday() const {
  // @@protoc_insertion_point(field_get:FestivalFilter.wintersday)
  return _internal_wintersday();
}
inline void FestivalFilter::_internal_set_wintersday(bool value) {
  
  wintersday_ = value;
}
inline void FestivalFilter::set_wintersday(bool value) {
  _internal_set_wintersday(value);
  // @@protoc_insertion_point(field_set:FestivalFilter.wintersday)
}

// bool none = 7;
inline void FestivalFilter::clear_none() {
  none_ = false;
}
inline bool FestivalFilter::_internal_none() const {
  return none_;
}
inline bool FestivalFilter::none() const {
  // @@protoc_insertion_point(field_get:FestivalFilter.none)
  return _internal_none();
}
inline void FestivalFilter::_internal_set_none(bool value) {
  
  none_ = value;
}
inline void FestivalFilter::set_none(bool value) {
  _internal_set_none(value);
  // @@protoc_insertion_point(field_set:FestivalFilter.none)
}

// -------------------------------------------------------------------

// MapTypeFilter

// bool unknown_map = 1;
inline void MapTypeFilter::clear_unknown_map() {
  unknown_map_ = false;
}
inline bool MapTypeFilter::_internal_unknown_map() const {
  return unknown_map_;
}
inline bool MapTypeFilter::unknown_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.unknown_map)
  return _internal_unknown_map();
}
inline void MapTypeFilter::_internal_set_unknown_map(bool value) {
  
  unknown_map_ = value;
}
inline void MapTypeFilter::set_unknown_map(bool value) {
  _internal_set_unknown_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.unknown_map)
}

// bool redirect_map = 2;
inline void MapTypeFilter::clear_redirect_map() {
  redirect_map_ = false;
}
inline bool MapTypeFilter::_internal_redirect_map() const {
  return redirect_map_;
}
inline bool MapTypeFilter::redirect_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.redirect_map)
  return _internal_redirect_map();
}
inline void MapTypeFilter::_internal_set_redirect_map(bool value) {
  
  redirect_map_ = value;
}
inline void MapTypeFilter::set_redirect_map(bool value) {
  _internal_set_redirect_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.redirect_map)
}

// bool character_create_map = 3;
inline void MapTypeFilter::clear_character_create_map() {
  character_create_map_ = false;
}
inline bool MapTypeFilter::_internal_character_create_map() const {
  return character_create_map_;
}
inline bool MapTypeFilter::character_create_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.character_create_map)
  return _internal_character_create_map();
}
inline void MapTypeFilter::_internal_set_character_create_map(bool value) {
  
  character_create_map_ = value;
}
inline void MapTypeFilter::set_character_create_map(bool value) {
  _internal_set_character_create_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.character_create_map)
}

// bool pvp_map = 4;
inline void MapTypeFilter::clear_pvp_map() {
  pvp_map_ = false;
}
inline bool MapTypeFilter::_internal_pvp_map() const {
  return pvp_map_;
}
inline bool MapTypeFilter::pvp_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.pvp_map)
  return _internal_pvp_map();
}
inline void MapTypeFilter::_internal_set_pvp_map(bool value) {
  
  pvp_map_ = value;
}
inline void MapTypeFilter::set_pvp_map(bool value) {
  _internal_set_pvp_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.pvp_map)
}

// bool gvg_map = 5;
inline void MapTypeFilter::clear_gvg_map() {
  gvg_map_ = false;
}
inline bool MapTypeFilter::_internal_gvg_map() const {
  return gvg_map_;
}
inline bool MapTypeFilter::gvg_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.gvg_map)
  return _internal_gvg_map();
}
inline void MapTypeFilter::_internal_set_gvg_map(bool value) {
  
  gvg_map_ = value;
}
inline void MapTypeFilter::set_gvg_map(bool value) {
  _internal_set_gvg_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.gvg_map)
}

// bool instance_map = 6;
inline void MapTypeFilter::clear_instance_map() {
  instance_map_ = false;
}
inline bool MapTypeFilter::_internal_instance_map() const {
  return instance_map_;
}
inline bool MapTypeFilter::instance_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.instance_map)
  return _internal_instance_map();
}
inline void MapTypeFilter::_internal_set_instance_map(bool value) {
  
  instance_map_ = value;
}
inline void MapTypeFilter::set_instance_map(bool value) {
  _internal_set_instance_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.instance_map)
}

// bool public_map = 7;
inline void MapTypeFilter::clear_public_map() {
  public_map_ = false;
}
inline bool MapTypeFilter::_internal_public_map() const {
  return public_map_;
}
inline bool MapTypeFilter::public_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.public_map)
  return _internal_public_map();
}
inline void MapTypeFilter::_internal_set_public_map(bool value) {
  
  public_map_ = value;
}
inline void MapTypeFilter::set_public_map(bool value) {
  _internal_set_public_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.public_map)
}

// bool tournament_map = 8;
inline void MapTypeFilter::clear_tournament_map() {
  tournament_map_ = false;
}
inline bool MapTypeFilter::_internal_tournament_map() const {
  return tournament_map_;
}
inline bool MapTypeFilter::tournament_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.tournament_map)
  return _internal_tournament_map();
}
inline void MapTypeFilter::_internal_set_tournament_map(bool value) {
  
  tournament_map_ = value;
}
inline void MapTypeFilter::set_tournament_map(bool value) {
  _internal_set_tournament_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.tournament_map)
}

// bool tutorial_map = 9;
inline void MapTypeFilter::clear_tutorial_map() {
  tutorial_map_ = false;
}
inline bool MapTypeFilter::_internal_tutorial_map() const {
  return tutorial_map_;
}
inline bool MapTypeFilter::tutorial_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.tutorial_map)
  return _internal_tutorial_map();
}
inline void MapTypeFilter::_internal_set_tutorial_map(bool value) {
  
  tutorial_map_ = value;
}
inline void MapTypeFilter::set_tutorial_map(bool value) {
  _internal_set_tutorial_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.tutorial_map)
}

// bool user_tournament_map = 10;
inline void MapTypeFilter::clear_user_tournament_map() {
  user_tournament_map_ = false;
}
inline bool MapTypeFilter::_internal_user_tournament_map() const {
  return user_tournament_map_;
}
inline bool MapTypeFilter::user_tournament_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.user_tournament_map)
  return _internal_user_tournament_map();
}
inline void MapTypeFilter::_internal_set_user_tournament_map(bool value) {
  
  user_tournament_map_ = value;
}
inline void MapTypeFilter::set_user_tournament_map(bool value) {
  _internal_set_user_tournament_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.user_tournament_map)
}

// bool center_map = 11;
inline void MapTypeFilter::clear_center_map() {
  center_map_ = false;
}
inline bool MapTypeFilter::_internal_center_map() const {
  return center_map_;
}
inline bool MapTypeFilter::center_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.center_map)
  return _internal_center_map();
}
inline void MapTypeFilter::_internal_set_center_map(bool value) {
  
  center_map_ = value;
}
inline void MapTypeFilter::set_center_map(bool value) {
  _internal_set_center_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.center_map)
}

// bool eternal_battlegrounds_map = 12;
inline void MapTypeFilter::clear_eternal_battlegrounds_map() {
  eternal_battlegrounds_map_ = false;
}
inline bool MapTypeFilter::_internal_eternal_battlegrounds_map() const {
  return eternal_battlegrounds_map_;
}
inline bool MapTypeFilter::eternal_battlegrounds_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.eternal_battlegrounds_map)
  return _internal_eternal_battlegrounds_map();
}
inline void MapTypeFilter::_internal_set_eternal_battlegrounds_map(bool value) {
  
  eternal_battlegrounds_map_ = value;
}
inline void MapTypeFilter::set_eternal_battlegrounds_map(bool value) {
  _internal_set_eternal_battlegrounds_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.eternal_battlegrounds_map)
}

// bool bluehome_map = 13;
inline void MapTypeFilter::clear_bluehome_map() {
  bluehome_map_ = false;
}
inline bool MapTypeFilter::_internal_bluehome_map() const {
  return bluehome_map_;
}
inline bool MapTypeFilter::bluehome_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.bluehome_map)
  return _internal_bluehome_map();
}
inline void MapTypeFilter::_internal_set_bluehome_map(bool value) {
  
  bluehome_map_ = value;
}
inline void MapTypeFilter::set_bluehome_map(bool value) {
  _internal_set_bluehome_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.bluehome_map)
}

// bool blue_borderlands_map = 14;
inline void MapTypeFilter::clear_blue_borderlands_map() {
  blue_borderlands_map_ = false;
}
inline bool MapTypeFilter::_internal_blue_borderlands_map() const {
  return blue_borderlands_map_;
}
inline bool MapTypeFilter::blue_borderlands_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.blue_borderlands_map)
  return _internal_blue_borderlands_map();
}
inline void MapTypeFilter::_internal_set_blue_borderlands_map(bool value) {
  
  blue_borderlands_map_ = value;
}
inline void MapTypeFilter::set_blue_borderlands_map(bool value) {
  _internal_set_blue_borderlands_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.blue_borderlands_map)
}

// bool green_home_map = 15;
inline void MapTypeFilter::clear_green_home_map() {
  green_home_map_ = false;
}
inline bool MapTypeFilter::_internal_green_home_map() const {
  return green_home_map_;
}
inline bool MapTypeFilter::green_home_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.green_home_map)
  return _internal_green_home_map();
}
inline void MapTypeFilter::_internal_set_green_home_map(bool value) {
  
  green_home_map_ = value;
}
inline void MapTypeFilter::set_green_home_map(bool value) {
  _internal_set_green_home_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.green_home_map)
}

// bool green_borderlands_map = 16;
inline void MapTypeFilter::clear_green_borderlands_map() {
  green_borderlands_map_ = false;
}
inline bool MapTypeFilter::_internal_green_borderlands_map() const {
  return green_borderlands_map_;
}
inline bool MapTypeFilter::green_borderlands_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.green_borderlands_map)
  return _internal_green_borderlands_map();
}
inline void MapTypeFilter::_internal_set_green_borderlands_map(bool value) {
  
  green_borderlands_map_ = value;
}
inline void MapTypeFilter::set_green_borderlands_map(bool value) {
  _internal_set_green_borderlands_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.green_borderlands_map)
}

// bool red_home_map = 17;
inline void MapTypeFilter::clear_red_home_map() {
  red_home_map_ = false;
}
inline bool MapTypeFilter::_internal_red_home_map() const {
  return red_home_map_;
}
inline bool MapTypeFilter::red_home_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.red_home_map)
  return _internal_red_home_map();
}
inline void MapTypeFilter::_internal_set_red_home_map(bool value) {
  
  red_home_map_ = value;
}
inline void MapTypeFilter::set_red_home_map(bool value) {
  _internal_set_red_home_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.red_home_map)
}

// bool red_borderlands_map = 18;
inline void MapTypeFilter::clear_red_borderlands_map() {
  red_borderlands_map_ = false;
}
inline bool MapTypeFilter::_internal_red_borderlands_map() const {
  return red_borderlands_map_;
}
inline bool MapTypeFilter::red_borderlands_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.red_borderlands_map)
  return _internal_red_borderlands_map();
}
inline void MapTypeFilter::_internal_set_red_borderlands_map(bool value) {
  
  red_borderlands_map_ = value;
}
inline void MapTypeFilter::set_red_borderlands_map(bool value) {
  _internal_set_red_borderlands_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.red_borderlands_map)
}

// bool fortunes_vale_map = 19;
inline void MapTypeFilter::clear_fortunes_vale_map() {
  fortunes_vale_map_ = false;
}
inline bool MapTypeFilter::_internal_fortunes_vale_map() const {
  return fortunes_vale_map_;
}
inline bool MapTypeFilter::fortunes_vale_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.fortunes_vale_map)
  return _internal_fortunes_vale_map();
}
inline void MapTypeFilter::_internal_set_fortunes_vale_map(bool value) {
  
  fortunes_vale_map_ = value;
}
inline void MapTypeFilter::set_fortunes_vale_map(bool value) {
  _internal_set_fortunes_vale_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.fortunes_vale_map)
}

// bool jump_puzzle_map = 20;
inline void MapTypeFilter::clear_jump_puzzle_map() {
  jump_puzzle_map_ = false;
}
inline bool MapTypeFilter::_internal_jump_puzzle_map() const {
  return jump_puzzle_map_;
}
inline bool MapTypeFilter::jump_puzzle_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.jump_puzzle_map)
  return _internal_jump_puzzle_map();
}
inline void MapTypeFilter::_internal_set_jump_puzzle_map(bool value) {
  
  jump_puzzle_map_ = value;
}
inline void MapTypeFilter::set_jump_puzzle_map(bool value) {
  _internal_set_jump_puzzle_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.jump_puzzle_map)
}

// bool obsidian_sanctum_map = 21;
inline void MapTypeFilter::clear_obsidian_sanctum_map() {
  obsidian_sanctum_map_ = false;
}
inline bool MapTypeFilter::_internal_obsidian_sanctum_map() const {
  return obsidian_sanctum_map_;
}
inline bool MapTypeFilter::obsidian_sanctum_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.obsidian_sanctum_map)
  return _internal_obsidian_sanctum_map();
}
inline void MapTypeFilter::_internal_set_obsidian_sanctum_map(bool value) {
  
  obsidian_sanctum_map_ = value;
}
inline void MapTypeFilter::set_obsidian_sanctum_map(bool value) {
  _internal_set_obsidian_sanctum_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.obsidian_sanctum_map)
}

// bool edge_of_the_mists_map = 22;
inline void MapTypeFilter::clear_edge_of_the_mists_map() {
  edge_of_the_mists_map_ = false;
}
inline bool MapTypeFilter::_internal_edge_of_the_mists_map() const {
  return edge_of_the_mists_map_;
}
inline bool MapTypeFilter::edge_of_the_mists_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.edge_of_the_mists_map)
  return _internal_edge_of_the_mists_map();
}
inline void MapTypeFilter::_internal_set_edge_of_the_mists_map(bool value) {
  
  edge_of_the_mists_map_ = value;
}
inline void MapTypeFilter::set_edge_of_the_mists_map(bool value) {
  _internal_set_edge_of_the_mists_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.edge_of_the_mists_map)
}

// bool public_mini_map = 23;
inline void MapTypeFilter::clear_public_mini_map() {
  public_mini_map_ = false;
}
inline bool MapTypeFilter::_internal_public_mini_map() const {
  return public_mini_map_;
}
inline bool MapTypeFilter::public_mini_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.public_mini_map)
  return _internal_public_mini_map();
}
inline void MapTypeFilter::_internal_set_public_mini_map(bool value) {
  
  public_mini_map_ = value;
}
inline void MapTypeFilter::set_public_mini_map(bool value) {
  _internal_set_public_mini_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.public_mini_map)
}

// bool wvw_lounge_map = 24;
inline void MapTypeFilter::clear_wvw_lounge_map() {
  wvw_lounge_map_ = false;
}
inline bool MapTypeFilter::_internal_wvw_lounge_map() const {
  return wvw_lounge_map_;
}
inline bool MapTypeFilter::wvw_lounge_map() const {
  // @@protoc_insertion_point(field_get:MapTypeFilter.wvw_lounge_map)
  return _internal_wvw_lounge_map();
}
inline void MapTypeFilter::_internal_set_wvw_lounge_map(bool value) {
  
  wvw_lounge_map_ = value;
}
inline void MapTypeFilter::set_wvw_lounge_map(bool value) {
  _internal_set_wvw_lounge_map(value);
  // @@protoc_insertion_point(field_set:MapTypeFilter.wvw_lounge_map)
}

// -------------------------------------------------------------------

// MountFilter

// bool raptor = 1;
inline void MountFilter::clear_raptor() {
  raptor_ = false;
}
inline bool MountFilter::_internal_raptor() const {
  return raptor_;
}
inline bool MountFilter::raptor() const {
  // @@protoc_insertion_point(field_get:MountFilter.raptor)
  return _internal_raptor();
}
inline void MountFilter::_internal_set_raptor(bool value) {
  
  raptor_ = value;
}
inline void MountFilter::set_raptor(bool value) {
  _internal_set_raptor(value);
  // @@protoc_insertion_point(field_set:MountFilter.raptor)
}

// bool springer = 2;
inline void MountFilter::clear_springer() {
  springer_ = false;
}
inline bool MountFilter::_internal_springer() const {
  return springer_;
}
inline bool MountFilter::springer() const {
  // @@protoc_insertion_point(field_get:MountFilter.springer)
  return _internal_springer();
}
inline void MountFilter::_internal_set_springer(bool value) {
  
  springer_ = value;
}
inline void MountFilter::set_springer(bool value) {
  _internal_set_springer(value);
  // @@protoc_insertion_point(field_set:MountFilter.springer)
}

// bool skimmer = 3;
inline void MountFilter::clear_skimmer() {
  skimmer_ = false;
}
inline bool MountFilter::_internal_skimmer() const {
  return skimmer_;
}
inline bool MountFilter::skimmer() const {
  // @@protoc_insertion_point(field_get:MountFilter.skimmer)
  return _internal_skimmer();
}
inline void MountFilter::_internal_set_skimmer(bool value) {
  
  skimmer_ = value;
}
inline void MountFilter::set_skimmer(bool value) {
  _internal_set_skimmer(value);
  // @@protoc_insertion_point(field_set:MountFilter.skimmer)
}

// bool jackal = 4;
inline void MountFilter::clear_jackal() {
  jackal_ = false;
}
inline bool MountFilter::_internal_jackal() const {
  return jackal_;
}
inline bool MountFilter::jackal() const {
  // @@protoc_insertion_point(field_get:MountFilter.jackal)
  return _internal_jackal();
}
inline void MountFilter::_internal_set_jackal(bool value) {
  
  jackal_ = value;
}
inline void MountFilter::set_jackal(bool value) {
  _internal_set_jackal(value);
  // @@protoc_insertion_point(field_set:MountFilter.jackal)
}

// bool griffon = 5;
inline void MountFilter::clear_griffon() {
  griffon_ = false;
}
inline bool MountFilter::_internal_griffon() const {
  return griffon_;
}
inline bool MountFilter::griffon() const {
  // @@protoc_insertion_point(field_get:MountFilter.griffon)
  return _internal_griffon();
}
inline void MountFilter::_internal_set_griffon(bool value) {
  
  griffon_ = value;
}
inline void MountFilter::set_griffon(bool value) {
  _internal_set_griffon(value);
  // @@protoc_insertion_point(field_set:MountFilter.griffon)
}

// bool roller_beetle = 6;
inline void MountFilter::clear_roller_beetle() {
  roller_beetle_ = false;
}
inline bool MountFilter::_internal_roller_beetle() const {
  return roller_beetle_;
}
inline bool MountFilter::roller_beetle() const {
  // @@protoc_insertion_point(field_get:MountFilter.roller_beetle)
  return _internal_roller_beetle();
}
inline void MountFilter::_internal_set_roller_beetle(bool value) {
  
  roller_beetle_ = value;
}
inline void MountFilter::set_roller_beetle(bool value) {
  _internal_set_roller_beetle(value);
  // @@protoc_insertion_point(field_set:MountFilter.roller_beetle)
}

// bool warclaw = 7;
inline void MountFilter::clear_warclaw() {
  warclaw_ = false;
}
inline bool MountFilter::_internal_warclaw() const {
  return warclaw_;
}
inline bool MountFilter::warclaw() const {
  // @@protoc_insertion_point(field_get:MountFilter.warclaw)
  return _internal_warclaw();
}
inline void MountFilter::_internal_set_warclaw(bool value) {
  
  warclaw_ = value;
}
inline void MountFilter::set_warclaw(bool value) {
  _internal_set_warclaw(value);
  // @@protoc_insertion_point(field_set:MountFilter.warclaw)
}

// bool skyscalee = 8;
inline void MountFilter::clear_skyscalee() {
  skyscalee_ = false;
}
inline bool MountFilter::_internal_skyscalee() const {
  return skyscalee_;
}
inline bool MountFilter::skyscalee() const {
  // @@protoc_insertion_point(field_get:MountFilter.skyscalee)
  return _internal_skyscalee();
}
inline void MountFilter::_internal_set_skyscalee(bool value) {
  
  skyscalee_ = value;
}
inline void MountFilter::set_skyscalee(bool value) {
  _internal_set_skyscalee(value);
  // @@protoc_insertion_point(field_set:MountFilter.skyscalee)
}

// bool skiff = 9;
inline void MountFilter::clear_skiff() {
  skiff_ = false;
}
inline bool MountFilter::_internal_skiff() const {
  return skiff_;
}
inline bool MountFilter::skiff() const {
  // @@protoc_insertion_point(field_get:MountFilter.skiff)
  return _internal_skiff();
}
inline void MountFilter::_internal_set_skiff(bool value) {
  
  skiff_ = value;
}
inline void MountFilter::set_skiff(bool value) {
  _internal_set_skiff(value);
  // @@protoc_insertion_point(field_set:MountFilter.skiff)
}

// bool seige_turtle = 10;
inline void MountFilter::clear_seige_turtle() {
  seige_turtle_ = false;
}
inline bool MountFilter::_internal_seige_turtle() const {
  return seige_turtle_;
}
inline bool MountFilter::seige_turtle() const {
  // @@protoc_insertion_point(field_get:MountFilter.seige_turtle)
  return _internal_seige_turtle();
}
inline void MountFilter::_internal_set_seige_turtle(bool value) {
  
  seige_turtle_ = value;
}
inline void MountFilter::set_seige_turtle(bool value) {
  _internal_set_seige_turtle(value);
  // @@protoc_insertion_point(field_set:MountFilter.seige_turtle)
}

// -------------------------------------------------------------------

// ProfessionFilter

// bool guardian = 1;
inline void ProfessionFilter::clear_guardian() {
  guardian_ = false;
}
inline bool ProfessionFilter::_internal_guardian() const {
  return guardian_;
}
inline bool ProfessionFilter::guardian() const {
  // @@protoc_insertion_point(field_get:ProfessionFilter.guardian)
  return _internal_guardian();
}
inline void ProfessionFilter::_internal_set_guardian(bool value) {
  
  guardian_ = value;
}
inline void ProfessionFilter::set_guardian(bool value) {
  _internal_set_guardian(value);
  // @@protoc_insertion_point(field_set:ProfessionFilter.guardian)
}

// bool warrior = 2;
inline void ProfessionFilter::clear_warrior() {
  warrior_ = false;
}
inline bool ProfessionFilter::_internal_warrior() const {
  return warrior_;
}
inline bool ProfessionFilter::warrior() const {
  // @@protoc_insertion_point(field_get:ProfessionFilter.warrior)
  return _internal_warrior();
}
inline void ProfessionFilter::_internal_set_warrior(bool value) {
  
  warrior_ = value;
}
inline void ProfessionFilter::set_warrior(bool value) {
  _internal_set_warrior(value);
  // @@protoc_insertion_point(field_set:ProfessionFilter.warrior)
}

// bool engineer = 3;
inline void ProfessionFilter::clear_engineer() {
  engineer_ = false;
}
inline bool ProfessionFilter::_internal_engineer() const {
  return engineer_;
}
inline bool ProfessionFilter::engineer() const {
  // @@protoc_insertion_point(field_get:ProfessionFilter.engineer)
  return _internal_engineer();
}
inline void ProfessionFilter::_internal_set_engineer(bool value) {
  
  engineer_ = value;
}
inline void ProfessionFilter::set_engineer(bool value) {
  _internal_set_engineer(value);
  // @@protoc_insertion_point(field_set:ProfessionFilter.engineer)
}

// bool ranger = 4;
inline void ProfessionFilter::clear_ranger() {
  ranger_ = false;
}
inline bool ProfessionFilter::_internal_ranger() const {
  return ranger_;
}
inline bool ProfessionFilter::ranger() const {
  // @@protoc_insertion_point(field_get:ProfessionFilter.ranger)
  return _internal_ranger();
}
inline void ProfessionFilter::_internal_set_ranger(bool value) {
  
  ranger_ = value;
}
inline void ProfessionFilter::set_ranger(bool value) {
  _internal_set_ranger(value);
  // @@protoc_insertion_point(field_set:ProfessionFilter.ranger)
}

// bool thief = 5;
inline void ProfessionFilter::clear_thief() {
  thief_ = false;
}
inline bool ProfessionFilter::_internal_thief() const {
  return thief_;
}
inline bool ProfessionFilter::thief() const {
  // @@protoc_insertion_point(field_get:ProfessionFilter.thief)
  return _internal_thief();
}
inline void ProfessionFilter::_internal_set_thief(bool value) {
  
  thief_ = value;
}
inline void ProfessionFilter::set_thief(bool value) {
  _internal_set_thief(value);
  // @@protoc_insertion_point(field_set:ProfessionFilter.thief)
}

// bool elementalist = 6;
inline void ProfessionFilter::clear_elementalist() {
  elementalist_ = false;
}
inline bool ProfessionFilter::_internal_elementalist() const {
  return elementalist_;
}
inline bool ProfessionFilter::elementalist() const {
  // @@protoc_insertion_point(field_get:ProfessionFilter.elementalist)
  return _internal_elementalist();
}
inline void ProfessionFilter::_internal_set_elementalist(bool value) {
  
  elementalist_ = value;
}
inline void ProfessionFilter::set_elementalist(bool value) {
  _internal_set_elementalist(value);
  // @@protoc_insertion_point(field_set:ProfessionFilter.elementalist)
}

// bool mesmer = 7;
inline void ProfessionFilter::clear_mesmer() {
  mesmer_ = false;
}
inline bool ProfessionFilter::_internal_mesmer() const {
  return mesmer_;
}
inline bool ProfessionFilter::mesmer() const {
  // @@protoc_insertion_point(field_get:ProfessionFilter.mesmer)
  return _internal_mesmer();
}
inline void ProfessionFilter::_internal_set_mesmer(bool value) {
  
  mesmer_ = value;
}
inline void ProfessionFilter::set_mesmer(bool value) {
  _internal_set_mesmer(value);
  // @@protoc_insertion_point(field_set:ProfessionFilter.mesmer)
}

// bool necromancer = 8;
inline void ProfessionFilter::clear_necromancer() {
  necromancer_ = false;
}
inline bool ProfessionFilter::_internal_necromancer() const {
  return necromancer_;
}
inline bool ProfessionFilter::necromancer() const {
  // @@protoc_insertion_point(field_get:ProfessionFilter.necromancer)
  return _internal_necromancer();
}
inline void ProfessionFilter::_internal_set_necromancer(bool value) {
  
  necromancer_ = value;
}
inline void ProfessionFilter::set_necromancer(bool value) {
  _internal_set_necromancer(value);
  // @@protoc_insertion_point(field_set:ProfessionFilter.necromancer)
}

// bool revenantnt = 9;
inline void ProfessionFilter::clear_revenantnt() {
  revenantnt_ = false;
}
inline bool ProfessionFilter::_internal_revenantnt() const {
  return revenantnt_;
}
inline bool ProfessionFilter::revenantnt() const {
  // @@protoc_insertion_point(field_get:ProfessionFilter.revenantnt)
  return _internal_revenantnt();
}
inline void ProfessionFilter::_internal_set_revenantnt(bool value) {
  
  revenantnt_ = value;
}
inline void ProfessionFilter::set_revenantnt(bool value) {
  _internal_set_revenantnt(value);
  // @@protoc_insertion_point(field_set:ProfessionFilter.revenantnt)
}

// -------------------------------------------------------------------

// SpecializationFilter

// bool elementalist_tempest = 1;
inline void SpecializationFilter::clear_elementalist_tempest() {
  elementalist_tempest_ = false;
}
inline bool SpecializationFilter::_internal_elementalist_tempest() const {
  return elementalist_tempest_;
}
inline bool SpecializationFilter::elementalist_tempest() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.elementalist_tempest)
  return _internal_elementalist_tempest();
}
inline void SpecializationFilter::_internal_set_elementalist_tempest(bool value) {
  
  elementalist_tempest_ = value;
}
inline void SpecializationFilter::set_elementalist_tempest(bool value) {
  _internal_set_elementalist_tempest(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.elementalist_tempest)
}

// bool engineer_scrapper = 2;
inline void SpecializationFilter::clear_engineer_scrapper() {
  engineer_scrapper_ = false;
}
inline bool SpecializationFilter::_internal_engineer_scrapper() const {
  return engineer_scrapper_;
}
inline bool SpecializationFilter::engineer_scrapper() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.engineer_scrapper)
  return _internal_engineer_scrapper();
}
inline void SpecializationFilter::_internal_set_engineer_scrapper(bool value) {
  
  engineer_scrapper_ = value;
}
inline void SpecializationFilter::set_engineer_scrapper(bool value) {
  _internal_set_engineer_scrapper(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.engineer_scrapper)
}

// bool guardian_dragonhunter = 3;
inline void SpecializationFilter::clear_guardian_dragonhunter() {
  guardian_dragonhunter_ = false;
}
inline bool SpecializationFilter::_internal_guardian_dragonhunter() const {
  return guardian_dragonhunter_;
}
inline bool SpecializationFilter::guardian_dragonhunter() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.guardian_dragonhunter)
  return _internal_guardian_dragonhunter();
}
inline void SpecializationFilter::_internal_set_guardian_dragonhunter(bool value) {
  
  guardian_dragonhunter_ = value;
}
inline void SpecializationFilter::set_guardian_dragonhunter(bool value) {
  _internal_set_guardian_dragonhunter(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.guardian_dragonhunter)
}

// bool mesmer_chronomancer = 4;
inline void SpecializationFilter::clear_mesmer_chronomancer() {
  mesmer_chronomancer_ = false;
}
inline bool SpecializationFilter::_internal_mesmer_chronomancer() const {
  return mesmer_chronomancer_;
}
inline bool SpecializationFilter::mesmer_chronomancer() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.mesmer_chronomancer)
  return _internal_mesmer_chronomancer();
}
inline void SpecializationFilter::_internal_set_mesmer_chronomancer(bool value) {
  
  mesmer_chronomancer_ = value;
}
inline void SpecializationFilter::set_mesmer_chronomancer(bool value) {
  _internal_set_mesmer_chronomancer(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.mesmer_chronomancer)
}

// bool necromancer_reaper = 5;
inline void SpecializationFilter::clear_necromancer_reaper() {
  necromancer_reaper_ = false;
}
inline bool SpecializationFilter::_internal_necromancer_reaper() const {
  return necromancer_reaper_;
}
inline bool SpecializationFilter::necromancer_reaper() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.necromancer_reaper)
  return _internal_necromancer_reaper();
}
inline void SpecializationFilter::_internal_set_necromancer_reaper(bool value) {
  
  necromancer_reaper_ = value;
}
inline void SpecializationFilter::set_necromancer_reaper(bool value) {
  _internal_set_necromancer_reaper(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.necromancer_reaper)
}

// bool ranger_druid = 6;
inline void SpecializationFilter::clear_ranger_druid() {
  ranger_druid_ = false;
}
inline bool SpecializationFilter::_internal_ranger_druid() const {
  return ranger_druid_;
}
inline bool SpecializationFilter::ranger_druid() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.ranger_druid)
  return _internal_ranger_druid();
}
inline void SpecializationFilter::_internal_set_ranger_druid(bool value) {
  
  ranger_druid_ = value;
}
inline void SpecializationFilter::set_ranger_druid(bool value) {
  _internal_set_ranger_druid(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.ranger_druid)
}

// bool revenant_herald = 7;
inline void SpecializationFilter::clear_revenant_herald() {
  revenant_herald_ = false;
}
inline bool SpecializationFilter::_internal_revenant_herald() const {
  return revenant_herald_;
}
inline bool SpecializationFilter::revenant_herald() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.revenant_herald)
  return _internal_revenant_herald();
}
inline void SpecializationFilter::_internal_set_revenant_herald(bool value) {
  
  revenant_herald_ = value;
}
inline void SpecializationFilter::set_revenant_herald(bool value) {
  _internal_set_revenant_herald(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.revenant_herald)
}

// bool thief_daredevil = 8;
inline void SpecializationFilter::clear_thief_daredevil() {
  thief_daredevil_ = false;
}
inline bool SpecializationFilter::_internal_thief_daredevil() const {
  return thief_daredevil_;
}
inline bool SpecializationFilter::thief_daredevil() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.thief_daredevil)
  return _internal_thief_daredevil();
}
inline void SpecializationFilter::_internal_set_thief_daredevil(bool value) {
  
  thief_daredevil_ = value;
}
inline void SpecializationFilter::set_thief_daredevil(bool value) {
  _internal_set_thief_daredevil(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.thief_daredevil)
}

// bool warrior_berserker = 9;
inline void SpecializationFilter::clear_warrior_berserker() {
  warrior_berserker_ = false;
}
inline bool SpecializationFilter::_internal_warrior_berserker() const {
  return warrior_berserker_;
}
inline bool SpecializationFilter::warrior_berserker() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.warrior_berserker)
  return _internal_warrior_berserker();
}
inline void SpecializationFilter::_internal_set_warrior_berserker(bool value) {
  
  warrior_berserker_ = value;
}
inline void SpecializationFilter::set_warrior_berserker(bool value) {
  _internal_set_warrior_berserker(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.warrior_berserker)
}

// bool elementalist_weaver = 10;
inline void SpecializationFilter::clear_elementalist_weaver() {
  elementalist_weaver_ = false;
}
inline bool SpecializationFilter::_internal_elementalist_weaver() const {
  return elementalist_weaver_;
}
inline bool SpecializationFilter::elementalist_weaver() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.elementalist_weaver)
  return _internal_elementalist_weaver();
}
inline void SpecializationFilter::_internal_set_elementalist_weaver(bool value) {
  
  elementalist_weaver_ = value;
}
inline void SpecializationFilter::set_elementalist_weaver(bool value) {
  _internal_set_elementalist_weaver(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.elementalist_weaver)
}

// bool engineer_holosmith = 11;
inline void SpecializationFilter::clear_engineer_holosmith() {
  engineer_holosmith_ = false;
}
inline bool SpecializationFilter::_internal_engineer_holosmith() const {
  return engineer_holosmith_;
}
inline bool SpecializationFilter::engineer_holosmith() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.engineer_holosmith)
  return _internal_engineer_holosmith();
}
inline void SpecializationFilter::_internal_set_engineer_holosmith(bool value) {
  
  engineer_holosmith_ = value;
}
inline void SpecializationFilter::set_engineer_holosmith(bool value) {
  _internal_set_engineer_holosmith(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.engineer_holosmith)
}

// bool guardian_firebrand = 12;
inline void SpecializationFilter::clear_guardian_firebrand() {
  guardian_firebrand_ = false;
}
inline bool SpecializationFilter::_internal_guardian_firebrand() const {
  return guardian_firebrand_;
}
inline bool SpecializationFilter::guardian_firebrand() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.guardian_firebrand)
  return _internal_guardian_firebrand();
}
inline void SpecializationFilter::_internal_set_guardian_firebrand(bool value) {
  
  guardian_firebrand_ = value;
}
inline void SpecializationFilter::set_guardian_firebrand(bool value) {
  _internal_set_guardian_firebrand(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.guardian_firebrand)
}

// bool mesmer_mirage = 13;
inline void SpecializationFilter::clear_mesmer_mirage() {
  mesmer_mirage_ = false;
}
inline bool SpecializationFilter::_internal_mesmer_mirage() const {
  return mesmer_mirage_;
}
inline bool SpecializationFilter::mesmer_mirage() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.mesmer_mirage)
  return _internal_mesmer_mirage();
}
inline void SpecializationFilter::_internal_set_mesmer_mirage(bool value) {
  
  mesmer_mirage_ = value;
}
inline void SpecializationFilter::set_mesmer_mirage(bool value) {
  _internal_set_mesmer_mirage(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.mesmer_mirage)
}

// bool necromancer_scourge = 14;
inline void SpecializationFilter::clear_necromancer_scourge() {
  necromancer_scourge_ = false;
}
inline bool SpecializationFilter::_internal_necromancer_scourge() const {
  return necromancer_scourge_;
}
inline bool SpecializationFilter::necromancer_scourge() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.necromancer_scourge)
  return _internal_necromancer_scourge();
}
inline void SpecializationFilter::_internal_set_necromancer_scourge(bool value) {
  
  necromancer_scourge_ = value;
}
inline void SpecializationFilter::set_necromancer_scourge(bool value) {
  _internal_set_necromancer_scourge(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.necromancer_scourge)
}

// bool ranger_soulbeast = 15;
inline void SpecializationFilter::clear_ranger_soulbeast() {
  ranger_soulbeast_ = false;
}
inline bool SpecializationFilter::_internal_ranger_soulbeast() const {
  return ranger_soulbeast_;
}
inline bool SpecializationFilter::ranger_soulbeast() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.ranger_soulbeast)
  return _internal_ranger_soulbeast();
}
inline void SpecializationFilter::_internal_set_ranger_soulbeast(bool value) {
  
  ranger_soulbeast_ = value;
}
inline void SpecializationFilter::set_ranger_soulbeast(bool value) {
  _internal_set_ranger_soulbeast(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.ranger_soulbeast)
}

// bool revenant_renegade = 16;
inline void SpecializationFilter::clear_revenant_renegade() {
  revenant_renegade_ = false;
}
inline bool SpecializationFilter::_internal_revenant_renegade() const {
  return revenant_renegade_;
}
inline bool SpecializationFilter::revenant_renegade() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.revenant_renegade)
  return _internal_revenant_renegade();
}
inline void SpecializationFilter::_internal_set_revenant_renegade(bool value) {
  
  revenant_renegade_ = value;
}
inline void SpecializationFilter::set_revenant_renegade(bool value) {
  _internal_set_revenant_renegade(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.revenant_renegade)
}

// bool thief_deadeye = 17;
inline void SpecializationFilter::clear_thief_deadeye() {
  thief_deadeye_ = false;
}
inline bool SpecializationFilter::_internal_thief_deadeye() const {
  return thief_deadeye_;
}
inline bool SpecializationFilter::thief_deadeye() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.thief_deadeye)
  return _internal_thief_deadeye();
}
inline void SpecializationFilter::_internal_set_thief_deadeye(bool value) {
  
  thief_deadeye_ = value;
}
inline void SpecializationFilter::set_thief_deadeye(bool value) {
  _internal_set_thief_deadeye(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.thief_deadeye)
}

// bool warrior_spellbreaker = 18;
inline void SpecializationFilter::clear_warrior_spellbreaker() {
  warrior_spellbreaker_ = false;
}
inline bool SpecializationFilter::_internal_warrior_spellbreaker() const {
  return warrior_spellbreaker_;
}
inline bool SpecializationFilter::warrior_spellbreaker() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.warrior_spellbreaker)
  return _internal_warrior_spellbreaker();
}
inline void SpecializationFilter::_internal_set_warrior_spellbreaker(bool value) {
  
  warrior_spellbreaker_ = value;
}
inline void SpecializationFilter::set_warrior_spellbreaker(bool value) {
  _internal_set_warrior_spellbreaker(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.warrior_spellbreaker)
}

// bool elmentalist_catalyst = 19;
inline void SpecializationFilter::clear_elmentalist_catalyst() {
  elmentalist_catalyst_ = false;
}
inline bool SpecializationFilter::_internal_elmentalist_catalyst() const {
  return elmentalist_catalyst_;
}
inline bool SpecializationFilter::elmentalist_catalyst() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.elmentalist_catalyst)
  return _internal_elmentalist_catalyst();
}
inline void SpecializationFilter::_internal_set_elmentalist_catalyst(bool value) {
  
  elmentalist_catalyst_ = value;
}
inline void SpecializationFilter::set_elmentalist_catalyst(bool value) {
  _internal_set_elmentalist_catalyst(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.elmentalist_catalyst)
}

// bool engineer_mechanist = 20;
inline void SpecializationFilter::clear_engineer_mechanist() {
  engineer_mechanist_ = false;
}
inline bool SpecializationFilter::_internal_engineer_mechanist() const {
  return engineer_mechanist_;
}
inline bool SpecializationFilter::engineer_mechanist() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.engineer_mechanist)
  return _internal_engineer_mechanist();
}
inline void SpecializationFilter::_internal_set_engineer_mechanist(bool value) {
  
  engineer_mechanist_ = value;
}
inline void SpecializationFilter::set_engineer_mechanist(bool value) {
  _internal_set_engineer_mechanist(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.engineer_mechanist)
}

// bool guardian_willbender = 21;
inline void SpecializationFilter::clear_guardian_willbender() {
  guardian_willbender_ = false;
}
inline bool SpecializationFilter::_internal_guardian_willbender() const {
  return guardian_willbender_;
}
inline bool SpecializationFilter::guardian_willbender() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.guardian_willbender)
  return _internal_guardian_willbender();
}
inline void SpecializationFilter::_internal_set_guardian_willbender(bool value) {
  
  guardian_willbender_ = value;
}
inline void SpecializationFilter::set_guardian_willbender(bool value) {
  _internal_set_guardian_willbender(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.guardian_willbender)
}

// bool mesmer_virtuoso = 22;
inline void SpecializationFilter::clear_mesmer_virtuoso() {
  mesmer_virtuoso_ = false;
}
inline bool SpecializationFilter::_internal_mesmer_virtuoso() const {
  return mesmer_virtuoso_;
}
inline bool SpecializationFilter::mesmer_virtuoso() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.mesmer_virtuoso)
  return _internal_mesmer_virtuoso();
}
inline void SpecializationFilter::_internal_set_mesmer_virtuoso(bool value) {
  
  mesmer_virtuoso_ = value;
}
inline void SpecializationFilter::set_mesmer_virtuoso(bool value) {
  _internal_set_mesmer_virtuoso(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.mesmer_virtuoso)
}

// bool necromancer_harbinger = 23;
inline void SpecializationFilter::clear_necromancer_harbinger() {
  necromancer_harbinger_ = false;
}
inline bool SpecializationFilter::_internal_necromancer_harbinger() const {
  return necromancer_harbinger_;
}
inline bool SpecializationFilter::necromancer_harbinger() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.necromancer_harbinger)
  return _internal_necromancer_harbinger();
}
inline void SpecializationFilter::_internal_set_necromancer_harbinger(bool value) {
  
  necromancer_harbinger_ = value;
}
inline void SpecializationFilter::set_necromancer_harbinger(bool value) {
  _internal_set_necromancer_harbinger(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.necromancer_harbinger)
}

// bool ranger_untamed = 24;
inline void SpecializationFilter::clear_ranger_untamed() {
  ranger_untamed_ = false;
}
inline bool SpecializationFilter::_internal_ranger_untamed() const {
  return ranger_untamed_;
}
inline bool SpecializationFilter::ranger_untamed() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.ranger_untamed)
  return _internal_ranger_untamed();
}
inline void SpecializationFilter::_internal_set_ranger_untamed(bool value) {
  
  ranger_untamed_ = value;
}
inline void SpecializationFilter::set_ranger_untamed(bool value) {
  _internal_set_ranger_untamed(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.ranger_untamed)
}

// bool revenant_vindicator = 25;
inline void SpecializationFilter::clear_revenant_vindicator() {
  revenant_vindicator_ = false;
}
inline bool SpecializationFilter::_internal_revenant_vindicator() const {
  return revenant_vindicator_;
}
inline bool SpecializationFilter::revenant_vindicator() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.revenant_vindicator)
  return _internal_revenant_vindicator();
}
inline void SpecializationFilter::_internal_set_revenant_vindicator(bool value) {
  
  revenant_vindicator_ = value;
}
inline void SpecializationFilter::set_revenant_vindicator(bool value) {
  _internal_set_revenant_vindicator(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.revenant_vindicator)
}

// bool thief_specter = 26;
inline void SpecializationFilter::clear_thief_specter() {
  thief_specter_ = false;
}
inline bool SpecializationFilter::_internal_thief_specter() const {
  return thief_specter_;
}
inline bool SpecializationFilter::thief_specter() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.thief_specter)
  return _internal_thief_specter();
}
inline void SpecializationFilter::_internal_set_thief_specter(bool value) {
  
  thief_specter_ = value;
}
inline void SpecializationFilter::set_thief_specter(bool value) {
  _internal_set_thief_specter(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.thief_specter)
}

// bool warrior_bladesworn = 27;
inline void SpecializationFilter::clear_warrior_bladesworn() {
  warrior_bladesworn_ = false;
}
inline bool SpecializationFilter::_internal_warrior_bladesworn() const {
  return warrior_bladesworn_;
}
inline bool SpecializationFilter::warrior_bladesworn() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.warrior_bladesworn)
  return _internal_warrior_bladesworn();
}
inline void SpecializationFilter::_internal_set_warrior_bladesworn(bool value) {
  
  warrior_bladesworn_ = value;
}
inline void SpecializationFilter::set_warrior_bladesworn(bool value) {
  _internal_set_warrior_bladesworn(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.warrior_bladesworn)
}

// bool elementalist_air = 28;
inline void SpecializationFilter::clear_elementalist_air() {
  elementalist_air_ = false;
}
inline bool SpecializationFilter::_internal_elementalist_air() const {
  return elementalist_air_;
}
inline bool SpecializationFilter::elementalist_air() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.elementalist_air)
  return _internal_elementalist_air();
}
inline void SpecializationFilter::_internal_set_elementalist_air(bool value) {
  
  elementalist_air_ = value;
}
inline void SpecializationFilter::set_elementalist_air(bool value) {
  _internal_set_elementalist_air(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.elementalist_air)
}

// bool elementalist_arcane = 29;
inline void SpecializationFilter::clear_elementalist_arcane() {
  elementalist_arcane_ = false;
}
inline bool SpecializationFilter::_internal_elementalist_arcane() const {
  return elementalist_arcane_;
}
inline bool SpecializationFilter::elementalist_arcane() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.elementalist_arcane)
  return _internal_elementalist_arcane();
}
inline void SpecializationFilter::_internal_set_elementalist_arcane(bool value) {
  
  elementalist_arcane_ = value;
}
inline void SpecializationFilter::set_elementalist_arcane(bool value) {
  _internal_set_elementalist_arcane(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.elementalist_arcane)
}

// bool elementalist_earth = 30;
inline void SpecializationFilter::clear_elementalist_earth() {
  elementalist_earth_ = false;
}
inline bool SpecializationFilter::_internal_elementalist_earth() const {
  return elementalist_earth_;
}
inline bool SpecializationFilter::elementalist_earth() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.elementalist_earth)
  return _internal_elementalist_earth();
}
inline void SpecializationFilter::_internal_set_elementalist_earth(bool value) {
  
  elementalist_earth_ = value;
}
inline void SpecializationFilter::set_elementalist_earth(bool value) {
  _internal_set_elementalist_earth(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.elementalist_earth)
}

// bool elementalist_fire = 31;
inline void SpecializationFilter::clear_elementalist_fire() {
  elementalist_fire_ = false;
}
inline bool SpecializationFilter::_internal_elementalist_fire() const {
  return elementalist_fire_;
}
inline bool SpecializationFilter::elementalist_fire() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.elementalist_fire)
  return _internal_elementalist_fire();
}
inline void SpecializationFilter::_internal_set_elementalist_fire(bool value) {
  
  elementalist_fire_ = value;
}
inline void SpecializationFilter::set_elementalist_fire(bool value) {
  _internal_set_elementalist_fire(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.elementalist_fire)
}

// bool elementalist_water = 32;
inline void SpecializationFilter::clear_elementalist_water() {
  elementalist_water_ = false;
}
inline bool SpecializationFilter::_internal_elementalist_water() const {
  return elementalist_water_;
}
inline bool SpecializationFilter::elementalist_water() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.elementalist_water)
  return _internal_elementalist_water();
}
inline void SpecializationFilter::_internal_set_elementalist_water(bool value) {
  
  elementalist_water_ = value;
}
inline void SpecializationFilter::set_elementalist_water(bool value) {
  _internal_set_elementalist_water(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.elementalist_water)
}

// bool engineer_alchemy = 33;
inline void SpecializationFilter::clear_engineer_alchemy() {
  engineer_alchemy_ = false;
}
inline bool SpecializationFilter::_internal_engineer_alchemy() const {
  return engineer_alchemy_;
}
inline bool SpecializationFilter::engineer_alchemy() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.engineer_alchemy)
  return _internal_engineer_alchemy();
}
inline void SpecializationFilter::_internal_set_engineer_alchemy(bool value) {
  
  engineer_alchemy_ = value;
}
inline void SpecializationFilter::set_engineer_alchemy(bool value) {
  _internal_set_engineer_alchemy(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.engineer_alchemy)
}

// bool engineer_explosives = 34;
inline void SpecializationFilter::clear_engineer_explosives() {
  engineer_explosives_ = false;
}
inline bool SpecializationFilter::_internal_engineer_explosives() const {
  return engineer_explosives_;
}
inline bool SpecializationFilter::engineer_explosives() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.engineer_explosives)
  return _internal_engineer_explosives();
}
inline void SpecializationFilter::_internal_set_engineer_explosives(bool value) {
  
  engineer_explosives_ = value;
}
inline void SpecializationFilter::set_engineer_explosives(bool value) {
  _internal_set_engineer_explosives(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.engineer_explosives)
}

// bool engineer_firearms = 35;
inline void SpecializationFilter::clear_engineer_firearms() {
  engineer_firearms_ = false;
}
inline bool SpecializationFilter::_internal_engineer_firearms() const {
  return engineer_firearms_;
}
inline bool SpecializationFilter::engineer_firearms() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.engineer_firearms)
  return _internal_engineer_firearms();
}
inline void SpecializationFilter::_internal_set_engineer_firearms(bool value) {
  
  engineer_firearms_ = value;
}
inline void SpecializationFilter::set_engineer_firearms(bool value) {
  _internal_set_engineer_firearms(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.engineer_firearms)
}

// bool engineer_inventions = 36;
inline void SpecializationFilter::clear_engineer_inventions() {
  engineer_inventions_ = false;
}
inline bool SpecializationFilter::_internal_engineer_inventions() const {
  return engineer_inventions_;
}
inline bool SpecializationFilter::engineer_inventions() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.engineer_inventions)
  return _internal_engineer_inventions();
}
inline void SpecializationFilter::_internal_set_engineer_inventions(bool value) {
  
  engineer_inventions_ = value;
}
inline void SpecializationFilter::set_engineer_inventions(bool value) {
  _internal_set_engineer_inventions(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.engineer_inventions)
}

// bool engineer_tools = 37;
inline void SpecializationFilter::clear_engineer_tools() {
  engineer_tools_ = false;
}
inline bool SpecializationFilter::_internal_engineer_tools() const {
  return engineer_tools_;
}
inline bool SpecializationFilter::engineer_tools() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.engineer_tools)
  return _internal_engineer_tools();
}
inline void SpecializationFilter::_internal_set_engineer_tools(bool value) {
  
  engineer_tools_ = value;
}
inline void SpecializationFilter::set_engineer_tools(bool value) {
  _internal_set_engineer_tools(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.engineer_tools)
}

// bool guardian_honor = 38;
inline void SpecializationFilter::clear_guardian_honor() {
  guardian_honor_ = false;
}
inline bool SpecializationFilter::_internal_guardian_honor() const {
  return guardian_honor_;
}
inline bool SpecializationFilter::guardian_honor() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.guardian_honor)
  return _internal_guardian_honor();
}
inline void SpecializationFilter::_internal_set_guardian_honor(bool value) {
  
  guardian_honor_ = value;
}
inline void SpecializationFilter::set_guardian_honor(bool value) {
  _internal_set_guardian_honor(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.guardian_honor)
}

// bool guardian_radiance = 39;
inline void SpecializationFilter::clear_guardian_radiance() {
  guardian_radiance_ = false;
}
inline bool SpecializationFilter::_internal_guardian_radiance() const {
  return guardian_radiance_;
}
inline bool SpecializationFilter::guardian_radiance() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.guardian_radiance)
  return _internal_guardian_radiance();
}
inline void SpecializationFilter::_internal_set_guardian_radiance(bool value) {
  
  guardian_radiance_ = value;
}
inline void SpecializationFilter::set_guardian_radiance(bool value) {
  _internal_set_guardian_radiance(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.guardian_radiance)
}

// bool guardian_valor = 40;
inline void SpecializationFilter::clear_guardian_valor() {
  guardian_valor_ = false;
}
inline bool SpecializationFilter::_internal_guardian_valor() const {
  return guardian_valor_;
}
inline bool SpecializationFilter::guardian_valor() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.guardian_valor)
  return _internal_guardian_valor();
}
inline void SpecializationFilter::_internal_set_guardian_valor(bool value) {
  
  guardian_valor_ = value;
}
inline void SpecializationFilter::set_guardian_valor(bool value) {
  _internal_set_guardian_valor(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.guardian_valor)
}

// bool guardian_virtues = 41;
inline void SpecializationFilter::clear_guardian_virtues() {
  guardian_virtues_ = false;
}
inline bool SpecializationFilter::_internal_guardian_virtues() const {
  return guardian_virtues_;
}
inline bool SpecializationFilter::guardian_virtues() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.guardian_virtues)
  return _internal_guardian_virtues();
}
inline void SpecializationFilter::_internal_set_guardian_virtues(bool value) {
  
  guardian_virtues_ = value;
}
inline void SpecializationFilter::set_guardian_virtues(bool value) {
  _internal_set_guardian_virtues(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.guardian_virtues)
}

// bool guardian_zeal = 42;
inline void SpecializationFilter::clear_guardian_zeal() {
  guardian_zeal_ = false;
}
inline bool SpecializationFilter::_internal_guardian_zeal() const {
  return guardian_zeal_;
}
inline bool SpecializationFilter::guardian_zeal() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.guardian_zeal)
  return _internal_guardian_zeal();
}
inline void SpecializationFilter::_internal_set_guardian_zeal(bool value) {
  
  guardian_zeal_ = value;
}
inline void SpecializationFilter::set_guardian_zeal(bool value) {
  _internal_set_guardian_zeal(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.guardian_zeal)
}

// bool mesmer_chaos = 43;
inline void SpecializationFilter::clear_mesmer_chaos() {
  mesmer_chaos_ = false;
}
inline bool SpecializationFilter::_internal_mesmer_chaos() const {
  return mesmer_chaos_;
}
inline bool SpecializationFilter::mesmer_chaos() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.mesmer_chaos)
  return _internal_mesmer_chaos();
}
inline void SpecializationFilter::_internal_set_mesmer_chaos(bool value) {
  
  mesmer_chaos_ = value;
}
inline void SpecializationFilter::set_mesmer_chaos(bool value) {
  _internal_set_mesmer_chaos(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.mesmer_chaos)
}

// bool mesmer_domination = 44;
inline void SpecializationFilter::clear_mesmer_domination() {
  mesmer_domination_ = false;
}
inline bool SpecializationFilter::_internal_mesmer_domination() const {
  return mesmer_domination_;
}
inline bool SpecializationFilter::mesmer_domination() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.mesmer_domination)
  return _internal_mesmer_domination();
}
inline void SpecializationFilter::_internal_set_mesmer_domination(bool value) {
  
  mesmer_domination_ = value;
}
inline void SpecializationFilter::set_mesmer_domination(bool value) {
  _internal_set_mesmer_domination(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.mesmer_domination)
}

// bool mesmer_dueling = 45;
inline void SpecializationFilter::clear_mesmer_dueling() {
  mesmer_dueling_ = false;
}
inline bool SpecializationFilter::_internal_mesmer_dueling() const {
  return mesmer_dueling_;
}
inline bool SpecializationFilter::mesmer_dueling() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.mesmer_dueling)
  return _internal_mesmer_dueling();
}
inline void SpecializationFilter::_internal_set_mesmer_dueling(bool value) {
  
  mesmer_dueling_ = value;
}
inline void SpecializationFilter::set_mesmer_dueling(bool value) {
  _internal_set_mesmer_dueling(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.mesmer_dueling)
}

// bool mesmer_illusions = 46;
inline void SpecializationFilter::clear_mesmer_illusions() {
  mesmer_illusions_ = false;
}
inline bool SpecializationFilter::_internal_mesmer_illusions() const {
  return mesmer_illusions_;
}
inline bool SpecializationFilter::mesmer_illusions() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.mesmer_illusions)
  return _internal_mesmer_illusions();
}
inline void SpecializationFilter::_internal_set_mesmer_illusions(bool value) {
  
  mesmer_illusions_ = value;
}
inline void SpecializationFilter::set_mesmer_illusions(bool value) {
  _internal_set_mesmer_illusions(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.mesmer_illusions)
}

// bool mesmer_inspiration = 47;
inline void SpecializationFilter::clear_mesmer_inspiration() {
  mesmer_inspiration_ = false;
}
inline bool SpecializationFilter::_internal_mesmer_inspiration() const {
  return mesmer_inspiration_;
}
inline bool SpecializationFilter::mesmer_inspiration() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.mesmer_inspiration)
  return _internal_mesmer_inspiration();
}
inline void SpecializationFilter::_internal_set_mesmer_inspiration(bool value) {
  
  mesmer_inspiration_ = value;
}
inline void SpecializationFilter::set_mesmer_inspiration(bool value) {
  _internal_set_mesmer_inspiration(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.mesmer_inspiration)
}

// bool necromancer_blood_magic = 48;
inline void SpecializationFilter::clear_necromancer_blood_magic() {
  necromancer_blood_magic_ = false;
}
inline bool SpecializationFilter::_internal_necromancer_blood_magic() const {
  return necromancer_blood_magic_;
}
inline bool SpecializationFilter::necromancer_blood_magic() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.necromancer_blood_magic)
  return _internal_necromancer_blood_magic();
}
inline void SpecializationFilter::_internal_set_necromancer_blood_magic(bool value) {
  
  necromancer_blood_magic_ = value;
}
inline void SpecializationFilter::set_necromancer_blood_magic(bool value) {
  _internal_set_necromancer_blood_magic(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.necromancer_blood_magic)
}

// bool necromancer_curses = 49;
inline void SpecializationFilter::clear_necromancer_curses() {
  necromancer_curses_ = false;
}
inline bool SpecializationFilter::_internal_necromancer_curses() const {
  return necromancer_curses_;
}
inline bool SpecializationFilter::necromancer_curses() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.necromancer_curses)
  return _internal_necromancer_curses();
}
inline void SpecializationFilter::_internal_set_necromancer_curses(bool value) {
  
  necromancer_curses_ = value;
}
inline void SpecializationFilter::set_necromancer_curses(bool value) {
  _internal_set_necromancer_curses(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.necromancer_curses)
}

// bool necromancer_death_magic = 50;
inline void SpecializationFilter::clear_necromancer_death_magic() {
  necromancer_death_magic_ = false;
}
inline bool SpecializationFilter::_internal_necromancer_death_magic() const {
  return necromancer_death_magic_;
}
inline bool SpecializationFilter::necromancer_death_magic() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.necromancer_death_magic)
  return _internal_necromancer_death_magic();
}
inline void SpecializationFilter::_internal_set_necromancer_death_magic(bool value) {
  
  necromancer_death_magic_ = value;
}
inline void SpecializationFilter::set_necromancer_death_magic(bool value) {
  _internal_set_necromancer_death_magic(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.necromancer_death_magic)
}

// bool necromancer_soul_reaping = 51;
inline void SpecializationFilter::clear_necromancer_soul_reaping() {
  necromancer_soul_reaping_ = false;
}
inline bool SpecializationFilter::_internal_necromancer_soul_reaping() const {
  return necromancer_soul_reaping_;
}
inline bool SpecializationFilter::necromancer_soul_reaping() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.necromancer_soul_reaping)
  return _internal_necromancer_soul_reaping();
}
inline void SpecializationFilter::_internal_set_necromancer_soul_reaping(bool value) {
  
  necromancer_soul_reaping_ = value;
}
inline void SpecializationFilter::set_necromancer_soul_reaping(bool value) {
  _internal_set_necromancer_soul_reaping(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.necromancer_soul_reaping)
}

// bool necromancer_spite = 52;
inline void SpecializationFilter::clear_necromancer_spite() {
  necromancer_spite_ = false;
}
inline bool SpecializationFilter::_internal_necromancer_spite() const {
  return necromancer_spite_;
}
inline bool SpecializationFilter::necromancer_spite() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.necromancer_spite)
  return _internal_necromancer_spite();
}
inline void SpecializationFilter::_internal_set_necromancer_spite(bool value) {
  
  necromancer_spite_ = value;
}
inline void SpecializationFilter::set_necromancer_spite(bool value) {
  _internal_set_necromancer_spite(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.necromancer_spite)
}

// bool ranger_beastmastery = 53;
inline void SpecializationFilter::clear_ranger_beastmastery() {
  ranger_beastmastery_ = false;
}
inline bool SpecializationFilter::_internal_ranger_beastmastery() const {
  return ranger_beastmastery_;
}
inline bool SpecializationFilter::ranger_beastmastery() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.ranger_beastmastery)
  return _internal_ranger_beastmastery();
}
inline void SpecializationFilter::_internal_set_ranger_beastmastery(bool value) {
  
  ranger_beastmastery_ = value;
}
inline void SpecializationFilter::set_ranger_beastmastery(bool value) {
  _internal_set_ranger_beastmastery(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.ranger_beastmastery)
}

// bool ranger_marksmanship = 54;
inline void SpecializationFilter::clear_ranger_marksmanship() {
  ranger_marksmanship_ = false;
}
inline bool SpecializationFilter::_internal_ranger_marksmanship() const {
  return ranger_marksmanship_;
}
inline bool SpecializationFilter::ranger_marksmanship() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.ranger_marksmanship)
  return _internal_ranger_marksmanship();
}
inline void SpecializationFilter::_internal_set_ranger_marksmanship(bool value) {
  
  ranger_marksmanship_ = value;
}
inline void SpecializationFilter::set_ranger_marksmanship(bool value) {
  _internal_set_ranger_marksmanship(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.ranger_marksmanship)
}

// bool ranger_nature_magic = 55;
inline void SpecializationFilter::clear_ranger_nature_magic() {
  ranger_nature_magic_ = false;
}
inline bool SpecializationFilter::_internal_ranger_nature_magic() const {
  return ranger_nature_magic_;
}
inline bool SpecializationFilter::ranger_nature_magic() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.ranger_nature_magic)
  return _internal_ranger_nature_magic();
}
inline void SpecializationFilter::_internal_set_ranger_nature_magic(bool value) {
  
  ranger_nature_magic_ = value;
}
inline void SpecializationFilter::set_ranger_nature_magic(bool value) {
  _internal_set_ranger_nature_magic(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.ranger_nature_magic)
}

// bool ranger_skirmishing = 56;
inline void SpecializationFilter::clear_ranger_skirmishing() {
  ranger_skirmishing_ = false;
}
inline bool SpecializationFilter::_internal_ranger_skirmishing() const {
  return ranger_skirmishing_;
}
inline bool SpecializationFilter::ranger_skirmishing() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.ranger_skirmishing)
  return _internal_ranger_skirmishing();
}
inline void SpecializationFilter::_internal_set_ranger_skirmishing(bool value) {
  
  ranger_skirmishing_ = value;
}
inline void SpecializationFilter::set_ranger_skirmishing(bool value) {
  _internal_set_ranger_skirmishing(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.ranger_skirmishing)
}

// bool ranger_wilderness_survival = 57;
inline void SpecializationFilter::clear_ranger_wilderness_survival() {
  ranger_wilderness_survival_ = false;
}
inline bool SpecializationFilter::_internal_ranger_wilderness_survival() const {
  return ranger_wilderness_survival_;
}
inline bool SpecializationFilter::ranger_wilderness_survival() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.ranger_wilderness_survival)
  return _internal_ranger_wilderness_survival();
}
inline void SpecializationFilter::_internal_set_ranger_wilderness_survival(bool value) {
  
  ranger_wilderness_survival_ = value;
}
inline void SpecializationFilter::set_ranger_wilderness_survival(bool value) {
  _internal_set_ranger_wilderness_survival(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.ranger_wilderness_survival)
}

// bool revenant_corruption = 58;
inline void SpecializationFilter::clear_revenant_corruption() {
  revenant_corruption_ = false;
}
inline bool SpecializationFilter::_internal_revenant_corruption() const {
  return revenant_corruption_;
}
inline bool SpecializationFilter::revenant_corruption() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.revenant_corruption)
  return _internal_revenant_corruption();
}
inline void SpecializationFilter::_internal_set_revenant_corruption(bool value) {
  
  revenant_corruption_ = value;
}
inline void SpecializationFilter::set_revenant_corruption(bool value) {
  _internal_set_revenant_corruption(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.revenant_corruption)
}

// bool revenant_devastation = 59;
inline void SpecializationFilter::clear_revenant_devastation() {
  revenant_devastation_ = false;
}
inline bool SpecializationFilter::_internal_revenant_devastation() const {
  return revenant_devastation_;
}
inline bool SpecializationFilter::revenant_devastation() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.revenant_devastation)
  return _internal_revenant_devastation();
}
inline void SpecializationFilter::_internal_set_revenant_devastation(bool value) {
  
  revenant_devastation_ = value;
}
inline void SpecializationFilter::set_revenant_devastation(bool value) {
  _internal_set_revenant_devastation(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.revenant_devastation)
}

// bool revenant_invocation = 60;
inline void SpecializationFilter::clear_revenant_invocation() {
  revenant_invocation_ = false;
}
inline bool SpecializationFilter::_internal_revenant_invocation() const {
  return revenant_invocation_;
}
inline bool SpecializationFilter::revenant_invocation() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.revenant_invocation)
  return _internal_revenant_invocation();
}
inline void SpecializationFilter::_internal_set_revenant_invocation(bool value) {
  
  revenant_invocation_ = value;
}
inline void SpecializationFilter::set_revenant_invocation(bool value) {
  _internal_set_revenant_invocation(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.revenant_invocation)
}

// bool revenant_retribution = 61;
inline void SpecializationFilter::clear_revenant_retribution() {
  revenant_retribution_ = false;
}
inline bool SpecializationFilter::_internal_revenant_retribution() const {
  return revenant_retribution_;
}
inline bool SpecializationFilter::revenant_retribution() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.revenant_retribution)
  return _internal_revenant_retribution();
}
inline void SpecializationFilter::_internal_set_revenant_retribution(bool value) {
  
  revenant_retribution_ = value;
}
inline void SpecializationFilter::set_revenant_retribution(bool value) {
  _internal_set_revenant_retribution(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.revenant_retribution)
}

// bool revenant_salvation = 62;
inline void SpecializationFilter::clear_revenant_salvation() {
  revenant_salvation_ = false;
}
inline bool SpecializationFilter::_internal_revenant_salvation() const {
  return revenant_salvation_;
}
inline bool SpecializationFilter::revenant_salvation() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.revenant_salvation)
  return _internal_revenant_salvation();
}
inline void SpecializationFilter::_internal_set_revenant_salvation(bool value) {
  
  revenant_salvation_ = value;
}
inline void SpecializationFilter::set_revenant_salvation(bool value) {
  _internal_set_revenant_salvation(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.revenant_salvation)
}

// bool thief_acrobatics = 63;
inline void SpecializationFilter::clear_thief_acrobatics() {
  thief_acrobatics_ = false;
}
inline bool SpecializationFilter::_internal_thief_acrobatics() const {
  return thief_acrobatics_;
}
inline bool SpecializationFilter::thief_acrobatics() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.thief_acrobatics)
  return _internal_thief_acrobatics();
}
inline void SpecializationFilter::_internal_set_thief_acrobatics(bool value) {
  
  thief_acrobatics_ = value;
}
inline void SpecializationFilter::set_thief_acrobatics(bool value) {
  _internal_set_thief_acrobatics(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.thief_acrobatics)
}

// bool thief_critical_strikes = 64;
inline void SpecializationFilter::clear_thief_critical_strikes() {
  thief_critical_strikes_ = false;
}
inline bool SpecializationFilter::_internal_thief_critical_strikes() const {
  return thief_critical_strikes_;
}
inline bool SpecializationFilter::thief_critical_strikes() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.thief_critical_strikes)
  return _internal_thief_critical_strikes();
}
inline void SpecializationFilter::_internal_set_thief_critical_strikes(bool value) {
  
  thief_critical_strikes_ = value;
}
inline void SpecializationFilter::set_thief_critical_strikes(bool value) {
  _internal_set_thief_critical_strikes(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.thief_critical_strikes)
}

// bool thief_deadly_arts = 65;
inline void SpecializationFilter::clear_thief_deadly_arts() {
  thief_deadly_arts_ = false;
}
inline bool SpecializationFilter::_internal_thief_deadly_arts() const {
  return thief_deadly_arts_;
}
inline bool SpecializationFilter::thief_deadly_arts() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.thief_deadly_arts)
  return _internal_thief_deadly_arts();
}
inline void SpecializationFilter::_internal_set_thief_deadly_arts(bool value) {
  
  thief_deadly_arts_ = value;
}
inline void SpecializationFilter::set_thief_deadly_arts(bool value) {
  _internal_set_thief_deadly_arts(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.thief_deadly_arts)
}

// bool thief_shadow_arts = 66;
inline void SpecializationFilter::clear_thief_shadow_arts() {
  thief_shadow_arts_ = false;
}
inline bool SpecializationFilter::_internal_thief_shadow_arts() const {
  return thief_shadow_arts_;
}
inline bool SpecializationFilter::thief_shadow_arts() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.thief_shadow_arts)
  return _internal_thief_shadow_arts();
}
inline void SpecializationFilter::_internal_set_thief_shadow_arts(bool value) {
  
  thief_shadow_arts_ = value;
}
inline void SpecializationFilter::set_thief_shadow_arts(bool value) {
  _internal_set_thief_shadow_arts(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.thief_shadow_arts)
}

// bool thief_trickery = 67;
inline void SpecializationFilter::clear_thief_trickery() {
  thief_trickery_ = false;
}
inline bool SpecializationFilter::_internal_thief_trickery() const {
  return thief_trickery_;
}
inline bool SpecializationFilter::thief_trickery() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.thief_trickery)
  return _internal_thief_trickery();
}
inline void SpecializationFilter::_internal_set_thief_trickery(bool value) {
  
  thief_trickery_ = value;
}
inline void SpecializationFilter::set_thief_trickery(bool value) {
  _internal_set_thief_trickery(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.thief_trickery)
}

// bool warrior_arms = 68;
inline void SpecializationFilter::clear_warrior_arms() {
  warrior_arms_ = false;
}
inline bool SpecializationFilter::_internal_warrior_arms() const {
  return warrior_arms_;
}
inline bool SpecializationFilter::warrior_arms() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.warrior_arms)
  return _internal_warrior_arms();
}
inline void SpecializationFilter::_internal_set_warrior_arms(bool value) {
  
  warrior_arms_ = value;
}
inline void SpecializationFilter::set_warrior_arms(bool value) {
  _internal_set_warrior_arms(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.warrior_arms)
}

// bool warrior_defense = 69;
inline void SpecializationFilter::clear_warrior_defense() {
  warrior_defense_ = false;
}
inline bool SpecializationFilter::_internal_warrior_defense() const {
  return warrior_defense_;
}
inline bool SpecializationFilter::warrior_defense() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.warrior_defense)
  return _internal_warrior_defense();
}
inline void SpecializationFilter::_internal_set_warrior_defense(bool value) {
  
  warrior_defense_ = value;
}
inline void SpecializationFilter::set_warrior_defense(bool value) {
  _internal_set_warrior_defense(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.warrior_defense)
}

// bool warrior_discipline = 70;
inline void SpecializationFilter::clear_warrior_discipline() {
  warrior_discipline_ = false;
}
inline bool SpecializationFilter::_internal_warrior_discipline() const {
  return warrior_discipline_;
}
inline bool SpecializationFilter::warrior_discipline() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.warrior_discipline)
  return _internal_warrior_discipline();
}
inline void SpecializationFilter::_internal_set_warrior_discipline(bool value) {
  
  warrior_discipline_ = value;
}
inline void SpecializationFilter::set_warrior_discipline(bool value) {
  _internal_set_warrior_discipline(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.warrior_discipline)
}

// bool warrior_strength = 71;
inline void SpecializationFilter::clear_warrior_strength() {
  warrior_strength_ = false;
}
inline bool SpecializationFilter::_internal_warrior_strength() const {
  return warrior_strength_;
}
inline bool SpecializationFilter::warrior_strength() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.warrior_strength)
  return _internal_warrior_strength();
}
inline void SpecializationFilter::_internal_set_warrior_strength(bool value) {
  
  warrior_strength_ = value;
}
inline void SpecializationFilter::set_warrior_strength(bool value) {
  _internal_set_warrior_strength(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.warrior_strength)
}

// bool warrior_tactics = 72;
inline void SpecializationFilter::clear_warrior_tactics() {
  warrior_tactics_ = false;
}
inline bool SpecializationFilter::_internal_warrior_tactics() const {
  return warrior_tactics_;
}
inline bool SpecializationFilter::warrior_tactics() const {
  // @@protoc_insertion_point(field_get:SpecializationFilter.warrior_tactics)
  return _internal_warrior_tactics();
}
inline void SpecializationFilter::_internal_set_warrior_tactics(bool value) {
  
  warrior_tactics_ = value;
}
inline void SpecializationFilter::set_warrior_tactics(bool value) {
  _internal_set_warrior_tactics(value);
  // @@protoc_insertion_point(field_set:SpecializationFilter.warrior_tactics)
}

// -------------------------------------------------------------------

// SpeciesFilter

// bool asura = 1;
inline void SpeciesFilter::clear_asura() {
  asura_ = false;
}
inline bool SpeciesFilter::_internal_asura() const {
  return asura_;
}
inline bool SpeciesFilter::asura() const {
  // @@protoc_insertion_point(field_get:SpeciesFilter.asura)
  return _internal_asura();
}
inline void SpeciesFilter::_internal_set_asura(bool value) {
  
  asura_ = value;
}
inline void SpeciesFilter::set_asura(bool value) {
  _internal_set_asura(value);
  // @@protoc_insertion_point(field_set:SpeciesFilter.asura)
}

// bool charr = 2;
inline void SpeciesFilter::clear_charr() {
  charr_ = false;
}
inline bool SpeciesFilter::_internal_charr() const {
  return charr_;
}
inline bool SpeciesFilter::charr() const {
  // @@protoc_insertion_point(field_get:SpeciesFilter.charr)
  return _internal_charr();
}
inline void SpeciesFilter::_internal_set_charr(bool value) {
  
  charr_ = value;
}
inline void SpeciesFilter::set_charr(bool value) {
  _internal_set_charr(value);
  // @@protoc_insertion_point(field_set:SpeciesFilter.charr)
}

// bool human = 3;
inline void SpeciesFilter::clear_human() {
  human_ = false;
}
inline bool SpeciesFilter::_internal_human() const {
  return human_;
}
inline bool SpeciesFilter::human() const {
  // @@protoc_insertion_point(field_get:SpeciesFilter.human)
  return _internal_human();
}
inline void SpeciesFilter::_internal_set_human(bool value) {
  
  human_ = value;
}
inline void SpeciesFilter::set_human(bool value) {
  _internal_set_human(value);
  // @@protoc_insertion_point(field_set:SpeciesFilter.human)
}

// bool norn = 4;
inline void SpeciesFilter::clear_norn() {
  norn_ = false;
}
inline bool SpeciesFilter::_internal_norn() const {
  return norn_;
}
inline bool SpeciesFilter::norn() const {
  // @@protoc_insertion_point(field_get:SpeciesFilter.norn)
  return _internal_norn();
}
inline void SpeciesFilter::_internal_set_norn(bool value) {
  
  norn_ = value;
}
inline void SpeciesFilter::set_norn(bool value) {
  _internal_set_norn(value);
  // @@protoc_insertion_point(field_set:SpeciesFilter.norn)
}

// bool sylvari = 5;
inline void SpeciesFilter::clear_sylvari() {
  sylvari_ = false;
}
inline bool SpeciesFilter::_internal_sylvari() const {
  return sylvari_;
}
inline bool SpeciesFilter::sylvari() const {
  // @@protoc_insertion_point(field_get:SpeciesFilter.sylvari)
  return _internal_sylvari();
}
inline void SpeciesFilter::_internal_set_sylvari(bool value) {
  
  sylvari_ = value;
}
inline void SpeciesFilter::set_sylvari(bool value) {
  _internal_set_sylvari(value);
  // @@protoc_insertion_point(field_set:SpeciesFilter.sylvari)
}

// -------------------------------------------------------------------

// TrailData

// string trail_data = 1;
inline void TrailData::clear_trail_data() {
  trail_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrailData::trail_data() const {
  // @@protoc_insertion_point(field_get:TrailData.trail_data)
  return _internal_trail_data();
}
inline void TrailData::set_trail_data(const std::string& value) {
  _internal_set_trail_data(value);
  // @@protoc_insertion_point(field_set:TrailData.trail_data)
}
inline std::string* TrailData::mutable_trail_data() {
  // @@protoc_insertion_point(field_mutable:TrailData.trail_data)
  return _internal_mutable_trail_data();
}
inline const std::string& TrailData::_internal_trail_data() const {
  return trail_data_.Get();
}
inline void TrailData::_internal_set_trail_data(const std::string& value) {
  
  trail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrailData::set_trail_data(std::string&& value) {
  
  trail_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrailData.trail_data)
}
inline void TrailData::set_trail_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrailData.trail_data)
}
inline void TrailData::set_trail_data(const char* value,
    size_t size) {
  
  trail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrailData.trail_data)
}
inline std::string* TrailData::_internal_mutable_trail_data() {
  
  return trail_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrailData::release_trail_data() {
  // @@protoc_insertion_point(field_release:TrailData.trail_data)
  return trail_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrailData::set_allocated_trail_data(std::string* trail_data) {
  if (trail_data != nullptr) {
    
  } else {
    
  }
  trail_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trail_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrailData.trail_data)
}
inline std::string* TrailData::unsafe_arena_release_trail_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TrailData.trail_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trail_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrailData::unsafe_arena_set_allocated_trail_data(
    std::string* trail_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trail_data != nullptr) {
    
  } else {
    
  }
  trail_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trail_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrailData.trail_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CullChirality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CullChirality>() {
  return ::CullChirality_descriptor();
}
template <> struct is_proto_enum< ::ResetBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ResetBehavior>() {
  return ::ResetBehavior_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_generators_2fproto_5ftemplates_2fnode_2eproto
