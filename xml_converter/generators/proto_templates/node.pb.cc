// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generators/proto_templates/node.proto

#include "generators/proto_templates/node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FestivalFilter_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GUID_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapTypeFilter_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MountFilter_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfessionFilter_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecializationFilter_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeciesFilter_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Texture_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrailData_generators_2fproto_5ftemplates_2fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generators_2fproto_5ftemplates_2fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trigger_generators_2fproto_5ftemplates_2fnode_2eproto;
class Category_ChildrenEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category_ChildrenEntry_DoNotUse> _instance;
} _Category_ChildrenEntry_DoNotUse_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category> _instance;
} _Category_default_instance_;
class IconDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Icon> _instance;
} _Icon_default_instance_;
class TrailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail> _instance;
} _Trail_default_instance_;
class TextureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Texture> _instance;
} _Texture_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class EulerRotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EulerRotation> _instance;
} _EulerRotation_default_instance_;
class TriggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trigger> _instance;
} _Trigger_default_instance_;
class GUIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GUID> _instance;
} _GUID_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
class FestivalFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FestivalFilter> _instance;
} _FestivalFilter_default_instance_;
class MapTypeFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapTypeFilter> _instance;
} _MapTypeFilter_default_instance_;
class MountFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MountFilter> _instance;
} _MountFilter_default_instance_;
class ProfessionFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfessionFilter> _instance;
} _ProfessionFilter_default_instance_;
class SpecializationFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpecializationFilter> _instance;
} _SpecializationFilter_default_instance_;
class SpeciesFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeciesFilter> _instance;
} _SpeciesFilter_default_instance_;
class TrailDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrailData> _instance;
} _TrailData_default_instance_;
static void InitDefaultsscc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Category_ChildrenEntry_DoNotUse_default_instance_;
    new (ptr) ::Category_ChildrenEntry_DoNotUse();
  }
  {
    void* ptr = &::_Category_default_instance_;
    new (ptr) ::Category();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Category_ChildrenEntry_DoNotUse::InitAsDefaultInstance();
  ::Category::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_Color_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Color_default_instance_;
    new (ptr) ::Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Color_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_EulerRotation_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EulerRotation_default_instance_;
    new (ptr) ::EulerRotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EulerRotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EulerRotation_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EulerRotation_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_FestivalFilter_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FestivalFilter_default_instance_;
    new (ptr) ::FestivalFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FestivalFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FestivalFilter_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FestivalFilter_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_GUID_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GUID_default_instance_;
    new (ptr) ::GUID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GUID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GUID_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GUID_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_Icon_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Icon_default_instance_;
    new (ptr) ::Icon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Icon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Icon_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Icon_generators_2fproto_5ftemplates_2fnode_2eproto}, {
      &scc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_Texture_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_GUID_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_Position_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_Trigger_generators_2fproto_5ftemplates_2fnode_2eproto.base,}};

static void InitDefaultsscc_info_MapTypeFilter_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MapTypeFilter_default_instance_;
    new (ptr) ::MapTypeFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MapTypeFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapTypeFilter_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapTypeFilter_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_MountFilter_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MountFilter_default_instance_;
    new (ptr) ::MountFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MountFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MountFilter_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MountFilter_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_Position_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Position_default_instance_;
    new (ptr) ::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_ProfessionFilter_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProfessionFilter_default_instance_;
    new (ptr) ::ProfessionFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProfessionFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfessionFilter_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfessionFilter_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_SpecializationFilter_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpecializationFilter_default_instance_;
    new (ptr) ::SpecializationFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpecializationFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecializationFilter_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpecializationFilter_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_SpeciesFilter_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpeciesFilter_default_instance_;
    new (ptr) ::SpeciesFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpeciesFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeciesFilter_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeciesFilter_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_Texture_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Texture_default_instance_;
    new (ptr) ::Texture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Texture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Texture_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Texture_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_Trail_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Trail_default_instance_;
    new (ptr) ::Trail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Trail_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_Trail_generators_2fproto_5ftemplates_2fnode_2eproto}, {
      &scc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_Texture_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_GUID_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_TrailData_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_Color_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_FestivalFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_MapTypeFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_MountFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_ProfessionFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_SpecializationFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
      &scc_info_SpeciesFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,}};

static void InitDefaultsscc_info_TrailData_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrailData_default_instance_;
    new (ptr) ::TrailData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrailData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrailData_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrailData_generators_2fproto_5ftemplates_2fnode_2eproto}, {}};

static void InitDefaultsscc_info_Trigger_generators_2fproto_5ftemplates_2fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Trigger_default_instance_;
    new (ptr) ::Trigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trigger_generators_2fproto_5ftemplates_2fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trigger_generators_2fproto_5ftemplates_2fnode_2eproto}, {
      &scc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_generators_2fproto_5ftemplates_2fnode_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_generators_2fproto_5ftemplates_2fnode_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_generators_2fproto_5ftemplates_2fnode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Category_ChildrenEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Category_ChildrenEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Category_ChildrenEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Category_ChildrenEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Category, default_visibility_),
  PROTOBUF_FIELD_OFFSET(::Category, display_name_),
  PROTOBUF_FIELD_OFFSET(::Category, is_separator_),
  PROTOBUF_FIELD_OFFSET(::Category, name_),
  PROTOBUF_FIELD_OFFSET(::Category, tooltip_name_),
  PROTOBUF_FIELD_OFFSET(::Category, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Icon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Icon, category_),
  PROTOBUF_FIELD_OFFSET(::Icon, texture_),
  PROTOBUF_FIELD_OFFSET(::Icon, guid_),
  PROTOBUF_FIELD_OFFSET(::Icon, map_id_),
  PROTOBUF_FIELD_OFFSET(::Icon, distance_fade_end_),
  PROTOBUF_FIELD_OFFSET(::Icon, distance_fade_start_),
  PROTOBUF_FIELD_OFFSET(::Icon, height_offset_),
  PROTOBUF_FIELD_OFFSET(::Icon, position_),
  PROTOBUF_FIELD_OFFSET(::Icon, reset_behavior_),
  PROTOBUF_FIELD_OFFSET(::Icon, trigger_),
  PROTOBUF_FIELD_OFFSET(::Icon, achievement_bit_),
  PROTOBUF_FIELD_OFFSET(::Icon, achievement_id_),
  PROTOBUF_FIELD_OFFSET(::Icon, alpha_),
  PROTOBUF_FIELD_OFFSET(::Icon, can_fade_),
  PROTOBUF_FIELD_OFFSET(::Icon, minimum_size_on_screen_),
  PROTOBUF_FIELD_OFFSET(::Icon, map_display_size_),
  PROTOBUF_FIELD_OFFSET(::Icon, maximum_size_on_screen_),
  PROTOBUF_FIELD_OFFSET(::Icon, scale_on_map_with_zoom_),
  PROTOBUF_FIELD_OFFSET(::Icon, tip_description_),
  PROTOBUF_FIELD_OFFSET(::Icon, tip_name_),
  PROTOBUF_FIELD_OFFSET(::Icon, __tentative__scale_),
  PROTOBUF_FIELD_OFFSET(::Icon, __tentative__render_ingame_),
  PROTOBUF_FIELD_OFFSET(::Icon, __tentative__render_on_map_),
  PROTOBUF_FIELD_OFFSET(::Icon, __tentative__render_on_minimap_),
  PROTOBUF_FIELD_OFFSET(::Icon, bhdraft__schedule_),
  PROTOBUF_FIELD_OFFSET(::Icon, bhdraft__schedule_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Trail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Trail, category_),
  PROTOBUF_FIELD_OFFSET(::Trail, texture_),
  PROTOBUF_FIELD_OFFSET(::Trail, guid_),
  PROTOBUF_FIELD_OFFSET(::Trail, map_id_),
  PROTOBUF_FIELD_OFFSET(::Trail, distance_fade_end_),
  PROTOBUF_FIELD_OFFSET(::Trail, distance_fade_start_),
  PROTOBUF_FIELD_OFFSET(::Trail, trail_data_),
  PROTOBUF_FIELD_OFFSET(::Trail, animation_speed_),
  PROTOBUF_FIELD_OFFSET(::Trail, cull_chirality_),
  PROTOBUF_FIELD_OFFSET(::Trail, achievement_bit_),
  PROTOBUF_FIELD_OFFSET(::Trail, achievement_id_),
  PROTOBUF_FIELD_OFFSET(::Trail, alpha_),
  PROTOBUF_FIELD_OFFSET(::Trail, can_fade_),
  PROTOBUF_FIELD_OFFSET(::Trail, is_wall_),
  PROTOBUF_FIELD_OFFSET(::Trail, bhdraft__schedule_),
  PROTOBUF_FIELD_OFFSET(::Trail, bhdraft__schedule_duration_),
  PROTOBUF_FIELD_OFFSET(::Trail, scale_),
  PROTOBUF_FIELD_OFFSET(::Trail, color_),
  PROTOBUF_FIELD_OFFSET(::Trail, festival_filter_),
  PROTOBUF_FIELD_OFFSET(::Trail, map_type_filter_),
  PROTOBUF_FIELD_OFFSET(::Trail, mount_filter_),
  PROTOBUF_FIELD_OFFSET(::Trail, profession_filter_),
  PROTOBUF_FIELD_OFFSET(::Trail, specialization_filter_),
  PROTOBUF_FIELD_OFFSET(::Trail, species_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Texture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Texture, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Position, x_),
  PROTOBUF_FIELD_OFFSET(::Position, y_),
  PROTOBUF_FIELD_OFFSET(::Position, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EulerRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EulerRotation, x_),
  PROTOBUF_FIELD_OFFSET(::EulerRotation, y_),
  PROTOBUF_FIELD_OFFSET(::EulerRotation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Trigger, auto_trigger_),
  PROTOBUF_FIELD_OFFSET(::Trigger, bounce_delay_),
  PROTOBUF_FIELD_OFFSET(::Trigger, bounce_duration_),
  PROTOBUF_FIELD_OFFSET(::Trigger, bounce_height_),
  PROTOBUF_FIELD_OFFSET(::Trigger, action_copy_clipboard_),
  PROTOBUF_FIELD_OFFSET(::Trigger, action_copy_message_),
  PROTOBUF_FIELD_OFFSET(::Trigger, has_countdown_),
  PROTOBUF_FIELD_OFFSET(::Trigger, action_info_message_),
  PROTOBUF_FIELD_OFFSET(::Trigger, invert_display_),
  PROTOBUF_FIELD_OFFSET(::Trigger, reset_length_),
  PROTOBUF_FIELD_OFFSET(::Trigger, range_),
  PROTOBUF_FIELD_OFFSET(::Trigger, action_hide_category_),
  PROTOBUF_FIELD_OFFSET(::Trigger, action_show_category_),
  PROTOBUF_FIELD_OFFSET(::Trigger, action_toggle_category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GUID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GUID, guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Color, hex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FestivalFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FestivalFilter, dragonbash_),
  PROTOBUF_FIELD_OFFSET(::FestivalFilter, festival_of_the_four_winds_),
  PROTOBUF_FIELD_OFFSET(::FestivalFilter, halloween_),
  PROTOBUF_FIELD_OFFSET(::FestivalFilter, lunar_new_year_),
  PROTOBUF_FIELD_OFFSET(::FestivalFilter, super_adventure_festival_),
  PROTOBUF_FIELD_OFFSET(::FestivalFilter, wintersday_),
  PROTOBUF_FIELD_OFFSET(::FestivalFilter, none_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, unknown_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, redirect_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, character_create_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, pvp_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, gvg_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, instance_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, public_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, tournament_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, tutorial_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, user_tournament_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, center_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, eternal_battlegrounds_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, bluehome_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, blue_borderlands_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, green_home_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, green_borderlands_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, red_home_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, red_borderlands_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, fortunes_vale_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, jump_puzzle_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, obsidian_sanctum_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, edge_of_the_mists_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, public_mini_map_),
  PROTOBUF_FIELD_OFFSET(::MapTypeFilter, wvw_lounge_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MountFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MountFilter, raptor_),
  PROTOBUF_FIELD_OFFSET(::MountFilter, springer_),
  PROTOBUF_FIELD_OFFSET(::MountFilter, skimmer_),
  PROTOBUF_FIELD_OFFSET(::MountFilter, jackal_),
  PROTOBUF_FIELD_OFFSET(::MountFilter, griffon_),
  PROTOBUF_FIELD_OFFSET(::MountFilter, roller_beetle_),
  PROTOBUF_FIELD_OFFSET(::MountFilter, warclaw_),
  PROTOBUF_FIELD_OFFSET(::MountFilter, skyscalee_),
  PROTOBUF_FIELD_OFFSET(::MountFilter, skiff_),
  PROTOBUF_FIELD_OFFSET(::MountFilter, seige_turtle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, guardian_),
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, warrior_),
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, engineer_),
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, ranger_),
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, thief_),
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, elementalist_),
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, mesmer_),
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, necromancer_),
  PROTOBUF_FIELD_OFFSET(::ProfessionFilter, revenantnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, elementalist_tempest_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, engineer_scrapper_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, guardian_dragonhunter_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, mesmer_chronomancer_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, necromancer_reaper_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, ranger_druid_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, revenant_herald_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, thief_daredevil_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, warrior_berserker_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, elementalist_weaver_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, engineer_holosmith_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, guardian_firebrand_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, mesmer_mirage_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, necromancer_scourge_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, ranger_soulbeast_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, revenant_renegade_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, thief_deadeye_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, warrior_spellbreaker_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, elmentalist_catalyst_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, engineer_mechanist_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, guardian_willbender_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, mesmer_virtuoso_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, necromancer_harbinger_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, ranger_untamed_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, revenant_vindicator_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, thief_specter_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, warrior_bladesworn_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, elementalist_air_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, elementalist_arcane_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, elementalist_earth_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, elementalist_fire_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, elementalist_water_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, engineer_alchemy_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, engineer_explosives_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, engineer_firearms_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, engineer_inventions_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, engineer_tools_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, guardian_honor_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, guardian_radiance_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, guardian_valor_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, guardian_virtues_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, guardian_zeal_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, mesmer_chaos_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, mesmer_domination_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, mesmer_dueling_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, mesmer_illusions_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, mesmer_inspiration_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, necromancer_blood_magic_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, necromancer_curses_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, necromancer_death_magic_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, necromancer_soul_reaping_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, necromancer_spite_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, ranger_beastmastery_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, ranger_marksmanship_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, ranger_nature_magic_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, ranger_skirmishing_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, ranger_wilderness_survival_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, revenant_corruption_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, revenant_devastation_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, revenant_invocation_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, revenant_retribution_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, revenant_salvation_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, thief_acrobatics_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, thief_critical_strikes_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, thief_deadly_arts_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, thief_shadow_arts_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, thief_trickery_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, warrior_arms_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, warrior_defense_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, warrior_discipline_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, warrior_strength_),
  PROTOBUF_FIELD_OFFSET(::SpecializationFilter, warrior_tactics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpeciesFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpeciesFilter, asura_),
  PROTOBUF_FIELD_OFFSET(::SpeciesFilter, charr_),
  PROTOBUF_FIELD_OFFSET(::SpeciesFilter, human_),
  PROTOBUF_FIELD_OFFSET(::SpeciesFilter, norn_),
  PROTOBUF_FIELD_OFFSET(::SpeciesFilter, sylvari_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TrailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TrailData, trail_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Category_ChildrenEntry_DoNotUse)},
  { 9, -1, sizeof(::Category)},
  { 20, -1, sizeof(::Icon)},
  { 51, -1, sizeof(::Trail)},
  { 80, -1, sizeof(::Texture)},
  { 86, -1, sizeof(::Position)},
  { 94, -1, sizeof(::EulerRotation)},
  { 102, -1, sizeof(::Trigger)},
  { 121, -1, sizeof(::GUID)},
  { 127, -1, sizeof(::Color)},
  { 133, -1, sizeof(::FestivalFilter)},
  { 145, -1, sizeof(::MapTypeFilter)},
  { 174, -1, sizeof(::MountFilter)},
  { 189, -1, sizeof(::ProfessionFilter)},
  { 203, -1, sizeof(::SpecializationFilter)},
  { 280, -1, sizeof(::SpeciesFilter)},
  { 290, -1, sizeof(::TrailData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Category_ChildrenEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Category_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Icon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Trail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Texture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EulerRotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Trigger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GUID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FestivalFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MapTypeFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MountFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfessionFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpecializationFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpeciesFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrailData_default_instance_),
};

const char descriptor_table_protodef_generators_2fproto_5ftemplates_2fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%generators/proto_templates/node.proto\""
  "\335\001\n\010Category\022\032\n\022default_visibility\030\001 \001(\010"
  "\022\024\n\014display_name\030\002 \001(\t\022\024\n\014is_separator\030\003"
  " \001(\010\022\014\n\004name\030\004 \001(\t\022\024\n\014tooltip_name\030\005 \001(\t"
  "\022)\n\010children\030\006 \003(\0132\027.Category.ChildrenEn"
  "try\032:\n\rChildrenEntry\022\013\n\003key\030\001 \001(\t\022\030\n\005val"
  "ue\030\002 \001(\0132\t.Category:\0028\001\"\332\005\n\004Icon\022\033\n\010cate"
  "gory\030\001 \001(\0132\t.Category\022\031\n\007texture\030\002 \001(\0132\010"
  ".Texture\022\023\n\004guid\030\003 \001(\0132\005.GUID\022\016\n\006map_id\030"
  "\004 \001(\005\022\031\n\021distance_fade_end\030\005 \001(\002\022\033\n\023dist"
  "ance_fade_start\030\006 \001(\002\022\025\n\rheight_offset\030\007"
  " \001(\002\022\033\n\010position\030\010 \001(\0132\t.Position\022&\n\016res"
  "et_behavior\030\t \001(\0162\016.ResetBehavior\022\031\n\007tri"
  "gger\030\n \001(\0132\010.Trigger\022\027\n\017achievement_bit\030"
  "\020 \001(\007\022\026\n\016achievement_id\030\021 \001(\005\022\r\n\005alpha\030\022"
  " \001(\002\022\020\n\010can_fade\030\023 \001(\010\022\036\n\026minimum_size_o"
  "n_screen\030\024 \001(\005\022\030\n\020map_display_size\030\025 \001(\005"
  "\022\036\n\026maximum_size_on_screen\030\026 \001(\005\022\036\n\026scal"
  "e_on_map_with_zoom\030\027 \001(\010\022\027\n\017tip_descript"
  "ion\030\030 \001(\t\022\020\n\010tip_name\030\031 \001(\t\022\033\n\022__tentati"
  "ve__scale\030\200\020 \001(\002\022#\n\032__tentative__render_"
  "ingame\030\201\020 \001(\010\022#\n\032__tentative__render_on_"
  "map\030\202\020 \001(\010\022\'\n\036__tentative__render_on_min"
  "imap\030\203\020 \001(\010\022\032\n\021bhdraft__schedule\030\204\020 \001(\t\022"
  "#\n\032bhdraft__schedule_duration\030\205\020 \001(\002\"\310\005\n"
  "\005Trail\022\033\n\010category\030\001 \001(\0132\t.Category\022\031\n\007t"
  "exture\030\002 \001(\0132\010.Texture\022\023\n\004guid\030\003 \001(\0132\005.G"
  "UID\022\016\n\006map_id\030\004 \001(\005\022\031\n\021distance_fade_end"
  "\030\005 \001(\002\022\033\n\023distance_fade_start\030\006 \001(\002\022\036\n\nt"
  "rail_data\030\007 \001(\0132\n.TrailData\022\027\n\017animation"
  "_speed\030\010 \001(\002\022&\n\016cull_chirality\030\t \001(\0162\016.C"
  "ullChirality\022\027\n\017achievement_bit\030\020 \001(\007\022\026\n"
  "\016achievement_id\030\021 \001(\005\022\r\n\005alpha\030\022 \001(\002\022\020\n\010"
  "can_fade\030\023 \001(\010\022\017\n\007is_wall\030\026 \001(\010\022\031\n\021bhdra"
  "ft__schedule\030\027 \001(\t\022\"\n\032bhdraft__schedule_"
  "duration\030\030 \001(\002\022\r\n\005scale\030\031 \001(\002\022\025\n\005color\030\032"
  " \001(\0132\006.Color\022(\n\017festival_filter\030\033 \001(\0132\017."
  "FestivalFilter\022\'\n\017map_type_filter\030\034 \001(\0132"
  "\016.MapTypeFilter\022\"\n\014mount_filter\030\035 \001(\0132\014."
  "MountFilter\022,\n\021profession_filter\030\036 \001(\0132\021"
  ".ProfessionFilter\0224\n\025specialization_filt"
  "er\030\037 \001(\0132\025.SpecializationFilter\022&\n\016speci"
  "es_filter\030  \001(\0132\016.SpeciesFilter\"\027\n\007Textu"
  "re\022\014\n\004path\030\001 \001(\t\"+\n\010Position\022\t\n\001x\030\001 \001(\002\022"
  "\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"0\n\rEulerRotation\022\t"
  "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\217\003\n\007Trig"
  "ger\022\024\n\014auto_trigger\030\001 \001(\010\022\024\n\014bounce_dela"
  "y\030\002 \001(\002\022\027\n\017bounce_duration\030\003 \001(\002\022\025\n\rboun"
  "ce_height\030\004 \001(\002\022\035\n\025action_copy_clipboard"
  "\030\005 \001(\t\022\033\n\023action_copy_message\030\006 \001(\t\022\025\n\rh"
  "as_countdown\030\007 \001(\010\022\033\n\023action_info_messag"
  "e\030\010 \001(\t\022\026\n\016invert_display\030\t \001(\010\022\024\n\014reset"
  "_length\030\n \001(\002\022\r\n\005range\030\013 \001(\002\022\'\n\024action_h"
  "ide_category\030\014 \001(\0132\t.Category\022\'\n\024action_"
  "show_category\030\r \001(\0132\t.Category\022)\n\026action"
  "_toggle_category\030\016 \001(\0132\t.Category\"\024\n\004GUI"
  "D\022\014\n\004guid\030\001 \001(\005\"\024\n\005Color\022\013\n\003hex\030\001 \001(\t\"\267\001"
  "\n\016FestivalFilter\022\022\n\ndragonbash\030\001 \001(\010\022\"\n\032"
  "festival_of_the_four_winds\030\002 \001(\010\022\021\n\thall"
  "oween\030\003 \001(\010\022\026\n\016lunar_new_year\030\004 \001(\010\022 \n\030s"
  "uper_adventure_festival\030\005 \001(\010\022\022\n\nwinters"
  "day\030\006 \001(\010\022\014\n\004none\030\007 \001(\010\"\346\004\n\rMapTypeFilte"
  "r\022\023\n\013unknown_map\030\001 \001(\010\022\024\n\014redirect_map\030\002"
  " \001(\010\022\034\n\024character_create_map\030\003 \001(\010\022\017\n\007pv"
  "p_map\030\004 \001(\010\022\017\n\007gvg_map\030\005 \001(\010\022\024\n\014instance"
  "_map\030\006 \001(\010\022\022\n\npublic_map\030\007 \001(\010\022\026\n\016tourna"
  "ment_map\030\010 \001(\010\022\024\n\014tutorial_map\030\t \001(\010\022\033\n\023"
  "user_tournament_map\030\n \001(\010\022\022\n\ncenter_map\030"
  "\013 \001(\010\022!\n\031eternal_battlegrounds_map\030\014 \001(\010"
  "\022\024\n\014bluehome_map\030\r \001(\010\022\034\n\024blue_borderlan"
  "ds_map\030\016 \001(\010\022\026\n\016green_home_map\030\017 \001(\010\022\035\n\025"
  "green_borderlands_map\030\020 \001(\010\022\024\n\014red_home_"
  "map\030\021 \001(\010\022\033\n\023red_borderlands_map\030\022 \001(\010\022\031"
  "\n\021fortunes_vale_map\030\023 \001(\010\022\027\n\017jump_puzzle"
  "_map\030\024 \001(\010\022\034\n\024obsidian_sanctum_map\030\025 \001(\010"
  "\022\035\n\025edge_of_the_mists_map\030\026 \001(\010\022\027\n\017publi"
  "c_mini_map\030\027 \001(\010\022\026\n\016wvw_lounge_map\030\030 \001(\010"
  "\"\301\001\n\013MountFilter\022\016\n\006raptor\030\001 \001(\010\022\020\n\010spri"
  "nger\030\002 \001(\010\022\017\n\007skimmer\030\003 \001(\010\022\016\n\006jackal\030\004 "
  "\001(\010\022\017\n\007griffon\030\005 \001(\010\022\025\n\rroller_beetle\030\006 "
  "\001(\010\022\017\n\007warclaw\030\007 \001(\010\022\021\n\tskyscalee\030\010 \001(\010\022"
  "\r\n\005skiff\030\t \001(\010\022\024\n\014seige_turtle\030\n \001(\010\"\265\001\n"
  "\020ProfessionFilter\022\020\n\010guardian\030\001 \001(\010\022\017\n\007w"
  "arrior\030\002 \001(\010\022\020\n\010engineer\030\003 \001(\010\022\016\n\006ranger"
  "\030\004 \001(\010\022\r\n\005thief\030\005 \001(\010\022\024\n\014elementalist\030\006 "
  "\001(\010\022\016\n\006mesmer\030\007 \001(\010\022\023\n\013necromancer\030\010 \001(\010"
  "\022\022\n\nrevenantnt\030\t \001(\010\"\312\017\n\024SpecializationF"
  "ilter\022\034\n\024elementalist_tempest\030\001 \001(\010\022\031\n\021e"
  "ngineer_scrapper\030\002 \001(\010\022\035\n\025guardian_drago"
  "nhunter\030\003 \001(\010\022\033\n\023mesmer_chronomancer\030\004 \001"
  "(\010\022\032\n\022necromancer_reaper\030\005 \001(\010\022\024\n\014ranger"
  "_druid\030\006 \001(\010\022\027\n\017revenant_herald\030\007 \001(\010\022\027\n"
  "\017thief_daredevil\030\010 \001(\010\022\031\n\021warrior_berser"
  "ker\030\t \001(\010\022\033\n\023elementalist_weaver\030\n \001(\010\022\032"
  "\n\022engineer_holosmith\030\013 \001(\010\022\032\n\022guardian_f"
  "irebrand\030\014 \001(\010\022\025\n\rmesmer_mirage\030\r \001(\010\022\033\n"
  "\023necromancer_scourge\030\016 \001(\010\022\030\n\020ranger_sou"
  "lbeast\030\017 \001(\010\022\031\n\021revenant_renegade\030\020 \001(\010\022"
  "\025\n\rthief_deadeye\030\021 \001(\010\022\034\n\024warrior_spellb"
  "reaker\030\022 \001(\010\022\034\n\024elmentalist_catalyst\030\023 \001"
  "(\010\022\032\n\022engineer_mechanist\030\024 \001(\010\022\033\n\023guardi"
  "an_willbender\030\025 \001(\010\022\027\n\017mesmer_virtuoso\030\026"
  " \001(\010\022\035\n\025necromancer_harbinger\030\027 \001(\010\022\026\n\016r"
  "anger_untamed\030\030 \001(\010\022\033\n\023revenant_vindicat"
  "or\030\031 \001(\010\022\025\n\rthief_specter\030\032 \001(\010\022\032\n\022warri"
  "or_bladesworn\030\033 \001(\010\022\030\n\020elementalist_air\030"
  "\034 \001(\010\022\033\n\023elementalist_arcane\030\035 \001(\010\022\032\n\022el"
  "ementalist_earth\030\036 \001(\010\022\031\n\021elementalist_f"
  "ire\030\037 \001(\010\022\032\n\022elementalist_water\030  \001(\010\022\030\n"
  "\020engineer_alchemy\030! \001(\010\022\033\n\023engineer_expl"
  "osives\030\" \001(\010\022\031\n\021engineer_firearms\030# \001(\010\022"
  "\033\n\023engineer_inventions\030$ \001(\010\022\026\n\016engineer"
  "_tools\030% \001(\010\022\026\n\016guardian_honor\030& \001(\010\022\031\n\021"
  "guardian_radiance\030\' \001(\010\022\026\n\016guardian_valo"
  "r\030( \001(\010\022\030\n\020guardian_virtues\030) \001(\010\022\025\n\rgua"
  "rdian_zeal\030* \001(\010\022\024\n\014mesmer_chaos\030+ \001(\010\022\031"
  "\n\021mesmer_domination\030, \001(\010\022\026\n\016mesmer_duel"
  "ing\030- \001(\010\022\030\n\020mesmer_illusions\030. \001(\010\022\032\n\022m"
  "esmer_inspiration\030/ \001(\010\022\037\n\027necromancer_b"
  "lood_magic\0300 \001(\010\022\032\n\022necromancer_curses\0301"
  " \001(\010\022\037\n\027necromancer_death_magic\0302 \001(\010\022 \n"
  "\030necromancer_soul_reaping\0303 \001(\010\022\031\n\021necro"
  "mancer_spite\0304 \001(\010\022\033\n\023ranger_beastmaster"
  "y\0305 \001(\010\022\033\n\023ranger_marksmanship\0306 \001(\010\022\033\n\023"
  "ranger_nature_magic\0307 \001(\010\022\032\n\022ranger_skir"
  "mishing\0308 \001(\010\022\"\n\032ranger_wilderness_survi"
  "val\0309 \001(\010\022\033\n\023revenant_corruption\030: \001(\010\022\034"
  "\n\024revenant_devastation\030; \001(\010\022\033\n\023revenant"
  "_invocation\030< \001(\010\022\034\n\024revenant_retributio"
  "n\030= \001(\010\022\032\n\022revenant_salvation\030> \001(\010\022\030\n\020t"
  "hief_acrobatics\030\? \001(\010\022\036\n\026thief_critical_"
  "strikes\030@ \001(\010\022\031\n\021thief_deadly_arts\030A \001(\010"
  "\022\031\n\021thief_shadow_arts\030B \001(\010\022\026\n\016thief_tri"
  "ckery\030C \001(\010\022\024\n\014warrior_arms\030D \001(\010\022\027\n\017war"
  "rior_defense\030E \001(\010\022\032\n\022warrior_discipline"
  "\030F \001(\010\022\030\n\020warrior_strength\030G \001(\010\022\027\n\017warr"
  "ior_tactics\030H \001(\010\"[\n\rSpeciesFilter\022\r\n\005as"
  "ura\030\001 \001(\010\022\r\n\005charr\030\002 \001(\010\022\r\n\005human\030\003 \001(\010\022"
  "\014\n\004norn\030\004 \001(\010\022\017\n\007sylvari\030\005 \001(\010\"\037\n\tTrailD"
  "ata\022\022\n\ntrail_data\030\001 \001(\t*\?\n\rCullChirality"
  "\022\010\n\004none\020\000\022\r\n\tclockwise\020\001\022\025\n\021counter_clo"
  "ckwise\020\002*\257\001\n\rResetBehavior\022\022\n\016always_vis"
  "ible\020\000\022\016\n\nmap_change\020\001\022\017\n\013daily_reset\020\002\022"
  "\t\n\005never\020\003\022\t\n\005timer\020\004\022\r\n\tmap_reset\020\005\022\023\n\017"
  "instance_change\020\006\022\035\n\031daily_reset_per_cha"
  "racter\020\007\022\020\n\014weekly_reset\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto_sccs[16] = {
  &scc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_Color_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_EulerRotation_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_FestivalFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_GUID_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_Icon_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_MapTypeFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_MountFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_Position_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_ProfessionFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_SpecializationFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_SpeciesFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_Texture_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_Trail_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_TrailData_generators_2fproto_5ftemplates_2fnode_2eproto.base,
  &scc_info_Trigger_generators_2fproto_5ftemplates_2fnode_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto = {
  false, false, descriptor_table_protodef_generators_2fproto_5ftemplates_2fnode_2eproto, "generators/proto_templates/node.proto", 5834,
  &descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto_once, descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto_sccs, descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_generators_2fproto_5ftemplates_2fnode_2eproto::offsets,
  file_level_metadata_generators_2fproto_5ftemplates_2fnode_2eproto, 17, file_level_enum_descriptors_generators_2fproto_5ftemplates_2fnode_2eproto, file_level_service_descriptors_generators_2fproto_5ftemplates_2fnode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_generators_2fproto_5ftemplates_2fnode_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CullChirality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
  return file_level_enum_descriptors_generators_2fproto_5ftemplates_2fnode_2eproto[0];
}
bool CullChirality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResetBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_generators_2fproto_5ftemplates_2fnode_2eproto);
  return file_level_enum_descriptors_generators_2fproto_5ftemplates_2fnode_2eproto[1];
}
bool ResetBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Category_ChildrenEntry_DoNotUse::Category_ChildrenEntry_DoNotUse() {}
Category_ChildrenEntry_DoNotUse::Category_ChildrenEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Category_ChildrenEntry_DoNotUse::MergeFrom(const Category_ChildrenEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Category_ChildrenEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Category_ChildrenEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Category::InitAsDefaultInstance() {
}
class Category::_Internal {
 public:
};

Category::Category(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Category)
}
Category::Category(const Category& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  children_.MergeFrom(from.children_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_name(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  tooltip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tooltip_name().empty()) {
    tooltip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tooltip_name(),
      GetArena());
  }
  ::memcpy(&default_visibility_, &from.default_visibility_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_separator_) -
    reinterpret_cast<char*>(&default_visibility_)) + sizeof(is_separator_));
  // @@protoc_insertion_point(copy_constructor:Category)
}

void Category::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tooltip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_visibility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_separator_) -
      reinterpret_cast<char*>(&default_visibility_)) + sizeof(is_separator_));
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:Category)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Category::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tooltip_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Category::ArenaDtor(void* object) {
  Category* _this = reinterpret_cast< Category* >(object);
  (void)_this;
}
void Category::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Category& Category::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Category_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tooltip_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&default_visibility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_separator_) -
      reinterpret_cast<char*>(&default_visibility_)) + sizeof(is_separator_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Category::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool default_visibility = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          default_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Category.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_separator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Category.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tooltip_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tooltip_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Category.tooltip_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .Category> children = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&children_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Category::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool default_visibility = 1;
  if (this->default_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_default_visibility(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Category.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // bool is_separator = 3;
  if (this->is_separator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_separator(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Category.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string tooltip_name = 5;
  if (this->tooltip_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tooltip_name().data(), static_cast<int>(this->_internal_tooltip_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Category.tooltip_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tooltip_name(), target);
  }

  // map<string, .Category> children = 6;
  if (!this->_internal_children().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Category.ChildrenEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_children().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_children().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >::const_iterator
          it = this->_internal_children().begin();
          it != this->_internal_children().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Category_ChildrenEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >::const_iterator
          it = this->_internal_children().begin();
          it != this->_internal_children().end(); ++it) {
        target = Category_ChildrenEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Category)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Category> children = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_children_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Category >::const_iterator
      it = this->_internal_children().begin();
      it != this->_internal_children().end(); ++it) {
    total_size += Category_ChildrenEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string tooltip_name = 5;
  if (this->tooltip_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tooltip_name());
  }

  // bool default_visibility = 1;
  if (this->default_visibility() != 0) {
    total_size += 1 + 1;
  }

  // bool is_separator = 3;
  if (this->is_separator() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Category>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Category)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.display_name().size() > 0) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.tooltip_name().size() > 0) {
    _internal_set_tooltip_name(from._internal_tooltip_name());
  }
  if (from.default_visibility() != 0) {
    _internal_set_default_visibility(from._internal_default_visibility());
  }
  if (from.is_separator() != 0) {
    _internal_set_is_separator(from._internal_is_separator());
  }
}

void Category::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::InternalSwap(Category* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  children_.Swap(&other->children_);
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tooltip_name_.Swap(&other->tooltip_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Category, is_separator_)
      + sizeof(Category::is_separator_)
      - PROTOBUF_FIELD_OFFSET(Category, default_visibility_)>(
          reinterpret_cast<char*>(&default_visibility_),
          reinterpret_cast<char*>(&other->default_visibility_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Category::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Icon::InitAsDefaultInstance() {
  ::_Icon_default_instance_._instance.get_mutable()->category_ = const_cast< ::Category*>(
      ::Category::internal_default_instance());
  ::_Icon_default_instance_._instance.get_mutable()->texture_ = const_cast< ::Texture*>(
      ::Texture::internal_default_instance());
  ::_Icon_default_instance_._instance.get_mutable()->guid_ = const_cast< ::GUID*>(
      ::GUID::internal_default_instance());
  ::_Icon_default_instance_._instance.get_mutable()->position_ = const_cast< ::Position*>(
      ::Position::internal_default_instance());
  ::_Icon_default_instance_._instance.get_mutable()->trigger_ = const_cast< ::Trigger*>(
      ::Trigger::internal_default_instance());
}
class Icon::_Internal {
 public:
  static const ::Category& category(const Icon* msg);
  static const ::Texture& texture(const Icon* msg);
  static const ::GUID& guid(const Icon* msg);
  static const ::Position& position(const Icon* msg);
  static const ::Trigger& trigger(const Icon* msg);
};

const ::Category&
Icon::_Internal::category(const Icon* msg) {
  return *msg->category_;
}
const ::Texture&
Icon::_Internal::texture(const Icon* msg) {
  return *msg->texture_;
}
const ::GUID&
Icon::_Internal::guid(const Icon* msg) {
  return *msg->guid_;
}
const ::Position&
Icon::_Internal::position(const Icon* msg) {
  return *msg->position_;
}
const ::Trigger&
Icon::_Internal::trigger(const Icon* msg) {
  return *msg->trigger_;
}
Icon::Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Icon)
}
Icon::Icon(const Icon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tip_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tip_description().empty()) {
    tip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tip_description(),
      GetArena());
  }
  tip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tip_name().empty()) {
    tip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tip_name(),
      GetArena());
  }
  bhdraft__schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bhdraft__schedule().empty()) {
    bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bhdraft__schedule(),
      GetArena());
  }
  if (from._internal_has_category()) {
    category_ = new ::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  if (from._internal_has_texture()) {
    texture_ = new ::Texture(*from.texture_);
  } else {
    texture_ = nullptr;
  }
  if (from._internal_has_guid()) {
    guid_ = new ::GUID(*from.guid_);
  } else {
    guid_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_trigger()) {
    trigger_ = new ::Trigger(*from.trigger_);
  } else {
    trigger_ = nullptr;
  }
  ::memcpy(&map_id_, &from.map_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&__tentative__render_on_minimap_) -
    reinterpret_cast<char*>(&map_id_)) + sizeof(__tentative__render_on_minimap_));
  // @@protoc_insertion_point(copy_constructor:Icon)
}

void Icon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Icon_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  tip_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bhdraft__schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&__tentative__render_on_minimap_) -
      reinterpret_cast<char*>(&category_)) + sizeof(__tentative__render_on_minimap_));
}

Icon::~Icon() {
  // @@protoc_insertion_point(destructor:Icon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Icon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tip_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bhdraft__schedule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete category_;
  if (this != internal_default_instance()) delete texture_;
  if (this != internal_default_instance()) delete guid_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete trigger_;
}

void Icon::ArenaDtor(void* object) {
  Icon* _this = reinterpret_cast< Icon* >(object);
  (void)_this;
}
void Icon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Icon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Icon& Icon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Icon_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void Icon::Clear() {
// @@protoc_insertion_point(message_clear_start:Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tip_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tip_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bhdraft__schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  if (GetArena() == nullptr && texture_ != nullptr) {
    delete texture_;
  }
  texture_ = nullptr;
  if (GetArena() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
  ::memset(&map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&__tentative__render_on_minimap_) -
      reinterpret_cast<char*>(&map_id_)) + sizeof(__tentative__render_on_minimap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Icon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Texture texture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GUID guid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance_fade_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          distance_fade_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distance_fade_start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          distance_fade_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          height_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Position position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ResetBehavior reset_behavior = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reset_behavior(static_cast<::ResetBehavior>(val));
        } else goto handle_unusual;
        continue;
      // .Trigger trigger = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 achievement_bit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          achievement_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // int32 achievement_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          achievement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool can_fade = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          can_fade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minimum_size_on_screen = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          minimum_size_on_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_display_size = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          map_display_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maximum_size_on_screen = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          maximum_size_on_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool scale_on_map_with_zoom = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          scale_on_map_with_zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tip_description = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_tip_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Icon.tip_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tip_name = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_tip_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Icon.tip_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float __tentative__scale = 2048;
      case 2048:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          __tentative__scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool __tentative__render_ingame = 2049;
      case 2049:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          __tentative__render_ingame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool __tentative__render_on_map = 2050;
      case 2050:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          __tentative__render_on_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool __tentative__render_on_minimap = 2051;
      case 2051:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          __tentative__render_on_minimap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bhdraft__schedule = 2052;
      case 2052:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bhdraft__schedule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Icon.bhdraft__schedule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bhdraft__schedule_duration = 2053;
      case 2053:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          bhdraft__schedule_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Icon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Category category = 1;
  if (this->has_category()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::category(this), target, stream);
  }

  // .Texture texture = 2;
  if (this->has_texture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::texture(this), target, stream);
  }

  // .GUID guid = 3;
  if (this->has_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::guid(this), target, stream);
  }

  // int32 map_id = 4;
  if (this->map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_map_id(), target);
  }

  // float distance_fade_end = 5;
  if (!(this->distance_fade_end() <= 0 && this->distance_fade_end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_distance_fade_end(), target);
  }

  // float distance_fade_start = 6;
  if (!(this->distance_fade_start() <= 0 && this->distance_fade_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_distance_fade_start(), target);
  }

  // float height_offset = 7;
  if (!(this->height_offset() <= 0 && this->height_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_height_offset(), target);
  }

  // .Position position = 8;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::position(this), target, stream);
  }

  // .ResetBehavior reset_behavior = 9;
  if (this->reset_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_reset_behavior(), target);
  }

  // .Trigger trigger = 10;
  if (this->has_trigger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::trigger(this), target, stream);
  }

  // fixed32 achievement_bit = 16;
  if (this->achievement_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(16, this->_internal_achievement_bit(), target);
  }

  // int32 achievement_id = 17;
  if (this->achievement_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_achievement_id(), target);
  }

  // float alpha = 18;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_alpha(), target);
  }

  // bool can_fade = 19;
  if (this->can_fade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_can_fade(), target);
  }

  // int32 minimum_size_on_screen = 20;
  if (this->minimum_size_on_screen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_minimum_size_on_screen(), target);
  }

  // int32 map_display_size = 21;
  if (this->map_display_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_map_display_size(), target);
  }

  // int32 maximum_size_on_screen = 22;
  if (this->maximum_size_on_screen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_maximum_size_on_screen(), target);
  }

  // bool scale_on_map_with_zoom = 23;
  if (this->scale_on_map_with_zoom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_scale_on_map_with_zoom(), target);
  }

  // string tip_description = 24;
  if (this->tip_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tip_description().data(), static_cast<int>(this->_internal_tip_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Icon.tip_description");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_tip_description(), target);
  }

  // string tip_name = 25;
  if (this->tip_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tip_name().data(), static_cast<int>(this->_internal_tip_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Icon.tip_name");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_tip_name(), target);
  }

  // float __tentative__scale = 2048;
  if (!(this->__tentative__scale() <= 0 && this->__tentative__scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2048, this->_internal___tentative__scale(), target);
  }

  // bool __tentative__render_ingame = 2049;
  if (this->__tentative__render_ingame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2049, this->_internal___tentative__render_ingame(), target);
  }

  // bool __tentative__render_on_map = 2050;
  if (this->__tentative__render_on_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2050, this->_internal___tentative__render_on_map(), target);
  }

  // bool __tentative__render_on_minimap = 2051;
  if (this->__tentative__render_on_minimap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2051, this->_internal___tentative__render_on_minimap(), target);
  }

  // string bhdraft__schedule = 2052;
  if (this->bhdraft__schedule().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bhdraft__schedule().data(), static_cast<int>(this->_internal_bhdraft__schedule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Icon.bhdraft__schedule");
    target = stream->WriteStringMaybeAliased(
        2052, this->_internal_bhdraft__schedule(), target);
  }

  // float bhdraft__schedule_duration = 2053;
  if (!(this->bhdraft__schedule_duration() <= 0 && this->bhdraft__schedule_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2053, this->_internal_bhdraft__schedule_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Icon)
  return target;
}

size_t Icon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Icon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tip_description = 24;
  if (this->tip_description().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tip_description());
  }

  // string tip_name = 25;
  if (this->tip_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tip_name());
  }

  // string bhdraft__schedule = 2052;
  if (this->bhdraft__schedule().size() > 0) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bhdraft__schedule());
  }

  // .Category category = 1;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  // .Texture texture = 2;
  if (this->has_texture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texture_);
  }

  // .GUID guid = 3;
  if (this->has_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guid_);
  }

  // .Position position = 8;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Trigger trigger = 10;
  if (this->has_trigger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trigger_);
  }

  // int32 map_id = 4;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  // float distance_fade_end = 5;
  if (!(this->distance_fade_end() <= 0 && this->distance_fade_end() >= 0)) {
    total_size += 1 + 4;
  }

  // float distance_fade_start = 6;
  if (!(this->distance_fade_start() <= 0 && this->distance_fade_start() >= 0)) {
    total_size += 1 + 4;
  }

  // float height_offset = 7;
  if (!(this->height_offset() <= 0 && this->height_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // .ResetBehavior reset_behavior = 9;
  if (this->reset_behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reset_behavior());
  }

  // fixed32 achievement_bit = 16;
  if (this->achievement_bit() != 0) {
    total_size += 2 + 4;
  }

  // int32 achievement_id = 17;
  if (this->achievement_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_achievement_id());
  }

  // float alpha = 18;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 minimum_size_on_screen = 20;
  if (this->minimum_size_on_screen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minimum_size_on_screen());
  }

  // int32 map_display_size = 21;
  if (this->map_display_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_display_size());
  }

  // float bhdraft__schedule_duration = 2053;
  if (!(this->bhdraft__schedule_duration() <= 0 && this->bhdraft__schedule_duration() >= 0)) {
    total_size += 3 + 4;
  }

  // int32 maximum_size_on_screen = 22;
  if (this->maximum_size_on_screen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum_size_on_screen());
  }

  // bool can_fade = 19;
  if (this->can_fade() != 0) {
    total_size += 2 + 1;
  }

  // bool scale_on_map_with_zoom = 23;
  if (this->scale_on_map_with_zoom() != 0) {
    total_size += 2 + 1;
  }

  // bool __tentative__render_ingame = 2049;
  if (this->__tentative__render_ingame() != 0) {
    total_size += 3 + 1;
  }

  // bool __tentative__render_on_map = 2050;
  if (this->__tentative__render_on_map() != 0) {
    total_size += 3 + 1;
  }

  // float __tentative__scale = 2048;
  if (!(this->__tentative__scale() <= 0 && this->__tentative__scale() >= 0)) {
    total_size += 3 + 4;
  }

  // bool __tentative__render_on_minimap = 2051;
  if (this->__tentative__render_on_minimap() != 0) {
    total_size += 3 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Icon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Icon)
  GOOGLE_DCHECK_NE(&from, this);
  const Icon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Icon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Icon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Icon)
    MergeFrom(*source);
  }
}

void Icon::MergeFrom(const Icon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Icon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tip_description().size() > 0) {
    _internal_set_tip_description(from._internal_tip_description());
  }
  if (from.tip_name().size() > 0) {
    _internal_set_tip_name(from._internal_tip_name());
  }
  if (from.bhdraft__schedule().size() > 0) {
    _internal_set_bhdraft__schedule(from._internal_bhdraft__schedule());
  }
  if (from.has_category()) {
    _internal_mutable_category()->::Category::MergeFrom(from._internal_category());
  }
  if (from.has_texture()) {
    _internal_mutable_texture()->::Texture::MergeFrom(from._internal_texture());
  }
  if (from.has_guid()) {
    _internal_mutable_guid()->::GUID::MergeFrom(from._internal_guid());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::Position::MergeFrom(from._internal_position());
  }
  if (from.has_trigger()) {
    _internal_mutable_trigger()->::Trigger::MergeFrom(from._internal_trigger());
  }
  if (from.map_id() != 0) {
    _internal_set_map_id(from._internal_map_id());
  }
  if (!(from.distance_fade_end() <= 0 && from.distance_fade_end() >= 0)) {
    _internal_set_distance_fade_end(from._internal_distance_fade_end());
  }
  if (!(from.distance_fade_start() <= 0 && from.distance_fade_start() >= 0)) {
    _internal_set_distance_fade_start(from._internal_distance_fade_start());
  }
  if (!(from.height_offset() <= 0 && from.height_offset() >= 0)) {
    _internal_set_height_offset(from._internal_height_offset());
  }
  if (from.reset_behavior() != 0) {
    _internal_set_reset_behavior(from._internal_reset_behavior());
  }
  if (from.achievement_bit() != 0) {
    _internal_set_achievement_bit(from._internal_achievement_bit());
  }
  if (from.achievement_id() != 0) {
    _internal_set_achievement_id(from._internal_achievement_id());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (from.minimum_size_on_screen() != 0) {
    _internal_set_minimum_size_on_screen(from._internal_minimum_size_on_screen());
  }
  if (from.map_display_size() != 0) {
    _internal_set_map_display_size(from._internal_map_display_size());
  }
  if (!(from.bhdraft__schedule_duration() <= 0 && from.bhdraft__schedule_duration() >= 0)) {
    _internal_set_bhdraft__schedule_duration(from._internal_bhdraft__schedule_duration());
  }
  if (from.maximum_size_on_screen() != 0) {
    _internal_set_maximum_size_on_screen(from._internal_maximum_size_on_screen());
  }
  if (from.can_fade() != 0) {
    _internal_set_can_fade(from._internal_can_fade());
  }
  if (from.scale_on_map_with_zoom() != 0) {
    _internal_set_scale_on_map_with_zoom(from._internal_scale_on_map_with_zoom());
  }
  if (from.__tentative__render_ingame() != 0) {
    _internal_set___tentative__render_ingame(from._internal___tentative__render_ingame());
  }
  if (from.__tentative__render_on_map() != 0) {
    _internal_set___tentative__render_on_map(from._internal___tentative__render_on_map());
  }
  if (!(from.__tentative__scale() <= 0 && from.__tentative__scale() >= 0)) {
    _internal_set___tentative__scale(from._internal___tentative__scale());
  }
  if (from.__tentative__render_on_minimap() != 0) {
    _internal_set___tentative__render_on_minimap(from._internal___tentative__render_on_minimap());
  }
}

void Icon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Icon::CopyFrom(const Icon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Icon::IsInitialized() const {
  return true;
}

void Icon::InternalSwap(Icon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tip_description_.Swap(&other->tip_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tip_name_.Swap(&other->tip_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bhdraft__schedule_.Swap(&other->bhdraft__schedule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Icon, __tentative__render_on_minimap_)
      + sizeof(Icon::__tentative__render_on_minimap_)
      - PROTOBUF_FIELD_OFFSET(Icon, category_)>(
          reinterpret_cast<char*>(&category_),
          reinterpret_cast<char*>(&other->category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Icon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail::InitAsDefaultInstance() {
  ::_Trail_default_instance_._instance.get_mutable()->category_ = const_cast< ::Category*>(
      ::Category::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->texture_ = const_cast< ::Texture*>(
      ::Texture::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->guid_ = const_cast< ::GUID*>(
      ::GUID::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->trail_data_ = const_cast< ::TrailData*>(
      ::TrailData::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->color_ = const_cast< ::Color*>(
      ::Color::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->festival_filter_ = const_cast< ::FestivalFilter*>(
      ::FestivalFilter::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->map_type_filter_ = const_cast< ::MapTypeFilter*>(
      ::MapTypeFilter::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->mount_filter_ = const_cast< ::MountFilter*>(
      ::MountFilter::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->profession_filter_ = const_cast< ::ProfessionFilter*>(
      ::ProfessionFilter::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->specialization_filter_ = const_cast< ::SpecializationFilter*>(
      ::SpecializationFilter::internal_default_instance());
  ::_Trail_default_instance_._instance.get_mutable()->species_filter_ = const_cast< ::SpeciesFilter*>(
      ::SpeciesFilter::internal_default_instance());
}
class Trail::_Internal {
 public:
  static const ::Category& category(const Trail* msg);
  static const ::Texture& texture(const Trail* msg);
  static const ::GUID& guid(const Trail* msg);
  static const ::TrailData& trail_data(const Trail* msg);
  static const ::Color& color(const Trail* msg);
  static const ::FestivalFilter& festival_filter(const Trail* msg);
  static const ::MapTypeFilter& map_type_filter(const Trail* msg);
  static const ::MountFilter& mount_filter(const Trail* msg);
  static const ::ProfessionFilter& profession_filter(const Trail* msg);
  static const ::SpecializationFilter& specialization_filter(const Trail* msg);
  static const ::SpeciesFilter& species_filter(const Trail* msg);
};

const ::Category&
Trail::_Internal::category(const Trail* msg) {
  return *msg->category_;
}
const ::Texture&
Trail::_Internal::texture(const Trail* msg) {
  return *msg->texture_;
}
const ::GUID&
Trail::_Internal::guid(const Trail* msg) {
  return *msg->guid_;
}
const ::TrailData&
Trail::_Internal::trail_data(const Trail* msg) {
  return *msg->trail_data_;
}
const ::Color&
Trail::_Internal::color(const Trail* msg) {
  return *msg->color_;
}
const ::FestivalFilter&
Trail::_Internal::festival_filter(const Trail* msg) {
  return *msg->festival_filter_;
}
const ::MapTypeFilter&
Trail::_Internal::map_type_filter(const Trail* msg) {
  return *msg->map_type_filter_;
}
const ::MountFilter&
Trail::_Internal::mount_filter(const Trail* msg) {
  return *msg->mount_filter_;
}
const ::ProfessionFilter&
Trail::_Internal::profession_filter(const Trail* msg) {
  return *msg->profession_filter_;
}
const ::SpecializationFilter&
Trail::_Internal::specialization_filter(const Trail* msg) {
  return *msg->specialization_filter_;
}
const ::SpeciesFilter&
Trail::_Internal::species_filter(const Trail* msg) {
  return *msg->species_filter_;
}
Trail::Trail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Trail)
}
Trail::Trail(const Trail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bhdraft__schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bhdraft__schedule().empty()) {
    bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bhdraft__schedule(),
      GetArena());
  }
  if (from._internal_has_category()) {
    category_ = new ::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  if (from._internal_has_texture()) {
    texture_ = new ::Texture(*from.texture_);
  } else {
    texture_ = nullptr;
  }
  if (from._internal_has_guid()) {
    guid_ = new ::GUID(*from.guid_);
  } else {
    guid_ = nullptr;
  }
  if (from._internal_has_trail_data()) {
    trail_data_ = new ::TrailData(*from.trail_data_);
  } else {
    trail_data_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_festival_filter()) {
    festival_filter_ = new ::FestivalFilter(*from.festival_filter_);
  } else {
    festival_filter_ = nullptr;
  }
  if (from._internal_has_map_type_filter()) {
    map_type_filter_ = new ::MapTypeFilter(*from.map_type_filter_);
  } else {
    map_type_filter_ = nullptr;
  }
  if (from._internal_has_mount_filter()) {
    mount_filter_ = new ::MountFilter(*from.mount_filter_);
  } else {
    mount_filter_ = nullptr;
  }
  if (from._internal_has_profession_filter()) {
    profession_filter_ = new ::ProfessionFilter(*from.profession_filter_);
  } else {
    profession_filter_ = nullptr;
  }
  if (from._internal_has_specialization_filter()) {
    specialization_filter_ = new ::SpecializationFilter(*from.specialization_filter_);
  } else {
    specialization_filter_ = nullptr;
  }
  if (from._internal_has_species_filter()) {
    species_filter_ = new ::SpeciesFilter(*from.species_filter_);
  } else {
    species_filter_ = nullptr;
  }
  ::memcpy(&map_id_, &from.map_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&map_id_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:Trail)
}

void Trail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trail_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  bhdraft__schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&category_)) + sizeof(scale_));
}

Trail::~Trail() {
  // @@protoc_insertion_point(destructor:Trail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bhdraft__schedule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete category_;
  if (this != internal_default_instance()) delete texture_;
  if (this != internal_default_instance()) delete guid_;
  if (this != internal_default_instance()) delete trail_data_;
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete festival_filter_;
  if (this != internal_default_instance()) delete map_type_filter_;
  if (this != internal_default_instance()) delete mount_filter_;
  if (this != internal_default_instance()) delete profession_filter_;
  if (this != internal_default_instance()) delete specialization_filter_;
  if (this != internal_default_instance()) delete species_filter_;
}

void Trail::ArenaDtor(void* object) {
  Trail* _this = reinterpret_cast< Trail* >(object);
  (void)_this;
}
void Trail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail& Trail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void Trail::Clear() {
// @@protoc_insertion_point(message_clear_start:Trail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhdraft__schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  if (GetArena() == nullptr && texture_ != nullptr) {
    delete texture_;
  }
  texture_ = nullptr;
  if (GetArena() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
  if (GetArena() == nullptr && trail_data_ != nullptr) {
    delete trail_data_;
  }
  trail_data_ = nullptr;
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  if (GetArena() == nullptr && festival_filter_ != nullptr) {
    delete festival_filter_;
  }
  festival_filter_ = nullptr;
  if (GetArena() == nullptr && map_type_filter_ != nullptr) {
    delete map_type_filter_;
  }
  map_type_filter_ = nullptr;
  if (GetArena() == nullptr && mount_filter_ != nullptr) {
    delete mount_filter_;
  }
  mount_filter_ = nullptr;
  if (GetArena() == nullptr && profession_filter_ != nullptr) {
    delete profession_filter_;
  }
  profession_filter_ = nullptr;
  if (GetArena() == nullptr && specialization_filter_ != nullptr) {
    delete specialization_filter_;
  }
  specialization_filter_ = nullptr;
  if (GetArena() == nullptr && species_filter_ != nullptr) {
    delete species_filter_;
  }
  species_filter_ = nullptr;
  ::memset(&map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&map_id_)) + sizeof(scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Texture texture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GUID guid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance_fade_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          distance_fade_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distance_fade_start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          distance_fade_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .TrailData trail_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_trail_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float animation_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          animation_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .CullChirality cull_chirality = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cull_chirality(static_cast<::CullChirality>(val));
        } else goto handle_unusual;
        continue;
      // fixed32 achievement_bit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          achievement_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // int32 achievement_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          achievement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool can_fade = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          can_fade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_wall = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          is_wall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bhdraft__schedule = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_bhdraft__schedule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trail.bhdraft__schedule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bhdraft__schedule_duration = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          bhdraft__schedule_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scale = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Color color = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FestivalFilter festival_filter = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_festival_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MapTypeFilter map_type_filter = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_type_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MountFilter mount_filter = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_mount_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ProfessionFilter profession_filter = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_profession_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpecializationFilter specialization_filter = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_specialization_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpeciesFilter species_filter = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_species_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Trail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Category category = 1;
  if (this->has_category()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::category(this), target, stream);
  }

  // .Texture texture = 2;
  if (this->has_texture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::texture(this), target, stream);
  }

  // .GUID guid = 3;
  if (this->has_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::guid(this), target, stream);
  }

  // int32 map_id = 4;
  if (this->map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_map_id(), target);
  }

  // float distance_fade_end = 5;
  if (!(this->distance_fade_end() <= 0 && this->distance_fade_end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_distance_fade_end(), target);
  }

  // float distance_fade_start = 6;
  if (!(this->distance_fade_start() <= 0 && this->distance_fade_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_distance_fade_start(), target);
  }

  // .TrailData trail_data = 7;
  if (this->has_trail_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::trail_data(this), target, stream);
  }

  // float animation_speed = 8;
  if (!(this->animation_speed() <= 0 && this->animation_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_animation_speed(), target);
  }

  // .CullChirality cull_chirality = 9;
  if (this->cull_chirality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_cull_chirality(), target);
  }

  // fixed32 achievement_bit = 16;
  if (this->achievement_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(16, this->_internal_achievement_bit(), target);
  }

  // int32 achievement_id = 17;
  if (this->achievement_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_achievement_id(), target);
  }

  // float alpha = 18;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_alpha(), target);
  }

  // bool can_fade = 19;
  if (this->can_fade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_can_fade(), target);
  }

  // bool is_wall = 22;
  if (this->is_wall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_wall(), target);
  }

  // string bhdraft__schedule = 23;
  if (this->bhdraft__schedule().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bhdraft__schedule().data(), static_cast<int>(this->_internal_bhdraft__schedule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trail.bhdraft__schedule");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_bhdraft__schedule(), target);
  }

  // float bhdraft__schedule_duration = 24;
  if (!(this->bhdraft__schedule_duration() <= 0 && this->bhdraft__schedule_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_bhdraft__schedule_duration(), target);
  }

  // float scale = 25;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_scale(), target);
  }

  // .Color color = 26;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::color(this), target, stream);
  }

  // .FestivalFilter festival_filter = 27;
  if (this->has_festival_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::festival_filter(this), target, stream);
  }

  // .MapTypeFilter map_type_filter = 28;
  if (this->has_map_type_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::map_type_filter(this), target, stream);
  }

  // .MountFilter mount_filter = 29;
  if (this->has_mount_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::mount_filter(this), target, stream);
  }

  // .ProfessionFilter profession_filter = 30;
  if (this->has_profession_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::profession_filter(this), target, stream);
  }

  // .SpecializationFilter specialization_filter = 31;
  if (this->has_specialization_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::specialization_filter(this), target, stream);
  }

  // .SpeciesFilter species_filter = 32;
  if (this->has_species_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::species_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trail)
  return target;
}

size_t Trail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bhdraft__schedule = 23;
  if (this->bhdraft__schedule().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bhdraft__schedule());
  }

  // .Category category = 1;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  // .Texture texture = 2;
  if (this->has_texture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texture_);
  }

  // .GUID guid = 3;
  if (this->has_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guid_);
  }

  // .TrailData trail_data = 7;
  if (this->has_trail_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trail_data_);
  }

  // .Color color = 26;
  if (this->has_color()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // .FestivalFilter festival_filter = 27;
  if (this->has_festival_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *festival_filter_);
  }

  // .MapTypeFilter map_type_filter = 28;
  if (this->has_map_type_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_type_filter_);
  }

  // .MountFilter mount_filter = 29;
  if (this->has_mount_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mount_filter_);
  }

  // .ProfessionFilter profession_filter = 30;
  if (this->has_profession_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profession_filter_);
  }

  // .SpecializationFilter specialization_filter = 31;
  if (this->has_specialization_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specialization_filter_);
  }

  // .SpeciesFilter species_filter = 32;
  if (this->has_species_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *species_filter_);
  }

  // int32 map_id = 4;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  // float distance_fade_end = 5;
  if (!(this->distance_fade_end() <= 0 && this->distance_fade_end() >= 0)) {
    total_size += 1 + 4;
  }

  // float distance_fade_start = 6;
  if (!(this->distance_fade_start() <= 0 && this->distance_fade_start() >= 0)) {
    total_size += 1 + 4;
  }

  // float animation_speed = 8;
  if (!(this->animation_speed() <= 0 && this->animation_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // .CullChirality cull_chirality = 9;
  if (this->cull_chirality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cull_chirality());
  }

  // fixed32 achievement_bit = 16;
  if (this->achievement_bit() != 0) {
    total_size += 2 + 4;
  }

  // int32 achievement_id = 17;
  if (this->achievement_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_achievement_id());
  }

  // float alpha = 18;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 2 + 4;
  }

  // bool can_fade = 19;
  if (this->can_fade() != 0) {
    total_size += 2 + 1;
  }

  // bool is_wall = 22;
  if (this->is_wall() != 0) {
    total_size += 2 + 1;
  }

  // float bhdraft__schedule_duration = 24;
  if (!(this->bhdraft__schedule_duration() <= 0 && this->bhdraft__schedule_duration() >= 0)) {
    total_size += 2 + 4;
  }

  // float scale = 25;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trail)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trail)
    MergeFrom(*source);
  }
}

void Trail::MergeFrom(const Trail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bhdraft__schedule().size() > 0) {
    _internal_set_bhdraft__schedule(from._internal_bhdraft__schedule());
  }
  if (from.has_category()) {
    _internal_mutable_category()->::Category::MergeFrom(from._internal_category());
  }
  if (from.has_texture()) {
    _internal_mutable_texture()->::Texture::MergeFrom(from._internal_texture());
  }
  if (from.has_guid()) {
    _internal_mutable_guid()->::GUID::MergeFrom(from._internal_guid());
  }
  if (from.has_trail_data()) {
    _internal_mutable_trail_data()->::TrailData::MergeFrom(from._internal_trail_data());
  }
  if (from.has_color()) {
    _internal_mutable_color()->::Color::MergeFrom(from._internal_color());
  }
  if (from.has_festival_filter()) {
    _internal_mutable_festival_filter()->::FestivalFilter::MergeFrom(from._internal_festival_filter());
  }
  if (from.has_map_type_filter()) {
    _internal_mutable_map_type_filter()->::MapTypeFilter::MergeFrom(from._internal_map_type_filter());
  }
  if (from.has_mount_filter()) {
    _internal_mutable_mount_filter()->::MountFilter::MergeFrom(from._internal_mount_filter());
  }
  if (from.has_profession_filter()) {
    _internal_mutable_profession_filter()->::ProfessionFilter::MergeFrom(from._internal_profession_filter());
  }
  if (from.has_specialization_filter()) {
    _internal_mutable_specialization_filter()->::SpecializationFilter::MergeFrom(from._internal_specialization_filter());
  }
  if (from.has_species_filter()) {
    _internal_mutable_species_filter()->::SpeciesFilter::MergeFrom(from._internal_species_filter());
  }
  if (from.map_id() != 0) {
    _internal_set_map_id(from._internal_map_id());
  }
  if (!(from.distance_fade_end() <= 0 && from.distance_fade_end() >= 0)) {
    _internal_set_distance_fade_end(from._internal_distance_fade_end());
  }
  if (!(from.distance_fade_start() <= 0 && from.distance_fade_start() >= 0)) {
    _internal_set_distance_fade_start(from._internal_distance_fade_start());
  }
  if (!(from.animation_speed() <= 0 && from.animation_speed() >= 0)) {
    _internal_set_animation_speed(from._internal_animation_speed());
  }
  if (from.cull_chirality() != 0) {
    _internal_set_cull_chirality(from._internal_cull_chirality());
  }
  if (from.achievement_bit() != 0) {
    _internal_set_achievement_bit(from._internal_achievement_bit());
  }
  if (from.achievement_id() != 0) {
    _internal_set_achievement_id(from._internal_achievement_id());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (from.can_fade() != 0) {
    _internal_set_can_fade(from._internal_can_fade());
  }
  if (from.is_wall() != 0) {
    _internal_set_is_wall(from._internal_is_wall());
  }
  if (!(from.bhdraft__schedule_duration() <= 0 && from.bhdraft__schedule_duration() >= 0)) {
    _internal_set_bhdraft__schedule_duration(from._internal_bhdraft__schedule_duration());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
}

void Trail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail::CopyFrom(const Trail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail::IsInitialized() const {
  return true;
}

void Trail::InternalSwap(Trail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bhdraft__schedule_.Swap(&other->bhdraft__schedule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trail, scale_)
      + sizeof(Trail::scale_)
      - PROTOBUF_FIELD_OFFSET(Trail, category_)>(
          reinterpret_cast<char*>(&category_),
          reinterpret_cast<char*>(&other->category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Texture::InitAsDefaultInstance() {
}
class Texture::_Internal {
 public:
};

Texture::Texture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Texture)
}
Texture::Texture(const Texture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Texture)
}

void Texture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Texture_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Texture::~Texture() {
  // @@protoc_insertion_point(destructor:Texture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Texture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Texture::ArenaDtor(void* object) {
  Texture* _this = reinterpret_cast< Texture* >(object);
  (void)_this;
}
void Texture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Texture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Texture& Texture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Texture_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void Texture::Clear() {
// @@protoc_insertion_point(message_clear_start:Texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Texture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Texture.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Texture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Texture.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Texture)
  return target;
}

size_t Texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Texture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Texture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Texture)
  GOOGLE_DCHECK_NE(&from, this);
  const Texture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Texture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Texture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Texture)
    MergeFrom(*source);
  }
}

void Texture::MergeFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Texture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void Texture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Texture::CopyFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Texture::IsInitialized() const {
  return true;
}

void Texture::InternalSwap(Texture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Texture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Position)
}

void Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, z_)
      + sizeof(Position::z_)
      - PROTOBUF_FIELD_OFFSET(Position, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EulerRotation::InitAsDefaultInstance() {
}
class EulerRotation::_Internal {
 public:
};

EulerRotation::EulerRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EulerRotation)
}
EulerRotation::EulerRotation(const EulerRotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:EulerRotation)
}

void EulerRotation::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

EulerRotation::~EulerRotation() {
  // @@protoc_insertion_point(destructor:EulerRotation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EulerRotation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EulerRotation::ArenaDtor(void* object) {
  EulerRotation* _this = reinterpret_cast< EulerRotation* >(object);
  (void)_this;
}
void EulerRotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EulerRotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EulerRotation& EulerRotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EulerRotation_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void EulerRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:EulerRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EulerRotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EulerRotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EulerRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EulerRotation)
  return target;
}

size_t EulerRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EulerRotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EulerRotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EulerRotation)
  GOOGLE_DCHECK_NE(&from, this);
  const EulerRotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EulerRotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EulerRotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EulerRotation)
    MergeFrom(*source);
  }
}

void EulerRotation::MergeFrom(const EulerRotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EulerRotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void EulerRotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EulerRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EulerRotation::CopyFrom(const EulerRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EulerRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EulerRotation::IsInitialized() const {
  return true;
}

void EulerRotation::InternalSwap(EulerRotation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EulerRotation, z_)
      + sizeof(EulerRotation::z_)
      - PROTOBUF_FIELD_OFFSET(EulerRotation, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EulerRotation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trigger::InitAsDefaultInstance() {
  ::_Trigger_default_instance_._instance.get_mutable()->action_hide_category_ = const_cast< ::Category*>(
      ::Category::internal_default_instance());
  ::_Trigger_default_instance_._instance.get_mutable()->action_show_category_ = const_cast< ::Category*>(
      ::Category::internal_default_instance());
  ::_Trigger_default_instance_._instance.get_mutable()->action_toggle_category_ = const_cast< ::Category*>(
      ::Category::internal_default_instance());
}
class Trigger::_Internal {
 public:
  static const ::Category& action_hide_category(const Trigger* msg);
  static const ::Category& action_show_category(const Trigger* msg);
  static const ::Category& action_toggle_category(const Trigger* msg);
};

const ::Category&
Trigger::_Internal::action_hide_category(const Trigger* msg) {
  return *msg->action_hide_category_;
}
const ::Category&
Trigger::_Internal::action_show_category(const Trigger* msg) {
  return *msg->action_show_category_;
}
const ::Category&
Trigger::_Internal::action_toggle_category(const Trigger* msg) {
  return *msg->action_toggle_category_;
}
Trigger::Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Trigger)
}
Trigger::Trigger(const Trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_copy_clipboard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_copy_clipboard().empty()) {
    action_copy_clipboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_copy_clipboard(),
      GetArena());
  }
  action_copy_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_copy_message().empty()) {
    action_copy_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_copy_message(),
      GetArena());
  }
  action_info_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_info_message().empty()) {
    action_info_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_info_message(),
      GetArena());
  }
  if (from._internal_has_action_hide_category()) {
    action_hide_category_ = new ::Category(*from.action_hide_category_);
  } else {
    action_hide_category_ = nullptr;
  }
  if (from._internal_has_action_show_category()) {
    action_show_category_ = new ::Category(*from.action_show_category_);
  } else {
    action_show_category_ = nullptr;
  }
  if (from._internal_has_action_toggle_category()) {
    action_toggle_category_ = new ::Category(*from.action_toggle_category_);
  } else {
    action_toggle_category_ = nullptr;
  }
  ::memcpy(&bounce_delay_, &from.bounce_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&bounce_delay_)) + sizeof(range_));
  // @@protoc_insertion_point(copy_constructor:Trigger)
}

void Trigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trigger_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  action_copy_clipboard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_copy_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_info_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_hide_category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&action_hide_category_)) + sizeof(range_));
}

Trigger::~Trigger() {
  // @@protoc_insertion_point(destructor:Trigger)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trigger::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_copy_clipboard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_copy_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_info_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_hide_category_;
  if (this != internal_default_instance()) delete action_show_category_;
  if (this != internal_default_instance()) delete action_toggle_category_;
}

void Trigger::ArenaDtor(void* object) {
  Trigger* _this = reinterpret_cast< Trigger* >(object);
  (void)_this;
}
void Trigger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trigger& Trigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trigger_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_copy_clipboard_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_copy_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_info_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && action_hide_category_ != nullptr) {
    delete action_hide_category_;
  }
  action_hide_category_ = nullptr;
  if (GetArena() == nullptr && action_show_category_ != nullptr) {
    delete action_show_category_;
  }
  action_show_category_ = nullptr;
  if (GetArena() == nullptr && action_toggle_category_ != nullptr) {
    delete action_toggle_category_;
  }
  action_toggle_category_ = nullptr;
  ::memset(&bounce_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&bounce_delay_)) + sizeof(range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool auto_trigger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auto_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bounce_delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          bounce_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bounce_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          bounce_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bounce_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          bounce_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string action_copy_clipboard = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_action_copy_clipboard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trigger.action_copy_clipboard"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action_copy_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_action_copy_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trigger.action_copy_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_countdown = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          has_countdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action_info_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_action_info_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trigger.action_info_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool invert_display = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          invert_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float reset_length = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          reset_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Category action_hide_category = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_hide_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Category action_show_category = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_show_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Category action_toggle_category = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_toggle_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trigger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool auto_trigger = 1;
  if (this->auto_trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_auto_trigger(), target);
  }

  // float bounce_delay = 2;
  if (!(this->bounce_delay() <= 0 && this->bounce_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bounce_delay(), target);
  }

  // float bounce_duration = 3;
  if (!(this->bounce_duration() <= 0 && this->bounce_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bounce_duration(), target);
  }

  // float bounce_height = 4;
  if (!(this->bounce_height() <= 0 && this->bounce_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bounce_height(), target);
  }

  // string action_copy_clipboard = 5;
  if (this->action_copy_clipboard().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_copy_clipboard().data(), static_cast<int>(this->_internal_action_copy_clipboard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trigger.action_copy_clipboard");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action_copy_clipboard(), target);
  }

  // string action_copy_message = 6;
  if (this->action_copy_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_copy_message().data(), static_cast<int>(this->_internal_action_copy_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trigger.action_copy_message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_action_copy_message(), target);
  }

  // bool has_countdown = 7;
  if (this->has_countdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_countdown(), target);
  }

  // string action_info_message = 8;
  if (this->action_info_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_info_message().data(), static_cast<int>(this->_internal_action_info_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trigger.action_info_message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_action_info_message(), target);
  }

  // bool invert_display = 9;
  if (this->invert_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_invert_display(), target);
  }

  // float reset_length = 10;
  if (!(this->reset_length() <= 0 && this->reset_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_reset_length(), target);
  }

  // float range = 11;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_range(), target);
  }

  // .Category action_hide_category = 12;
  if (this->has_action_hide_category()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::action_hide_category(this), target, stream);
  }

  // .Category action_show_category = 13;
  if (this->has_action_show_category()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::action_show_category(this), target, stream);
  }

  // .Category action_toggle_category = 14;
  if (this->has_action_toggle_category()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::action_toggle_category(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trigger)
  return target;
}

size_t Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trigger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_copy_clipboard = 5;
  if (this->action_copy_clipboard().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_copy_clipboard());
  }

  // string action_copy_message = 6;
  if (this->action_copy_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_copy_message());
  }

  // string action_info_message = 8;
  if (this->action_info_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_info_message());
  }

  // .Category action_hide_category = 12;
  if (this->has_action_hide_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_hide_category_);
  }

  // .Category action_show_category = 13;
  if (this->has_action_show_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_show_category_);
  }

  // .Category action_toggle_category = 14;
  if (this->has_action_toggle_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_toggle_category_);
  }

  // float bounce_delay = 2;
  if (!(this->bounce_delay() <= 0 && this->bounce_delay() >= 0)) {
    total_size += 1 + 4;
  }

  // float bounce_duration = 3;
  if (!(this->bounce_duration() <= 0 && this->bounce_duration() >= 0)) {
    total_size += 1 + 4;
  }

  // float bounce_height = 4;
  if (!(this->bounce_height() <= 0 && this->bounce_height() >= 0)) {
    total_size += 1 + 4;
  }

  // bool auto_trigger = 1;
  if (this->auto_trigger() != 0) {
    total_size += 1 + 1;
  }

  // bool has_countdown = 7;
  if (this->has_countdown() != 0) {
    total_size += 1 + 1;
  }

  // bool invert_display = 9;
  if (this->invert_display() != 0) {
    total_size += 1 + 1;
  }

  // float reset_length = 10;
  if (!(this->reset_length() <= 0 && this->reset_length() >= 0)) {
    total_size += 1 + 4;
  }

  // float range = 11;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  const Trigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trigger)
    MergeFrom(*source);
  }
}

void Trigger::MergeFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_copy_clipboard().size() > 0) {
    _internal_set_action_copy_clipboard(from._internal_action_copy_clipboard());
  }
  if (from.action_copy_message().size() > 0) {
    _internal_set_action_copy_message(from._internal_action_copy_message());
  }
  if (from.action_info_message().size() > 0) {
    _internal_set_action_info_message(from._internal_action_info_message());
  }
  if (from.has_action_hide_category()) {
    _internal_mutable_action_hide_category()->::Category::MergeFrom(from._internal_action_hide_category());
  }
  if (from.has_action_show_category()) {
    _internal_mutable_action_show_category()->::Category::MergeFrom(from._internal_action_show_category());
  }
  if (from.has_action_toggle_category()) {
    _internal_mutable_action_toggle_category()->::Category::MergeFrom(from._internal_action_toggle_category());
  }
  if (!(from.bounce_delay() <= 0 && from.bounce_delay() >= 0)) {
    _internal_set_bounce_delay(from._internal_bounce_delay());
  }
  if (!(from.bounce_duration() <= 0 && from.bounce_duration() >= 0)) {
    _internal_set_bounce_duration(from._internal_bounce_duration());
  }
  if (!(from.bounce_height() <= 0 && from.bounce_height() >= 0)) {
    _internal_set_bounce_height(from._internal_bounce_height());
  }
  if (from.auto_trigger() != 0) {
    _internal_set_auto_trigger(from._internal_auto_trigger());
  }
  if (from.has_countdown() != 0) {
    _internal_set_has_countdown(from._internal_has_countdown());
  }
  if (from.invert_display() != 0) {
    _internal_set_invert_display(from._internal_invert_display());
  }
  if (!(from.reset_length() <= 0 && from.reset_length() >= 0)) {
    _internal_set_reset_length(from._internal_reset_length());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
}

void Trigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger::CopyFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  return true;
}

void Trigger::InternalSwap(Trigger* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  action_copy_clipboard_.Swap(&other->action_copy_clipboard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_copy_message_.Swap(&other->action_copy_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_info_message_.Swap(&other->action_info_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trigger, range_)
      + sizeof(Trigger::range_)
      - PROTOBUF_FIELD_OFFSET(Trigger, action_hide_category_)>(
          reinterpret_cast<char*>(&action_hide_category_),
          reinterpret_cast<char*>(&other->action_hide_category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trigger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GUID::InitAsDefaultInstance() {
}
class GUID::_Internal {
 public:
};

GUID::GUID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GUID)
}
GUID::GUID(const GUID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:GUID)
}

void GUID::SharedCtor() {
  guid_ = 0;
}

GUID::~GUID() {
  // @@protoc_insertion_point(destructor:GUID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GUID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GUID::ArenaDtor(void* object) {
  GUID* _this = reinterpret_cast< GUID* >(object);
  (void)_this;
}
void GUID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GUID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GUID& GUID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GUID_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void GUID::Clear() {
// @@protoc_insertion_point(message_clear_start:GUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GUID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GUID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GUID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 guid = 1;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GUID)
  return target;
}

size_t GUID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GUID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GUID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GUID)
  GOOGLE_DCHECK_NE(&from, this);
  const GUID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GUID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GUID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GUID)
    MergeFrom(*source);
  }
}

void GUID::MergeFrom(const GUID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GUID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
}

void GUID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUID::CopyFrom(const GUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUID::IsInitialized() const {
  return true;
}

void GUID::InternalSwap(GUID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(guid_, other->guid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GUID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Color::InitAsDefaultInstance() {
}
class Color::_Internal {
 public:
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hex().empty()) {
    hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hex(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Color)
}

void Color::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Color_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:Color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Color.hex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hex = 1;
  if (this->hex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hex().data(), static_cast<int>(this->_internal_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Color.hex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hex = 1;
  if (this->hex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hex().size() > 0) {
    _internal_set_hex(from._internal_hex());
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hex_.Swap(&other->hex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FestivalFilter::InitAsDefaultInstance() {
}
class FestivalFilter::_Internal {
 public:
};

FestivalFilter::FestivalFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FestivalFilter)
}
FestivalFilter::FestivalFilter(const FestivalFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dragonbash_, &from.dragonbash_,
    static_cast<size_t>(reinterpret_cast<char*>(&none_) -
    reinterpret_cast<char*>(&dragonbash_)) + sizeof(none_));
  // @@protoc_insertion_point(copy_constructor:FestivalFilter)
}

void FestivalFilter::SharedCtor() {
  ::memset(&dragonbash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&none_) -
      reinterpret_cast<char*>(&dragonbash_)) + sizeof(none_));
}

FestivalFilter::~FestivalFilter() {
  // @@protoc_insertion_point(destructor:FestivalFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FestivalFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FestivalFilter::ArenaDtor(void* object) {
  FestivalFilter* _this = reinterpret_cast< FestivalFilter* >(object);
  (void)_this;
}
void FestivalFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FestivalFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FestivalFilter& FestivalFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FestivalFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void FestivalFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:FestivalFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dragonbash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&none_) -
      reinterpret_cast<char*>(&dragonbash_)) + sizeof(none_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FestivalFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool dragonbash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dragonbash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool festival_of_the_four_winds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          festival_of_the_four_winds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool halloween = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          halloween_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lunar_new_year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lunar_new_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool super_adventure_festival = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          super_adventure_festival_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool wintersday = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          wintersday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool none = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          none_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FestivalFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FestivalFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool dragonbash = 1;
  if (this->dragonbash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_dragonbash(), target);
  }

  // bool festival_of_the_four_winds = 2;
  if (this->festival_of_the_four_winds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_festival_of_the_four_winds(), target);
  }

  // bool halloween = 3;
  if (this->halloween() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_halloween(), target);
  }

  // bool lunar_new_year = 4;
  if (this->lunar_new_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_lunar_new_year(), target);
  }

  // bool super_adventure_festival = 5;
  if (this->super_adventure_festival() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_super_adventure_festival(), target);
  }

  // bool wintersday = 6;
  if (this->wintersday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_wintersday(), target);
  }

  // bool none = 7;
  if (this->none() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_none(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FestivalFilter)
  return target;
}

size_t FestivalFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FestivalFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool dragonbash = 1;
  if (this->dragonbash() != 0) {
    total_size += 1 + 1;
  }

  // bool festival_of_the_four_winds = 2;
  if (this->festival_of_the_four_winds() != 0) {
    total_size += 1 + 1;
  }

  // bool halloween = 3;
  if (this->halloween() != 0) {
    total_size += 1 + 1;
  }

  // bool lunar_new_year = 4;
  if (this->lunar_new_year() != 0) {
    total_size += 1 + 1;
  }

  // bool super_adventure_festival = 5;
  if (this->super_adventure_festival() != 0) {
    total_size += 1 + 1;
  }

  // bool wintersday = 6;
  if (this->wintersday() != 0) {
    total_size += 1 + 1;
  }

  // bool none = 7;
  if (this->none() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FestivalFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FestivalFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const FestivalFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FestivalFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FestivalFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FestivalFilter)
    MergeFrom(*source);
  }
}

void FestivalFilter::MergeFrom(const FestivalFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FestivalFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dragonbash() != 0) {
    _internal_set_dragonbash(from._internal_dragonbash());
  }
  if (from.festival_of_the_four_winds() != 0) {
    _internal_set_festival_of_the_four_winds(from._internal_festival_of_the_four_winds());
  }
  if (from.halloween() != 0) {
    _internal_set_halloween(from._internal_halloween());
  }
  if (from.lunar_new_year() != 0) {
    _internal_set_lunar_new_year(from._internal_lunar_new_year());
  }
  if (from.super_adventure_festival() != 0) {
    _internal_set_super_adventure_festival(from._internal_super_adventure_festival());
  }
  if (from.wintersday() != 0) {
    _internal_set_wintersday(from._internal_wintersday());
  }
  if (from.none() != 0) {
    _internal_set_none(from._internal_none());
  }
}

void FestivalFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FestivalFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalFilter::CopyFrom(const FestivalFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FestivalFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalFilter::IsInitialized() const {
  return true;
}

void FestivalFilter::InternalSwap(FestivalFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FestivalFilter, none_)
      + sizeof(FestivalFilter::none_)
      - PROTOBUF_FIELD_OFFSET(FestivalFilter, dragonbash_)>(
          reinterpret_cast<char*>(&dragonbash_),
          reinterpret_cast<char*>(&other->dragonbash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FestivalFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapTypeFilter::InitAsDefaultInstance() {
}
class MapTypeFilter::_Internal {
 public:
};

MapTypeFilter::MapTypeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MapTypeFilter)
}
MapTypeFilter::MapTypeFilter(const MapTypeFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unknown_map_, &from.unknown_map_,
    static_cast<size_t>(reinterpret_cast<char*>(&wvw_lounge_map_) -
    reinterpret_cast<char*>(&unknown_map_)) + sizeof(wvw_lounge_map_));
  // @@protoc_insertion_point(copy_constructor:MapTypeFilter)
}

void MapTypeFilter::SharedCtor() {
  ::memset(&unknown_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wvw_lounge_map_) -
      reinterpret_cast<char*>(&unknown_map_)) + sizeof(wvw_lounge_map_));
}

MapTypeFilter::~MapTypeFilter() {
  // @@protoc_insertion_point(destructor:MapTypeFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapTypeFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MapTypeFilter::ArenaDtor(void* object) {
  MapTypeFilter* _this = reinterpret_cast< MapTypeFilter* >(object);
  (void)_this;
}
void MapTypeFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapTypeFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapTypeFilter& MapTypeFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapTypeFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void MapTypeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:MapTypeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unknown_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wvw_lounge_map_) -
      reinterpret_cast<char*>(&unknown_map_)) + sizeof(wvw_lounge_map_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapTypeFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool unknown_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unknown_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool redirect_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          redirect_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool character_create_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          character_create_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pvp_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pvp_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gvg_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gvg_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool instance_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          instance_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool public_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          public_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tournament_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tournament_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tutorial_map = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tutorial_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool user_tournament_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          user_tournament_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool center_map = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          center_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool eternal_battlegrounds_map = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          eternal_battlegrounds_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bluehome_map = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          bluehome_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blue_borderlands_map = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          blue_borderlands_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool green_home_map = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          green_home_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool green_borderlands_map = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          green_borderlands_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool red_home_map = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          red_home_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool red_borderlands_map = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          red_borderlands_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fortunes_vale_map = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          fortunes_vale_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool jump_puzzle_map = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          jump_puzzle_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool obsidian_sanctum_map = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          obsidian_sanctum_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool edge_of_the_mists_map = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          edge_of_the_mists_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool public_mini_map = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          public_mini_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool wvw_lounge_map = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          wvw_lounge_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapTypeFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapTypeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool unknown_map = 1;
  if (this->unknown_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_unknown_map(), target);
  }

  // bool redirect_map = 2;
  if (this->redirect_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_redirect_map(), target);
  }

  // bool character_create_map = 3;
  if (this->character_create_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_character_create_map(), target);
  }

  // bool pvp_map = 4;
  if (this->pvp_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pvp_map(), target);
  }

  // bool gvg_map = 5;
  if (this->gvg_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gvg_map(), target);
  }

  // bool instance_map = 6;
  if (this->instance_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_instance_map(), target);
  }

  // bool public_map = 7;
  if (this->public_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_public_map(), target);
  }

  // bool tournament_map = 8;
  if (this->tournament_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_tournament_map(), target);
  }

  // bool tutorial_map = 9;
  if (this->tutorial_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_tutorial_map(), target);
  }

  // bool user_tournament_map = 10;
  if (this->user_tournament_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_user_tournament_map(), target);
  }

  // bool center_map = 11;
  if (this->center_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_center_map(), target);
  }

  // bool eternal_battlegrounds_map = 12;
  if (this->eternal_battlegrounds_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_eternal_battlegrounds_map(), target);
  }

  // bool bluehome_map = 13;
  if (this->bluehome_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_bluehome_map(), target);
  }

  // bool blue_borderlands_map = 14;
  if (this->blue_borderlands_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_blue_borderlands_map(), target);
  }

  // bool green_home_map = 15;
  if (this->green_home_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_green_home_map(), target);
  }

  // bool green_borderlands_map = 16;
  if (this->green_borderlands_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_green_borderlands_map(), target);
  }

  // bool red_home_map = 17;
  if (this->red_home_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_red_home_map(), target);
  }

  // bool red_borderlands_map = 18;
  if (this->red_borderlands_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_red_borderlands_map(), target);
  }

  // bool fortunes_vale_map = 19;
  if (this->fortunes_vale_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_fortunes_vale_map(), target);
  }

  // bool jump_puzzle_map = 20;
  if (this->jump_puzzle_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_jump_puzzle_map(), target);
  }

  // bool obsidian_sanctum_map = 21;
  if (this->obsidian_sanctum_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_obsidian_sanctum_map(), target);
  }

  // bool edge_of_the_mists_map = 22;
  if (this->edge_of_the_mists_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_edge_of_the_mists_map(), target);
  }

  // bool public_mini_map = 23;
  if (this->public_mini_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_public_mini_map(), target);
  }

  // bool wvw_lounge_map = 24;
  if (this->wvw_lounge_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_wvw_lounge_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapTypeFilter)
  return target;
}

size_t MapTypeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MapTypeFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool unknown_map = 1;
  if (this->unknown_map() != 0) {
    total_size += 1 + 1;
  }

  // bool redirect_map = 2;
  if (this->redirect_map() != 0) {
    total_size += 1 + 1;
  }

  // bool character_create_map = 3;
  if (this->character_create_map() != 0) {
    total_size += 1 + 1;
  }

  // bool pvp_map = 4;
  if (this->pvp_map() != 0) {
    total_size += 1 + 1;
  }

  // bool gvg_map = 5;
  if (this->gvg_map() != 0) {
    total_size += 1 + 1;
  }

  // bool instance_map = 6;
  if (this->instance_map() != 0) {
    total_size += 1 + 1;
  }

  // bool public_map = 7;
  if (this->public_map() != 0) {
    total_size += 1 + 1;
  }

  // bool tournament_map = 8;
  if (this->tournament_map() != 0) {
    total_size += 1 + 1;
  }

  // bool tutorial_map = 9;
  if (this->tutorial_map() != 0) {
    total_size += 1 + 1;
  }

  // bool user_tournament_map = 10;
  if (this->user_tournament_map() != 0) {
    total_size += 1 + 1;
  }

  // bool center_map = 11;
  if (this->center_map() != 0) {
    total_size += 1 + 1;
  }

  // bool eternal_battlegrounds_map = 12;
  if (this->eternal_battlegrounds_map() != 0) {
    total_size += 1 + 1;
  }

  // bool bluehome_map = 13;
  if (this->bluehome_map() != 0) {
    total_size += 1 + 1;
  }

  // bool blue_borderlands_map = 14;
  if (this->blue_borderlands_map() != 0) {
    total_size += 1 + 1;
  }

  // bool green_home_map = 15;
  if (this->green_home_map() != 0) {
    total_size += 1 + 1;
  }

  // bool green_borderlands_map = 16;
  if (this->green_borderlands_map() != 0) {
    total_size += 2 + 1;
  }

  // bool red_home_map = 17;
  if (this->red_home_map() != 0) {
    total_size += 2 + 1;
  }

  // bool red_borderlands_map = 18;
  if (this->red_borderlands_map() != 0) {
    total_size += 2 + 1;
  }

  // bool fortunes_vale_map = 19;
  if (this->fortunes_vale_map() != 0) {
    total_size += 2 + 1;
  }

  // bool jump_puzzle_map = 20;
  if (this->jump_puzzle_map() != 0) {
    total_size += 2 + 1;
  }

  // bool obsidian_sanctum_map = 21;
  if (this->obsidian_sanctum_map() != 0) {
    total_size += 2 + 1;
  }

  // bool edge_of_the_mists_map = 22;
  if (this->edge_of_the_mists_map() != 0) {
    total_size += 2 + 1;
  }

  // bool public_mini_map = 23;
  if (this->public_mini_map() != 0) {
    total_size += 2 + 1;
  }

  // bool wvw_lounge_map = 24;
  if (this->wvw_lounge_map() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapTypeFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MapTypeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const MapTypeFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapTypeFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MapTypeFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MapTypeFilter)
    MergeFrom(*source);
  }
}

void MapTypeFilter::MergeFrom(const MapTypeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MapTypeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unknown_map() != 0) {
    _internal_set_unknown_map(from._internal_unknown_map());
  }
  if (from.redirect_map() != 0) {
    _internal_set_redirect_map(from._internal_redirect_map());
  }
  if (from.character_create_map() != 0) {
    _internal_set_character_create_map(from._internal_character_create_map());
  }
  if (from.pvp_map() != 0) {
    _internal_set_pvp_map(from._internal_pvp_map());
  }
  if (from.gvg_map() != 0) {
    _internal_set_gvg_map(from._internal_gvg_map());
  }
  if (from.instance_map() != 0) {
    _internal_set_instance_map(from._internal_instance_map());
  }
  if (from.public_map() != 0) {
    _internal_set_public_map(from._internal_public_map());
  }
  if (from.tournament_map() != 0) {
    _internal_set_tournament_map(from._internal_tournament_map());
  }
  if (from.tutorial_map() != 0) {
    _internal_set_tutorial_map(from._internal_tutorial_map());
  }
  if (from.user_tournament_map() != 0) {
    _internal_set_user_tournament_map(from._internal_user_tournament_map());
  }
  if (from.center_map() != 0) {
    _internal_set_center_map(from._internal_center_map());
  }
  if (from.eternal_battlegrounds_map() != 0) {
    _internal_set_eternal_battlegrounds_map(from._internal_eternal_battlegrounds_map());
  }
  if (from.bluehome_map() != 0) {
    _internal_set_bluehome_map(from._internal_bluehome_map());
  }
  if (from.blue_borderlands_map() != 0) {
    _internal_set_blue_borderlands_map(from._internal_blue_borderlands_map());
  }
  if (from.green_home_map() != 0) {
    _internal_set_green_home_map(from._internal_green_home_map());
  }
  if (from.green_borderlands_map() != 0) {
    _internal_set_green_borderlands_map(from._internal_green_borderlands_map());
  }
  if (from.red_home_map() != 0) {
    _internal_set_red_home_map(from._internal_red_home_map());
  }
  if (from.red_borderlands_map() != 0) {
    _internal_set_red_borderlands_map(from._internal_red_borderlands_map());
  }
  if (from.fortunes_vale_map() != 0) {
    _internal_set_fortunes_vale_map(from._internal_fortunes_vale_map());
  }
  if (from.jump_puzzle_map() != 0) {
    _internal_set_jump_puzzle_map(from._internal_jump_puzzle_map());
  }
  if (from.obsidian_sanctum_map() != 0) {
    _internal_set_obsidian_sanctum_map(from._internal_obsidian_sanctum_map());
  }
  if (from.edge_of_the_mists_map() != 0) {
    _internal_set_edge_of_the_mists_map(from._internal_edge_of_the_mists_map());
  }
  if (from.public_mini_map() != 0) {
    _internal_set_public_mini_map(from._internal_public_mini_map());
  }
  if (from.wvw_lounge_map() != 0) {
    _internal_set_wvw_lounge_map(from._internal_wvw_lounge_map());
  }
}

void MapTypeFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MapTypeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapTypeFilter::CopyFrom(const MapTypeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MapTypeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTypeFilter::IsInitialized() const {
  return true;
}

void MapTypeFilter::InternalSwap(MapTypeFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapTypeFilter, wvw_lounge_map_)
      + sizeof(MapTypeFilter::wvw_lounge_map_)
      - PROTOBUF_FIELD_OFFSET(MapTypeFilter, unknown_map_)>(
          reinterpret_cast<char*>(&unknown_map_),
          reinterpret_cast<char*>(&other->unknown_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapTypeFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MountFilter::InitAsDefaultInstance() {
}
class MountFilter::_Internal {
 public:
};

MountFilter::MountFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MountFilter)
}
MountFilter::MountFilter(const MountFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&raptor_, &from.raptor_,
    static_cast<size_t>(reinterpret_cast<char*>(&seige_turtle_) -
    reinterpret_cast<char*>(&raptor_)) + sizeof(seige_turtle_));
  // @@protoc_insertion_point(copy_constructor:MountFilter)
}

void MountFilter::SharedCtor() {
  ::memset(&raptor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seige_turtle_) -
      reinterpret_cast<char*>(&raptor_)) + sizeof(seige_turtle_));
}

MountFilter::~MountFilter() {
  // @@protoc_insertion_point(destructor:MountFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MountFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MountFilter::ArenaDtor(void* object) {
  MountFilter* _this = reinterpret_cast< MountFilter* >(object);
  (void)_this;
}
void MountFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MountFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MountFilter& MountFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MountFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void MountFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:MountFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&raptor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seige_turtle_) -
      reinterpret_cast<char*>(&raptor_)) + sizeof(seige_turtle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MountFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool raptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          raptor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool springer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          springer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skimmer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skimmer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool jackal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          jackal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool griffon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          griffon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool roller_beetle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          roller_beetle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warclaw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          warclaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skyscalee = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          skyscalee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skiff = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          skiff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool seige_turtle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          seige_turtle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MountFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MountFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool raptor = 1;
  if (this->raptor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_raptor(), target);
  }

  // bool springer = 2;
  if (this->springer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_springer(), target);
  }

  // bool skimmer = 3;
  if (this->skimmer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_skimmer(), target);
  }

  // bool jackal = 4;
  if (this->jackal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_jackal(), target);
  }

  // bool griffon = 5;
  if (this->griffon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_griffon(), target);
  }

  // bool roller_beetle = 6;
  if (this->roller_beetle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_roller_beetle(), target);
  }

  // bool warclaw = 7;
  if (this->warclaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_warclaw(), target);
  }

  // bool skyscalee = 8;
  if (this->skyscalee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_skyscalee(), target);
  }

  // bool skiff = 9;
  if (this->skiff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_skiff(), target);
  }

  // bool seige_turtle = 10;
  if (this->seige_turtle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_seige_turtle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MountFilter)
  return target;
}

size_t MountFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MountFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool raptor = 1;
  if (this->raptor() != 0) {
    total_size += 1 + 1;
  }

  // bool springer = 2;
  if (this->springer() != 0) {
    total_size += 1 + 1;
  }

  // bool skimmer = 3;
  if (this->skimmer() != 0) {
    total_size += 1 + 1;
  }

  // bool jackal = 4;
  if (this->jackal() != 0) {
    total_size += 1 + 1;
  }

  // bool griffon = 5;
  if (this->griffon() != 0) {
    total_size += 1 + 1;
  }

  // bool roller_beetle = 6;
  if (this->roller_beetle() != 0) {
    total_size += 1 + 1;
  }

  // bool warclaw = 7;
  if (this->warclaw() != 0) {
    total_size += 1 + 1;
  }

  // bool skyscalee = 8;
  if (this->skyscalee() != 0) {
    total_size += 1 + 1;
  }

  // bool skiff = 9;
  if (this->skiff() != 0) {
    total_size += 1 + 1;
  }

  // bool seige_turtle = 10;
  if (this->seige_turtle() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MountFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MountFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const MountFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MountFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MountFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MountFilter)
    MergeFrom(*source);
  }
}

void MountFilter::MergeFrom(const MountFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MountFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raptor() != 0) {
    _internal_set_raptor(from._internal_raptor());
  }
  if (from.springer() != 0) {
    _internal_set_springer(from._internal_springer());
  }
  if (from.skimmer() != 0) {
    _internal_set_skimmer(from._internal_skimmer());
  }
  if (from.jackal() != 0) {
    _internal_set_jackal(from._internal_jackal());
  }
  if (from.griffon() != 0) {
    _internal_set_griffon(from._internal_griffon());
  }
  if (from.roller_beetle() != 0) {
    _internal_set_roller_beetle(from._internal_roller_beetle());
  }
  if (from.warclaw() != 0) {
    _internal_set_warclaw(from._internal_warclaw());
  }
  if (from.skyscalee() != 0) {
    _internal_set_skyscalee(from._internal_skyscalee());
  }
  if (from.skiff() != 0) {
    _internal_set_skiff(from._internal_skiff());
  }
  if (from.seige_turtle() != 0) {
    _internal_set_seige_turtle(from._internal_seige_turtle());
  }
}

void MountFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MountFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountFilter::CopyFrom(const MountFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MountFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountFilter::IsInitialized() const {
  return true;
}

void MountFilter::InternalSwap(MountFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MountFilter, seige_turtle_)
      + sizeof(MountFilter::seige_turtle_)
      - PROTOBUF_FIELD_OFFSET(MountFilter, raptor_)>(
          reinterpret_cast<char*>(&raptor_),
          reinterpret_cast<char*>(&other->raptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MountFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfessionFilter::InitAsDefaultInstance() {
}
class ProfessionFilter::_Internal {
 public:
};

ProfessionFilter::ProfessionFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProfessionFilter)
}
ProfessionFilter::ProfessionFilter(const ProfessionFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guardian_, &from.guardian_,
    static_cast<size_t>(reinterpret_cast<char*>(&revenantnt_) -
    reinterpret_cast<char*>(&guardian_)) + sizeof(revenantnt_));
  // @@protoc_insertion_point(copy_constructor:ProfessionFilter)
}

void ProfessionFilter::SharedCtor() {
  ::memset(&guardian_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revenantnt_) -
      reinterpret_cast<char*>(&guardian_)) + sizeof(revenantnt_));
}

ProfessionFilter::~ProfessionFilter() {
  // @@protoc_insertion_point(destructor:ProfessionFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfessionFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfessionFilter::ArenaDtor(void* object) {
  ProfessionFilter* _this = reinterpret_cast< ProfessionFilter* >(object);
  (void)_this;
}
void ProfessionFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfessionFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfessionFilter& ProfessionFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfessionFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void ProfessionFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfessionFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guardian_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revenantnt_) -
      reinterpret_cast<char*>(&guardian_)) + sizeof(revenantnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfessionFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool guardian = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guardian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          warrior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          engineer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ranger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          thief_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          elementalist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          mesmer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          necromancer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenantnt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          revenantnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfessionFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfessionFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool guardian = 1;
  if (this->guardian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_guardian(), target);
  }

  // bool warrior = 2;
  if (this->warrior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_warrior(), target);
  }

  // bool engineer = 3;
  if (this->engineer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_engineer(), target);
  }

  // bool ranger = 4;
  if (this->ranger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ranger(), target);
  }

  // bool thief = 5;
  if (this->thief() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_thief(), target);
  }

  // bool elementalist = 6;
  if (this->elementalist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_elementalist(), target);
  }

  // bool mesmer = 7;
  if (this->mesmer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_mesmer(), target);
  }

  // bool necromancer = 8;
  if (this->necromancer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_necromancer(), target);
  }

  // bool revenantnt = 9;
  if (this->revenantnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_revenantnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfessionFilter)
  return target;
}

size_t ProfessionFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfessionFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool guardian = 1;
  if (this->guardian() != 0) {
    total_size += 1 + 1;
  }

  // bool warrior = 2;
  if (this->warrior() != 0) {
    total_size += 1 + 1;
  }

  // bool engineer = 3;
  if (this->engineer() != 0) {
    total_size += 1 + 1;
  }

  // bool ranger = 4;
  if (this->ranger() != 0) {
    total_size += 1 + 1;
  }

  // bool thief = 5;
  if (this->thief() != 0) {
    total_size += 1 + 1;
  }

  // bool elementalist = 6;
  if (this->elementalist() != 0) {
    total_size += 1 + 1;
  }

  // bool mesmer = 7;
  if (this->mesmer() != 0) {
    total_size += 1 + 1;
  }

  // bool necromancer = 8;
  if (this->necromancer() != 0) {
    total_size += 1 + 1;
  }

  // bool revenantnt = 9;
  if (this->revenantnt() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfessionFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProfessionFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfessionFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfessionFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProfessionFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProfessionFilter)
    MergeFrom(*source);
  }
}

void ProfessionFilter::MergeFrom(const ProfessionFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfessionFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guardian() != 0) {
    _internal_set_guardian(from._internal_guardian());
  }
  if (from.warrior() != 0) {
    _internal_set_warrior(from._internal_warrior());
  }
  if (from.engineer() != 0) {
    _internal_set_engineer(from._internal_engineer());
  }
  if (from.ranger() != 0) {
    _internal_set_ranger(from._internal_ranger());
  }
  if (from.thief() != 0) {
    _internal_set_thief(from._internal_thief());
  }
  if (from.elementalist() != 0) {
    _internal_set_elementalist(from._internal_elementalist());
  }
  if (from.mesmer() != 0) {
    _internal_set_mesmer(from._internal_mesmer());
  }
  if (from.necromancer() != 0) {
    _internal_set_necromancer(from._internal_necromancer());
  }
  if (from.revenantnt() != 0) {
    _internal_set_revenantnt(from._internal_revenantnt());
  }
}

void ProfessionFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProfessionFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionFilter::CopyFrom(const ProfessionFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfessionFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionFilter::IsInitialized() const {
  return true;
}

void ProfessionFilter::InternalSwap(ProfessionFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfessionFilter, revenantnt_)
      + sizeof(ProfessionFilter::revenantnt_)
      - PROTOBUF_FIELD_OFFSET(ProfessionFilter, guardian_)>(
          reinterpret_cast<char*>(&guardian_),
          reinterpret_cast<char*>(&other->guardian_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfessionFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpecializationFilter::InitAsDefaultInstance() {
}
class SpecializationFilter::_Internal {
 public:
};

SpecializationFilter::SpecializationFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpecializationFilter)
}
SpecializationFilter::SpecializationFilter(const SpecializationFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&elementalist_tempest_, &from.elementalist_tempest_,
    static_cast<size_t>(reinterpret_cast<char*>(&warrior_tactics_) -
    reinterpret_cast<char*>(&elementalist_tempest_)) + sizeof(warrior_tactics_));
  // @@protoc_insertion_point(copy_constructor:SpecializationFilter)
}

void SpecializationFilter::SharedCtor() {
  ::memset(&elementalist_tempest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warrior_tactics_) -
      reinterpret_cast<char*>(&elementalist_tempest_)) + sizeof(warrior_tactics_));
}

SpecializationFilter::~SpecializationFilter() {
  // @@protoc_insertion_point(destructor:SpecializationFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecializationFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecializationFilter::ArenaDtor(void* object) {
  SpecializationFilter* _this = reinterpret_cast< SpecializationFilter* >(object);
  (void)_this;
}
void SpecializationFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecializationFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpecializationFilter& SpecializationFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpecializationFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void SpecializationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:SpecializationFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&elementalist_tempest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warrior_tactics_) -
      reinterpret_cast<char*>(&elementalist_tempest_)) + sizeof(warrior_tactics_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecializationFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool elementalist_tempest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          elementalist_tempest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_scrapper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          engineer_scrapper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_dragonhunter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          guardian_dragonhunter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_chronomancer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mesmer_chronomancer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_reaper = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          necromancer_reaper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_druid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ranger_druid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_herald = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          revenant_herald_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_daredevil = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          thief_daredevil_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_berserker = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          warrior_berserker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_weaver = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          elementalist_weaver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_holosmith = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          engineer_holosmith_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_firebrand = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          guardian_firebrand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_mirage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          mesmer_mirage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_scourge = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          necromancer_scourge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_soulbeast = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ranger_soulbeast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_renegade = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          revenant_renegade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_deadeye = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          thief_deadeye_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_spellbreaker = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          warrior_spellbreaker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elmentalist_catalyst = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          elmentalist_catalyst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_mechanist = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          engineer_mechanist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_willbender = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          guardian_willbender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_virtuoso = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          mesmer_virtuoso_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_harbinger = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          necromancer_harbinger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_untamed = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ranger_untamed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_vindicator = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          revenant_vindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_specter = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          thief_specter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_bladesworn = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          warrior_bladesworn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_air = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          elementalist_air_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_arcane = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          elementalist_arcane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_earth = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          elementalist_earth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_fire = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          elementalist_fire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_water = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          elementalist_water_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_alchemy = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          engineer_alchemy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_explosives = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          engineer_explosives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_firearms = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          engineer_firearms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_inventions = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          engineer_inventions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_tools = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          engineer_tools_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_honor = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          guardian_honor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_radiance = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          guardian_radiance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_valor = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          guardian_valor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_virtues = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          guardian_virtues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_zeal = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          guardian_zeal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_chaos = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          mesmer_chaos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_domination = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          mesmer_domination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_dueling = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          mesmer_dueling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_illusions = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          mesmer_illusions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_inspiration = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          mesmer_inspiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_blood_magic = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          necromancer_blood_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_curses = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          necromancer_curses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_death_magic = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          necromancer_death_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_soul_reaping = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          necromancer_soul_reaping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_spite = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          necromancer_spite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_beastmastery = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ranger_beastmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_marksmanship = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ranger_marksmanship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_nature_magic = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ranger_nature_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_skirmishing = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ranger_skirmishing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_wilderness_survival = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ranger_wilderness_survival_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_corruption = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          revenant_corruption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_devastation = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          revenant_devastation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_invocation = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          revenant_invocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_retribution = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          revenant_retribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_salvation = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          revenant_salvation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_acrobatics = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          thief_acrobatics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_critical_strikes = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          thief_critical_strikes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_deadly_arts = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          thief_deadly_arts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_shadow_arts = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          thief_shadow_arts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_trickery = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          thief_trickery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_arms = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          warrior_arms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_defense = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          warrior_defense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_discipline = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          warrior_discipline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_strength = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          warrior_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_tactics = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          warrior_tactics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecializationFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpecializationFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool elementalist_tempest = 1;
  if (this->elementalist_tempest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_elementalist_tempest(), target);
  }

  // bool engineer_scrapper = 2;
  if (this->engineer_scrapper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_engineer_scrapper(), target);
  }

  // bool guardian_dragonhunter = 3;
  if (this->guardian_dragonhunter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_guardian_dragonhunter(), target);
  }

  // bool mesmer_chronomancer = 4;
  if (this->mesmer_chronomancer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_mesmer_chronomancer(), target);
  }

  // bool necromancer_reaper = 5;
  if (this->necromancer_reaper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_necromancer_reaper(), target);
  }

  // bool ranger_druid = 6;
  if (this->ranger_druid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ranger_druid(), target);
  }

  // bool revenant_herald = 7;
  if (this->revenant_herald() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_revenant_herald(), target);
  }

  // bool thief_daredevil = 8;
  if (this->thief_daredevil() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_thief_daredevil(), target);
  }

  // bool warrior_berserker = 9;
  if (this->warrior_berserker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_warrior_berserker(), target);
  }

  // bool elementalist_weaver = 10;
  if (this->elementalist_weaver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_elementalist_weaver(), target);
  }

  // bool engineer_holosmith = 11;
  if (this->engineer_holosmith() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_engineer_holosmith(), target);
  }

  // bool guardian_firebrand = 12;
  if (this->guardian_firebrand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_guardian_firebrand(), target);
  }

  // bool mesmer_mirage = 13;
  if (this->mesmer_mirage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_mesmer_mirage(), target);
  }

  // bool necromancer_scourge = 14;
  if (this->necromancer_scourge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_necromancer_scourge(), target);
  }

  // bool ranger_soulbeast = 15;
  if (this->ranger_soulbeast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_ranger_soulbeast(), target);
  }

  // bool revenant_renegade = 16;
  if (this->revenant_renegade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_revenant_renegade(), target);
  }

  // bool thief_deadeye = 17;
  if (this->thief_deadeye() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_thief_deadeye(), target);
  }

  // bool warrior_spellbreaker = 18;
  if (this->warrior_spellbreaker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_warrior_spellbreaker(), target);
  }

  // bool elmentalist_catalyst = 19;
  if (this->elmentalist_catalyst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_elmentalist_catalyst(), target);
  }

  // bool engineer_mechanist = 20;
  if (this->engineer_mechanist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_engineer_mechanist(), target);
  }

  // bool guardian_willbender = 21;
  if (this->guardian_willbender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_guardian_willbender(), target);
  }

  // bool mesmer_virtuoso = 22;
  if (this->mesmer_virtuoso() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_mesmer_virtuoso(), target);
  }

  // bool necromancer_harbinger = 23;
  if (this->necromancer_harbinger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_necromancer_harbinger(), target);
  }

  // bool ranger_untamed = 24;
  if (this->ranger_untamed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_ranger_untamed(), target);
  }

  // bool revenant_vindicator = 25;
  if (this->revenant_vindicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_revenant_vindicator(), target);
  }

  // bool thief_specter = 26;
  if (this->thief_specter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_thief_specter(), target);
  }

  // bool warrior_bladesworn = 27;
  if (this->warrior_bladesworn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_warrior_bladesworn(), target);
  }

  // bool elementalist_air = 28;
  if (this->elementalist_air() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_elementalist_air(), target);
  }

  // bool elementalist_arcane = 29;
  if (this->elementalist_arcane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_elementalist_arcane(), target);
  }

  // bool elementalist_earth = 30;
  if (this->elementalist_earth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_elementalist_earth(), target);
  }

  // bool elementalist_fire = 31;
  if (this->elementalist_fire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_elementalist_fire(), target);
  }

  // bool elementalist_water = 32;
  if (this->elementalist_water() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_elementalist_water(), target);
  }

  // bool engineer_alchemy = 33;
  if (this->engineer_alchemy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_engineer_alchemy(), target);
  }

  // bool engineer_explosives = 34;
  if (this->engineer_explosives() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_engineer_explosives(), target);
  }

  // bool engineer_firearms = 35;
  if (this->engineer_firearms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_engineer_firearms(), target);
  }

  // bool engineer_inventions = 36;
  if (this->engineer_inventions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_engineer_inventions(), target);
  }

  // bool engineer_tools = 37;
  if (this->engineer_tools() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_engineer_tools(), target);
  }

  // bool guardian_honor = 38;
  if (this->guardian_honor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_guardian_honor(), target);
  }

  // bool guardian_radiance = 39;
  if (this->guardian_radiance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_guardian_radiance(), target);
  }

  // bool guardian_valor = 40;
  if (this->guardian_valor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_guardian_valor(), target);
  }

  // bool guardian_virtues = 41;
  if (this->guardian_virtues() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_guardian_virtues(), target);
  }

  // bool guardian_zeal = 42;
  if (this->guardian_zeal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_guardian_zeal(), target);
  }

  // bool mesmer_chaos = 43;
  if (this->mesmer_chaos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_mesmer_chaos(), target);
  }

  // bool mesmer_domination = 44;
  if (this->mesmer_domination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_mesmer_domination(), target);
  }

  // bool mesmer_dueling = 45;
  if (this->mesmer_dueling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_mesmer_dueling(), target);
  }

  // bool mesmer_illusions = 46;
  if (this->mesmer_illusions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_mesmer_illusions(), target);
  }

  // bool mesmer_inspiration = 47;
  if (this->mesmer_inspiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_mesmer_inspiration(), target);
  }

  // bool necromancer_blood_magic = 48;
  if (this->necromancer_blood_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(48, this->_internal_necromancer_blood_magic(), target);
  }

  // bool necromancer_curses = 49;
  if (this->necromancer_curses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(49, this->_internal_necromancer_curses(), target);
  }

  // bool necromancer_death_magic = 50;
  if (this->necromancer_death_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_necromancer_death_magic(), target);
  }

  // bool necromancer_soul_reaping = 51;
  if (this->necromancer_soul_reaping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_necromancer_soul_reaping(), target);
  }

  // bool necromancer_spite = 52;
  if (this->necromancer_spite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(52, this->_internal_necromancer_spite(), target);
  }

  // bool ranger_beastmastery = 53;
  if (this->ranger_beastmastery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(53, this->_internal_ranger_beastmastery(), target);
  }

  // bool ranger_marksmanship = 54;
  if (this->ranger_marksmanship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(54, this->_internal_ranger_marksmanship(), target);
  }

  // bool ranger_nature_magic = 55;
  if (this->ranger_nature_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(55, this->_internal_ranger_nature_magic(), target);
  }

  // bool ranger_skirmishing = 56;
  if (this->ranger_skirmishing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_ranger_skirmishing(), target);
  }

  // bool ranger_wilderness_survival = 57;
  if (this->ranger_wilderness_survival() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_ranger_wilderness_survival(), target);
  }

  // bool revenant_corruption = 58;
  if (this->revenant_corruption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_revenant_corruption(), target);
  }

  // bool revenant_devastation = 59;
  if (this->revenant_devastation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_revenant_devastation(), target);
  }

  // bool revenant_invocation = 60;
  if (this->revenant_invocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_revenant_invocation(), target);
  }

  // bool revenant_retribution = 61;
  if (this->revenant_retribution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_revenant_retribution(), target);
  }

  // bool revenant_salvation = 62;
  if (this->revenant_salvation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(62, this->_internal_revenant_salvation(), target);
  }

  // bool thief_acrobatics = 63;
  if (this->thief_acrobatics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(63, this->_internal_thief_acrobatics(), target);
  }

  // bool thief_critical_strikes = 64;
  if (this->thief_critical_strikes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(64, this->_internal_thief_critical_strikes(), target);
  }

  // bool thief_deadly_arts = 65;
  if (this->thief_deadly_arts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_thief_deadly_arts(), target);
  }

  // bool thief_shadow_arts = 66;
  if (this->thief_shadow_arts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(66, this->_internal_thief_shadow_arts(), target);
  }

  // bool thief_trickery = 67;
  if (this->thief_trickery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(67, this->_internal_thief_trickery(), target);
  }

  // bool warrior_arms = 68;
  if (this->warrior_arms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(68, this->_internal_warrior_arms(), target);
  }

  // bool warrior_defense = 69;
  if (this->warrior_defense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(69, this->_internal_warrior_defense(), target);
  }

  // bool warrior_discipline = 70;
  if (this->warrior_discipline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(70, this->_internal_warrior_discipline(), target);
  }

  // bool warrior_strength = 71;
  if (this->warrior_strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(71, this->_internal_warrior_strength(), target);
  }

  // bool warrior_tactics = 72;
  if (this->warrior_tactics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(72, this->_internal_warrior_tactics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpecializationFilter)
  return target;
}

size_t SpecializationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpecializationFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool elementalist_tempest = 1;
  if (this->elementalist_tempest() != 0) {
    total_size += 1 + 1;
  }

  // bool engineer_scrapper = 2;
  if (this->engineer_scrapper() != 0) {
    total_size += 1 + 1;
  }

  // bool guardian_dragonhunter = 3;
  if (this->guardian_dragonhunter() != 0) {
    total_size += 1 + 1;
  }

  // bool mesmer_chronomancer = 4;
  if (this->mesmer_chronomancer() != 0) {
    total_size += 1 + 1;
  }

  // bool necromancer_reaper = 5;
  if (this->necromancer_reaper() != 0) {
    total_size += 1 + 1;
  }

  // bool ranger_druid = 6;
  if (this->ranger_druid() != 0) {
    total_size += 1 + 1;
  }

  // bool revenant_herald = 7;
  if (this->revenant_herald() != 0) {
    total_size += 1 + 1;
  }

  // bool thief_daredevil = 8;
  if (this->thief_daredevil() != 0) {
    total_size += 1 + 1;
  }

  // bool warrior_berserker = 9;
  if (this->warrior_berserker() != 0) {
    total_size += 1 + 1;
  }

  // bool elementalist_weaver = 10;
  if (this->elementalist_weaver() != 0) {
    total_size += 1 + 1;
  }

  // bool engineer_holosmith = 11;
  if (this->engineer_holosmith() != 0) {
    total_size += 1 + 1;
  }

  // bool guardian_firebrand = 12;
  if (this->guardian_firebrand() != 0) {
    total_size += 1 + 1;
  }

  // bool mesmer_mirage = 13;
  if (this->mesmer_mirage() != 0) {
    total_size += 1 + 1;
  }

  // bool necromancer_scourge = 14;
  if (this->necromancer_scourge() != 0) {
    total_size += 1 + 1;
  }

  // bool ranger_soulbeast = 15;
  if (this->ranger_soulbeast() != 0) {
    total_size += 1 + 1;
  }

  // bool revenant_renegade = 16;
  if (this->revenant_renegade() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_deadeye = 17;
  if (this->thief_deadeye() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_spellbreaker = 18;
  if (this->warrior_spellbreaker() != 0) {
    total_size += 2 + 1;
  }

  // bool elmentalist_catalyst = 19;
  if (this->elmentalist_catalyst() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_mechanist = 20;
  if (this->engineer_mechanist() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_willbender = 21;
  if (this->guardian_willbender() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_virtuoso = 22;
  if (this->mesmer_virtuoso() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_harbinger = 23;
  if (this->necromancer_harbinger() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_untamed = 24;
  if (this->ranger_untamed() != 0) {
    total_size += 2 + 1;
  }

  // bool revenant_vindicator = 25;
  if (this->revenant_vindicator() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_specter = 26;
  if (this->thief_specter() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_bladesworn = 27;
  if (this->warrior_bladesworn() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_air = 28;
  if (this->elementalist_air() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_arcane = 29;
  if (this->elementalist_arcane() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_earth = 30;
  if (this->elementalist_earth() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_fire = 31;
  if (this->elementalist_fire() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_water = 32;
  if (this->elementalist_water() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_alchemy = 33;
  if (this->engineer_alchemy() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_explosives = 34;
  if (this->engineer_explosives() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_firearms = 35;
  if (this->engineer_firearms() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_inventions = 36;
  if (this->engineer_inventions() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_tools = 37;
  if (this->engineer_tools() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_honor = 38;
  if (this->guardian_honor() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_radiance = 39;
  if (this->guardian_radiance() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_valor = 40;
  if (this->guardian_valor() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_virtues = 41;
  if (this->guardian_virtues() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_zeal = 42;
  if (this->guardian_zeal() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_chaos = 43;
  if (this->mesmer_chaos() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_domination = 44;
  if (this->mesmer_domination() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_dueling = 45;
  if (this->mesmer_dueling() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_illusions = 46;
  if (this->mesmer_illusions() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_inspiration = 47;
  if (this->mesmer_inspiration() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_blood_magic = 48;
  if (this->necromancer_blood_magic() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_curses = 49;
  if (this->necromancer_curses() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_death_magic = 50;
  if (this->necromancer_death_magic() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_soul_reaping = 51;
  if (this->necromancer_soul_reaping() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_spite = 52;
  if (this->necromancer_spite() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_beastmastery = 53;
  if (this->ranger_beastmastery() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_marksmanship = 54;
  if (this->ranger_marksmanship() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_nature_magic = 55;
  if (this->ranger_nature_magic() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_skirmishing = 56;
  if (this->ranger_skirmishing() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_wilderness_survival = 57;
  if (this->ranger_wilderness_survival() != 0) {
    total_size += 2 + 1;
  }

  // bool revenant_corruption = 58;
  if (this->revenant_corruption() != 0) {
    total_size += 2 + 1;
  }

  // bool revenant_devastation = 59;
  if (this->revenant_devastation() != 0) {
    total_size += 2 + 1;
  }

  // bool revenant_invocation = 60;
  if (this->revenant_invocation() != 0) {
    total_size += 2 + 1;
  }

  // bool revenant_retribution = 61;
  if (this->revenant_retribution() != 0) {
    total_size += 2 + 1;
  }

  // bool revenant_salvation = 62;
  if (this->revenant_salvation() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_acrobatics = 63;
  if (this->thief_acrobatics() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_critical_strikes = 64;
  if (this->thief_critical_strikes() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_deadly_arts = 65;
  if (this->thief_deadly_arts() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_shadow_arts = 66;
  if (this->thief_shadow_arts() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_trickery = 67;
  if (this->thief_trickery() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_arms = 68;
  if (this->warrior_arms() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_defense = 69;
  if (this->warrior_defense() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_discipline = 70;
  if (this->warrior_discipline() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_strength = 71;
  if (this->warrior_strength() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_tactics = 72;
  if (this->warrior_tactics() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecializationFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpecializationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecializationFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecializationFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpecializationFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpecializationFilter)
    MergeFrom(*source);
  }
}

void SpecializationFilter::MergeFrom(const SpecializationFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpecializationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.elementalist_tempest() != 0) {
    _internal_set_elementalist_tempest(from._internal_elementalist_tempest());
  }
  if (from.engineer_scrapper() != 0) {
    _internal_set_engineer_scrapper(from._internal_engineer_scrapper());
  }
  if (from.guardian_dragonhunter() != 0) {
    _internal_set_guardian_dragonhunter(from._internal_guardian_dragonhunter());
  }
  if (from.mesmer_chronomancer() != 0) {
    _internal_set_mesmer_chronomancer(from._internal_mesmer_chronomancer());
  }
  if (from.necromancer_reaper() != 0) {
    _internal_set_necromancer_reaper(from._internal_necromancer_reaper());
  }
  if (from.ranger_druid() != 0) {
    _internal_set_ranger_druid(from._internal_ranger_druid());
  }
  if (from.revenant_herald() != 0) {
    _internal_set_revenant_herald(from._internal_revenant_herald());
  }
  if (from.thief_daredevil() != 0) {
    _internal_set_thief_daredevil(from._internal_thief_daredevil());
  }
  if (from.warrior_berserker() != 0) {
    _internal_set_warrior_berserker(from._internal_warrior_berserker());
  }
  if (from.elementalist_weaver() != 0) {
    _internal_set_elementalist_weaver(from._internal_elementalist_weaver());
  }
  if (from.engineer_holosmith() != 0) {
    _internal_set_engineer_holosmith(from._internal_engineer_holosmith());
  }
  if (from.guardian_firebrand() != 0) {
    _internal_set_guardian_firebrand(from._internal_guardian_firebrand());
  }
  if (from.mesmer_mirage() != 0) {
    _internal_set_mesmer_mirage(from._internal_mesmer_mirage());
  }
  if (from.necromancer_scourge() != 0) {
    _internal_set_necromancer_scourge(from._internal_necromancer_scourge());
  }
  if (from.ranger_soulbeast() != 0) {
    _internal_set_ranger_soulbeast(from._internal_ranger_soulbeast());
  }
  if (from.revenant_renegade() != 0) {
    _internal_set_revenant_renegade(from._internal_revenant_renegade());
  }
  if (from.thief_deadeye() != 0) {
    _internal_set_thief_deadeye(from._internal_thief_deadeye());
  }
  if (from.warrior_spellbreaker() != 0) {
    _internal_set_warrior_spellbreaker(from._internal_warrior_spellbreaker());
  }
  if (from.elmentalist_catalyst() != 0) {
    _internal_set_elmentalist_catalyst(from._internal_elmentalist_catalyst());
  }
  if (from.engineer_mechanist() != 0) {
    _internal_set_engineer_mechanist(from._internal_engineer_mechanist());
  }
  if (from.guardian_willbender() != 0) {
    _internal_set_guardian_willbender(from._internal_guardian_willbender());
  }
  if (from.mesmer_virtuoso() != 0) {
    _internal_set_mesmer_virtuoso(from._internal_mesmer_virtuoso());
  }
  if (from.necromancer_harbinger() != 0) {
    _internal_set_necromancer_harbinger(from._internal_necromancer_harbinger());
  }
  if (from.ranger_untamed() != 0) {
    _internal_set_ranger_untamed(from._internal_ranger_untamed());
  }
  if (from.revenant_vindicator() != 0) {
    _internal_set_revenant_vindicator(from._internal_revenant_vindicator());
  }
  if (from.thief_specter() != 0) {
    _internal_set_thief_specter(from._internal_thief_specter());
  }
  if (from.warrior_bladesworn() != 0) {
    _internal_set_warrior_bladesworn(from._internal_warrior_bladesworn());
  }
  if (from.elementalist_air() != 0) {
    _internal_set_elementalist_air(from._internal_elementalist_air());
  }
  if (from.elementalist_arcane() != 0) {
    _internal_set_elementalist_arcane(from._internal_elementalist_arcane());
  }
  if (from.elementalist_earth() != 0) {
    _internal_set_elementalist_earth(from._internal_elementalist_earth());
  }
  if (from.elementalist_fire() != 0) {
    _internal_set_elementalist_fire(from._internal_elementalist_fire());
  }
  if (from.elementalist_water() != 0) {
    _internal_set_elementalist_water(from._internal_elementalist_water());
  }
  if (from.engineer_alchemy() != 0) {
    _internal_set_engineer_alchemy(from._internal_engineer_alchemy());
  }
  if (from.engineer_explosives() != 0) {
    _internal_set_engineer_explosives(from._internal_engineer_explosives());
  }
  if (from.engineer_firearms() != 0) {
    _internal_set_engineer_firearms(from._internal_engineer_firearms());
  }
  if (from.engineer_inventions() != 0) {
    _internal_set_engineer_inventions(from._internal_engineer_inventions());
  }
  if (from.engineer_tools() != 0) {
    _internal_set_engineer_tools(from._internal_engineer_tools());
  }
  if (from.guardian_honor() != 0) {
    _internal_set_guardian_honor(from._internal_guardian_honor());
  }
  if (from.guardian_radiance() != 0) {
    _internal_set_guardian_radiance(from._internal_guardian_radiance());
  }
  if (from.guardian_valor() != 0) {
    _internal_set_guardian_valor(from._internal_guardian_valor());
  }
  if (from.guardian_virtues() != 0) {
    _internal_set_guardian_virtues(from._internal_guardian_virtues());
  }
  if (from.guardian_zeal() != 0) {
    _internal_set_guardian_zeal(from._internal_guardian_zeal());
  }
  if (from.mesmer_chaos() != 0) {
    _internal_set_mesmer_chaos(from._internal_mesmer_chaos());
  }
  if (from.mesmer_domination() != 0) {
    _internal_set_mesmer_domination(from._internal_mesmer_domination());
  }
  if (from.mesmer_dueling() != 0) {
    _internal_set_mesmer_dueling(from._internal_mesmer_dueling());
  }
  if (from.mesmer_illusions() != 0) {
    _internal_set_mesmer_illusions(from._internal_mesmer_illusions());
  }
  if (from.mesmer_inspiration() != 0) {
    _internal_set_mesmer_inspiration(from._internal_mesmer_inspiration());
  }
  if (from.necromancer_blood_magic() != 0) {
    _internal_set_necromancer_blood_magic(from._internal_necromancer_blood_magic());
  }
  if (from.necromancer_curses() != 0) {
    _internal_set_necromancer_curses(from._internal_necromancer_curses());
  }
  if (from.necromancer_death_magic() != 0) {
    _internal_set_necromancer_death_magic(from._internal_necromancer_death_magic());
  }
  if (from.necromancer_soul_reaping() != 0) {
    _internal_set_necromancer_soul_reaping(from._internal_necromancer_soul_reaping());
  }
  if (from.necromancer_spite() != 0) {
    _internal_set_necromancer_spite(from._internal_necromancer_spite());
  }
  if (from.ranger_beastmastery() != 0) {
    _internal_set_ranger_beastmastery(from._internal_ranger_beastmastery());
  }
  if (from.ranger_marksmanship() != 0) {
    _internal_set_ranger_marksmanship(from._internal_ranger_marksmanship());
  }
  if (from.ranger_nature_magic() != 0) {
    _internal_set_ranger_nature_magic(from._internal_ranger_nature_magic());
  }
  if (from.ranger_skirmishing() != 0) {
    _internal_set_ranger_skirmishing(from._internal_ranger_skirmishing());
  }
  if (from.ranger_wilderness_survival() != 0) {
    _internal_set_ranger_wilderness_survival(from._internal_ranger_wilderness_survival());
  }
  if (from.revenant_corruption() != 0) {
    _internal_set_revenant_corruption(from._internal_revenant_corruption());
  }
  if (from.revenant_devastation() != 0) {
    _internal_set_revenant_devastation(from._internal_revenant_devastation());
  }
  if (from.revenant_invocation() != 0) {
    _internal_set_revenant_invocation(from._internal_revenant_invocation());
  }
  if (from.revenant_retribution() != 0) {
    _internal_set_revenant_retribution(from._internal_revenant_retribution());
  }
  if (from.revenant_salvation() != 0) {
    _internal_set_revenant_salvation(from._internal_revenant_salvation());
  }
  if (from.thief_acrobatics() != 0) {
    _internal_set_thief_acrobatics(from._internal_thief_acrobatics());
  }
  if (from.thief_critical_strikes() != 0) {
    _internal_set_thief_critical_strikes(from._internal_thief_critical_strikes());
  }
  if (from.thief_deadly_arts() != 0) {
    _internal_set_thief_deadly_arts(from._internal_thief_deadly_arts());
  }
  if (from.thief_shadow_arts() != 0) {
    _internal_set_thief_shadow_arts(from._internal_thief_shadow_arts());
  }
  if (from.thief_trickery() != 0) {
    _internal_set_thief_trickery(from._internal_thief_trickery());
  }
  if (from.warrior_arms() != 0) {
    _internal_set_warrior_arms(from._internal_warrior_arms());
  }
  if (from.warrior_defense() != 0) {
    _internal_set_warrior_defense(from._internal_warrior_defense());
  }
  if (from.warrior_discipline() != 0) {
    _internal_set_warrior_discipline(from._internal_warrior_discipline());
  }
  if (from.warrior_strength() != 0) {
    _internal_set_warrior_strength(from._internal_warrior_strength());
  }
  if (from.warrior_tactics() != 0) {
    _internal_set_warrior_tactics(from._internal_warrior_tactics());
  }
}

void SpecializationFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpecializationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecializationFilter::CopyFrom(const SpecializationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpecializationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecializationFilter::IsInitialized() const {
  return true;
}

void SpecializationFilter::InternalSwap(SpecializationFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecializationFilter, warrior_tactics_)
      + sizeof(SpecializationFilter::warrior_tactics_)
      - PROTOBUF_FIELD_OFFSET(SpecializationFilter, elementalist_tempest_)>(
          reinterpret_cast<char*>(&elementalist_tempest_),
          reinterpret_cast<char*>(&other->elementalist_tempest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecializationFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeciesFilter::InitAsDefaultInstance() {
}
class SpeciesFilter::_Internal {
 public:
};

SpeciesFilter::SpeciesFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpeciesFilter)
}
SpeciesFilter::SpeciesFilter(const SpeciesFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asura_, &from.asura_,
    static_cast<size_t>(reinterpret_cast<char*>(&sylvari_) -
    reinterpret_cast<char*>(&asura_)) + sizeof(sylvari_));
  // @@protoc_insertion_point(copy_constructor:SpeciesFilter)
}

void SpeciesFilter::SharedCtor() {
  ::memset(&asura_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sylvari_) -
      reinterpret_cast<char*>(&asura_)) + sizeof(sylvari_));
}

SpeciesFilter::~SpeciesFilter() {
  // @@protoc_insertion_point(destructor:SpeciesFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeciesFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeciesFilter::ArenaDtor(void* object) {
  SpeciesFilter* _this = reinterpret_cast< SpeciesFilter* >(object);
  (void)_this;
}
void SpeciesFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeciesFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeciesFilter& SpeciesFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeciesFilter_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void SpeciesFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:SpeciesFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asura_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sylvari_) -
      reinterpret_cast<char*>(&asura_)) + sizeof(sylvari_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeciesFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool asura = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asura_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool charr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          charr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool human = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          human_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool norn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          norn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sylvari = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sylvari_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeciesFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpeciesFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool asura = 1;
  if (this->asura() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_asura(), target);
  }

  // bool charr = 2;
  if (this->charr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_charr(), target);
  }

  // bool human = 3;
  if (this->human() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_human(), target);
  }

  // bool norn = 4;
  if (this->norn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_norn(), target);
  }

  // bool sylvari = 5;
  if (this->sylvari() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sylvari(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpeciesFilter)
  return target;
}

size_t SpeciesFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpeciesFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool asura = 1;
  if (this->asura() != 0) {
    total_size += 1 + 1;
  }

  // bool charr = 2;
  if (this->charr() != 0) {
    total_size += 1 + 1;
  }

  // bool human = 3;
  if (this->human() != 0) {
    total_size += 1 + 1;
  }

  // bool norn = 4;
  if (this->norn() != 0) {
    total_size += 1 + 1;
  }

  // bool sylvari = 5;
  if (this->sylvari() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeciesFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpeciesFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeciesFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeciesFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpeciesFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpeciesFilter)
    MergeFrom(*source);
  }
}

void SpeciesFilter::MergeFrom(const SpeciesFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpeciesFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asura() != 0) {
    _internal_set_asura(from._internal_asura());
  }
  if (from.charr() != 0) {
    _internal_set_charr(from._internal_charr());
  }
  if (from.human() != 0) {
    _internal_set_human(from._internal_human());
  }
  if (from.norn() != 0) {
    _internal_set_norn(from._internal_norn());
  }
  if (from.sylvari() != 0) {
    _internal_set_sylvari(from._internal_sylvari());
  }
}

void SpeciesFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpeciesFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeciesFilter::CopyFrom(const SpeciesFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpeciesFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeciesFilter::IsInitialized() const {
  return true;
}

void SpeciesFilter::InternalSwap(SpeciesFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeciesFilter, sylvari_)
      + sizeof(SpeciesFilter::sylvari_)
      - PROTOBUF_FIELD_OFFSET(SpeciesFilter, asura_)>(
          reinterpret_cast<char*>(&asura_),
          reinterpret_cast<char*>(&other->asura_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeciesFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrailData::InitAsDefaultInstance() {
}
class TrailData::_Internal {
 public:
};

TrailData::TrailData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TrailData)
}
TrailData::TrailData(const TrailData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trail_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trail_data().empty()) {
    trail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trail_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TrailData)
}

void TrailData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrailData_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  trail_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrailData::~TrailData() {
  // @@protoc_insertion_point(destructor:TrailData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrailData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trail_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrailData::ArenaDtor(void* object) {
  TrailData* _this = reinterpret_cast< TrailData* >(object);
  (void)_this;
}
void TrailData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrailData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrailData& TrailData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrailData_generators_2fproto_5ftemplates_2fnode_2eproto.base);
  return *internal_default_instance();
}


void TrailData::Clear() {
// @@protoc_insertion_point(message_clear_start:TrailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trail_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrailData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string trail_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trail_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TrailData.trail_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrailData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trail_data = 1;
  if (this->trail_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trail_data().data(), static_cast<int>(this->_internal_trail_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TrailData.trail_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trail_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrailData)
  return target;
}

size_t TrailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrailData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trail_data = 1;
  if (this->trail_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trail_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrailData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrailData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrailData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrailData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrailData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrailData)
    MergeFrom(*source);
  }
}

void TrailData::MergeFrom(const TrailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrailData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trail_data().size() > 0) {
    _internal_set_trail_data(from._internal_trail_data());
  }
}

void TrailData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrailData::CopyFrom(const TrailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrailData::IsInitialized() const {
  return true;
}

void TrailData::InternalSwap(TrailData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trail_data_.Swap(&other->trail_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrailData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Category_ChildrenEntry_DoNotUse* Arena::CreateMaybeMessage< ::Category_ChildrenEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Category_ChildrenEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Category* Arena::CreateMaybeMessage< ::Category >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Category >(arena);
}
template<> PROTOBUF_NOINLINE ::Icon* Arena::CreateMaybeMessage< ::Icon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Icon >(arena);
}
template<> PROTOBUF_NOINLINE ::Trail* Arena::CreateMaybeMessage< ::Trail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Trail >(arena);
}
template<> PROTOBUF_NOINLINE ::Texture* Arena::CreateMaybeMessage< ::Texture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Texture >(arena);
}
template<> PROTOBUF_NOINLINE ::Position* Arena::CreateMaybeMessage< ::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::EulerRotation* Arena::CreateMaybeMessage< ::EulerRotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EulerRotation >(arena);
}
template<> PROTOBUF_NOINLINE ::Trigger* Arena::CreateMaybeMessage< ::Trigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::GUID* Arena::CreateMaybeMessage< ::GUID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GUID >(arena);
}
template<> PROTOBUF_NOINLINE ::Color* Arena::CreateMaybeMessage< ::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::FestivalFilter* Arena::CreateMaybeMessage< ::FestivalFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FestivalFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::MapTypeFilter* Arena::CreateMaybeMessage< ::MapTypeFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MapTypeFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::MountFilter* Arena::CreateMaybeMessage< ::MountFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MountFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfessionFilter* Arena::CreateMaybeMessage< ::ProfessionFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfessionFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::SpecializationFilter* Arena::CreateMaybeMessage< ::SpecializationFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpecializationFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::SpeciesFilter* Arena::CreateMaybeMessage< ::SpeciesFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpeciesFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::TrailData* Arena::CreateMaybeMessage< ::TrailData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrailData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
