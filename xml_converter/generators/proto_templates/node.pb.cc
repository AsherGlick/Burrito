// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace Proto_Node {
class Category_ChildrenEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category_ChildrenEntry_DoNotUse> _instance;
} _Category_ChildrenEntry_DoNotUse_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category> _instance;
} _Category_default_instance_;
class Icon_textureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Icon_texture> _instance;
} _Icon_texture_default_instance_;
class Icon_positionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Icon_position> _instance;
} _Icon_position_default_instance_;
class Icon_euler_rotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Icon_euler_rotation> _instance;
} _Icon_euler_rotation_default_instance_;
class Icon_trigger_guidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Icon_trigger_guid> _instance;
} _Icon_trigger_guid_default_instance_;
class Icon_triggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Icon_trigger> _instance;
} _Icon_trigger_default_instance_;
class IconDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Icon> _instance;
} _Icon_default_instance_;
class Trail_colorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_color> _instance;
} _Trail_color_default_instance_;
class Trail_festival_filterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_festival_filter> _instance;
} _Trail_festival_filter_default_instance_;
class Trail_guidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_guid> _instance;
} _Trail_guid_default_instance_;
class Trail_map_type_filterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_map_type_filter> _instance;
} _Trail_map_type_filter_default_instance_;
class Trail_mount_filterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_mount_filter> _instance;
} _Trail_mount_filter_default_instance_;
class Trail_profession_filterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_profession_filter> _instance;
} _Trail_profession_filter_default_instance_;
class Trail_specialization_filterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_specialization_filter> _instance;
} _Trail_specialization_filter_default_instance_;
class Trail_species_filterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_species_filter> _instance;
} _Trail_species_filter_default_instance_;
class Trail_textureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_texture> _instance;
} _Trail_texture_default_instance_;
class Trail_trail_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail_trail_data> _instance;
} _Trail_trail_data_default_instance_;
class TrailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trail> _instance;
} _Trail_default_instance_;
}  // namespace Proto_Node
static void InitDefaultsscc_info_Category_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Category_ChildrenEntry_DoNotUse_default_instance_;
    new (ptr) ::Proto_Node::Category_ChildrenEntry_DoNotUse();
  }
  {
    void* ptr = &::Proto_Node::_Category_default_instance_;
    new (ptr) ::Proto_Node::Category();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Category_ChildrenEntry_DoNotUse::InitAsDefaultInstance();
  ::Proto_Node::Category::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Category_node_2eproto}, {}};

static void InitDefaultsscc_info_Icon_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Icon_default_instance_;
    new (ptr) ::Proto_Node::Icon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Icon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Icon_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Icon_node_2eproto}, {}};

static void InitDefaultsscc_info_Icon_euler_rotation_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Icon_euler_rotation_default_instance_;
    new (ptr) ::Proto_Node::Icon_euler_rotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Icon_euler_rotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Icon_euler_rotation_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Icon_euler_rotation_node_2eproto}, {}};

static void InitDefaultsscc_info_Icon_position_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Icon_position_default_instance_;
    new (ptr) ::Proto_Node::Icon_position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Icon_position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Icon_position_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Icon_position_node_2eproto}, {}};

static void InitDefaultsscc_info_Icon_texture_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Icon_texture_default_instance_;
    new (ptr) ::Proto_Node::Icon_texture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Icon_texture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Icon_texture_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Icon_texture_node_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Icon_trigger_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Icon_trigger_default_instance_;
    new (ptr) ::Proto_Node::Icon_trigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Icon_trigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Icon_trigger_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Icon_trigger_node_2eproto}, {
      &scc_info_Category_node_2eproto.base,}};

static void InitDefaultsscc_info_Icon_trigger_guid_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Icon_trigger_guid_default_instance_;
    new (ptr) ::Proto_Node::Icon_trigger_guid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Icon_trigger_guid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Icon_trigger_guid_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Icon_trigger_guid_node_2eproto}, {}};

static void InitDefaultsscc_info_Trail_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_default_instance_;
    new (ptr) ::Proto_Node::Trail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trail_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trail_node_2eproto}, {
      &scc_info_Category_node_2eproto.base,}};

static void InitDefaultsscc_info_Trail_color_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_color_default_instance_;
    new (ptr) ::Proto_Node::Trail_color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trail_color_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trail_color_node_2eproto}, {}};

static void InitDefaultsscc_info_Trail_festival_filter_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_festival_filter_default_instance_;
    new (ptr) ::Proto_Node::Trail_festival_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_festival_filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trail_festival_filter_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trail_festival_filter_node_2eproto}, {}};

static void InitDefaultsscc_info_Trail_guid_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_guid_default_instance_;
    new (ptr) ::Proto_Node::Trail_guid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_guid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trail_guid_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trail_guid_node_2eproto}, {}};

static void InitDefaultsscc_info_Trail_map_type_filter_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_map_type_filter_default_instance_;
    new (ptr) ::Proto_Node::Trail_map_type_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_map_type_filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trail_map_type_filter_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trail_map_type_filter_node_2eproto}, {}};

static void InitDefaultsscc_info_Trail_mount_filter_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_mount_filter_default_instance_;
    new (ptr) ::Proto_Node::Trail_mount_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_mount_filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trail_mount_filter_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trail_mount_filter_node_2eproto}, {}};

static void InitDefaultsscc_info_Trail_profession_filter_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_profession_filter_default_instance_;
    new (ptr) ::Proto_Node::Trail_profession_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_profession_filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trail_profession_filter_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trail_profession_filter_node_2eproto}, {}};

static void InitDefaultsscc_info_Trail_specialization_filter_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_specialization_filter_default_instance_;
    new (ptr) ::Proto_Node::Trail_specialization_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_specialization_filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trail_specialization_filter_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trail_specialization_filter_node_2eproto}, {}};

static void InitDefaultsscc_info_Trail_species_filter_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_species_filter_default_instance_;
    new (ptr) ::Proto_Node::Trail_species_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_species_filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trail_species_filter_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trail_species_filter_node_2eproto}, {}};

static void InitDefaultsscc_info_Trail_texture_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_texture_default_instance_;
    new (ptr) ::Proto_Node::Trail_texture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_texture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trail_texture_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trail_texture_node_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Trail_trail_data_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto_Node::_Trail_trail_data_default_instance_;
    new (ptr) ::Proto_Node::Trail_trail_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto_Node::Trail_trail_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trail_trail_data_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trail_trail_data_node_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category_ChildrenEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category_ChildrenEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category_ChildrenEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category_ChildrenEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category, default_visibility_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category, display_name_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category, is_separator_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category, name_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category, tooltip_name_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Category, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_texture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_texture, path_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_texture, original_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_position, x_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_position, y_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_position, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_euler_rotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_euler_rotation, x_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_euler_rotation, y_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_euler_rotation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger_guid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger_guid, guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, auto_trigger_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, bounce_delay_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, bounce_duration_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, bounce_height_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, action_copy_clipboard_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, action_copy_message_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, has_countdown_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, action_info_message_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, invert_display_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, reset_length_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, range_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, action_hide_category_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, action_show_category_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon_trigger, action_toggle_category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, achievement_bit_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, achievement_id_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, alpha_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, can_fade_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, distance_fade_end_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, distance_fade_start_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, height_offset_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, __tentative__scale_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, map_display_size_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, map_id_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, maximum_size_on_screen_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, minimum_size_on_screen_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, __tentative__render_ingame_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, __tentative__render_on_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, __tentative__render_on_minimap_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, scale_on_map_with_zoom_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, bhdraft__schedule_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, bhdraft__schedule_duration_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, tip_description_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Icon, tip_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_color, hex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_festival_filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_festival_filter, dragonbash_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_festival_filter, festival_of_the_four_winds_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_festival_filter, halloween_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_festival_filter, lunar_new_year_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_festival_filter, super_adventure_festival_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_festival_filter, wintersday_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_festival_filter, none_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_guid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_guid, guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, unknown_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, redirect_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, character_create_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, pvp_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, gvg_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, instance_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, public_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, tournament_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, tutorial_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, user_tournament_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, center_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, eternal_battlegrounds_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, bluehome_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, blue_borderlands_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, green_home_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, green_borderlands_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, red_home_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, red_borderlands_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, fortunes_vale_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, jump_puzzle_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, obsidian_sanctum_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, edge_of_the_mists_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, public_mini_map_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_map_type_filter, wvw_lounge_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, raptor_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, springer_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, skimmer_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, jackal_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, griffon_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, roller_beetle_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, warclaw_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, skyscalee_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, skiff_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_mount_filter, seige_turtle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, guardian_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, warrior_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, engineer_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, ranger_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, thief_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, elementalist_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, mesmer_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, necromancer_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_profession_filter, revenantnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, elementalist_tempest_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, engineer_scrapper_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, guardian_dragonhunter_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, mesmer_chronomancer_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, necromancer_reaper_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, ranger_druid_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, revenant_herald_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, thief_daredevil_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, warrior_berserker_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, elementalist_weaver_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, engineer_holosmith_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, guardian_firebrand_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, mesmer_mirage_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, necromancer_scourge_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, ranger_soulbeast_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, revenant_renegade_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, thief_deadeye_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, warrior_spellbreaker_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, elmentalist_catalyst_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, engineer_mechanist_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, guardian_willbender_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, mesmer_virtuoso_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, necromancer_harbinger_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, ranger_untamed_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, revenant_vindicator_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, thief_specter_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, warrior_bladesworn_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, elementalist_air_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, elementalist_arcane_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, elementalist_earth_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, elementalist_fire_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, elementalist_water_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, engineer_alchemy_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, engineer_explosives_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, engineer_firearms_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, engineer_inventions_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, engineer_tools_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, guardian_honor_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, guardian_radiance_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, guardian_valor_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, guardian_virtues_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, guardian_zeal_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, mesmer_chaos_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, mesmer_domination_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, mesmer_dueling_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, mesmer_illusions_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, mesmer_inspiration_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, necromancer_blood_magic_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, necromancer_curses_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, necromancer_death_magic_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, necromancer_soul_reaping_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, necromancer_spite_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, ranger_beastmastery_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, ranger_marksmanship_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, ranger_nature_magic_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, ranger_skirmishing_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, ranger_wilderness_survival_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, revenant_corruption_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, revenant_devastation_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, revenant_invocation_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, revenant_retribution_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, revenant_salvation_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, thief_acrobatics_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, thief_critical_strikes_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, thief_deadly_arts_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, thief_shadow_arts_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, thief_trickery_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, warrior_arms_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, warrior_defense_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, warrior_discipline_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, warrior_strength_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_specialization_filter, warrior_tactics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_species_filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_species_filter, asura_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_species_filter, charr_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_species_filter, human_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_species_filter, norn_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_species_filter, sylvari_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_texture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_texture, path_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_texture, original_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_trail_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail_trail_data, trail_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, achievement_bit_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, achievement_id_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, alpha_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, animation_speed_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, can_fade_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, distance_fade_end_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, distance_fade_start_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, is_wall_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, bhdraft__schedule_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, bhdraft__schedule_duration_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, scale_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, category_),
  PROTOBUF_FIELD_OFFSET(::Proto_Node::Trail, map_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Proto_Node::Category_ChildrenEntry_DoNotUse)},
  { 9, -1, sizeof(::Proto_Node::Category)},
  { 20, -1, sizeof(::Proto_Node::Icon_texture)},
  { 27, -1, sizeof(::Proto_Node::Icon_position)},
  { 35, -1, sizeof(::Proto_Node::Icon_euler_rotation)},
  { 43, -1, sizeof(::Proto_Node::Icon_trigger_guid)},
  { 49, -1, sizeof(::Proto_Node::Icon_trigger)},
  { 68, -1, sizeof(::Proto_Node::Icon)},
  { 93, -1, sizeof(::Proto_Node::Trail_color)},
  { 99, -1, sizeof(::Proto_Node::Trail_festival_filter)},
  { 111, -1, sizeof(::Proto_Node::Trail_guid)},
  { 117, -1, sizeof(::Proto_Node::Trail_map_type_filter)},
  { 146, -1, sizeof(::Proto_Node::Trail_mount_filter)},
  { 161, -1, sizeof(::Proto_Node::Trail_profession_filter)},
  { 175, -1, sizeof(::Proto_Node::Trail_specialization_filter)},
  { 252, -1, sizeof(::Proto_Node::Trail_species_filter)},
  { 262, -1, sizeof(::Proto_Node::Trail_texture)},
  { 269, -1, sizeof(::Proto_Node::Trail_trail_data)},
  { 275, -1, sizeof(::Proto_Node::Trail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Category_ChildrenEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Category_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Icon_texture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Icon_position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Icon_euler_rotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Icon_trigger_guid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Icon_trigger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Icon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_festival_filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_guid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_map_type_filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_mount_filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_profession_filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_specialization_filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_species_filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_texture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_trail_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto_Node::_Trail_default_instance_),
};

const char descriptor_table_protodef_node_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nnode.proto\022\nProto_Node\032\031google/protobu"
  "f/any.proto\"\363\001\n\010Category\022\032\n\022default_visi"
  "bility\030\001 \001(\010\022\024\n\014display_name\030\002 \001(\t\022\024\n\014is"
  "_separator\030\003 \001(\010\022\014\n\004name\030\004 \001(\t\022\024\n\014toolti"
  "p_name\030\005 \001(\t\0224\n\010children\030\006 \003(\0132\".Proto_N"
  "ode.Category.ChildrenEntry\032E\n\rChildrenEn"
  "try\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.Proto_"
  "Node.Category:\0028\001\"\312\n\n\004Icon\022\027\n\017achievemen"
  "t_bit\030\001 \001(\007\022\026\n\016achievement_id\030\002 \001(\005\022\r\n\005a"
  "lpha\030\003 \001(\002\022\020\n\010can_fade\030\004 \001(\010\022\031\n\021distance"
  "_fade_end\030\005 \001(\002\022\033\n\023distance_fade_start\030\006"
  " \001(\002\022\025\n\rheight_offset\030\007 \001(\002\022\032\n\022__tentati"
  "ve__scale\030\010 \001(\002\022\030\n\020map_display_size\030\t \001("
  "\005\022\016\n\006map_id\030\n \001(\005\022\036\n\026maximum_size_on_scr"
  "een\030\013 \001(\005\022\036\n\026minimum_size_on_screen\030\014 \001("
  "\005\022\"\n\032__tentative__render_ingame\030\r \001(\010\022\"\n"
  "\032__tentative__render_on_map\030\016 \001(\010\022&\n\036__t"
  "entative__render_on_minimap\030\017 \001(\010\022\036\n\026sca"
  "le_on_map_with_zoom\030\020 \001(\010\022\031\n\021bhdraft__sc"
  "hedule\030\021 \001(\t\022\"\n\032bhdraft__schedule_durati"
  "on\030\022 \001(\002\022\027\n\017tip_description\030\023 \001(\t\022\020\n\010tip"
  "_name\030\024 \001(\t\032E\n\007texture\022\014\n\004path\030\001 \001(\t\022,\n\016"
  "original_token\030\002 \001(\0132\024.google.protobuf.A"
  "ny\032+\n\010position\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001"
  "z\030\003 \001(\002\0321\n\016euler_rotation\022\t\n\001x\030\001 \001(\002\022\t\n\001"
  "y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\032\371\004\n\007trigger\022\024\n\014auto_t"
  "rigger\030\001 \001(\010\022\024\n\014bounce_delay\030\002 \001(\002\022\027\n\017bo"
  "unce_duration\030\003 \001(\002\022\025\n\rbounce_height\030\004 \001"
  "(\002\022\035\n\025action_copy_clipboard\030\005 \001(\t\022\033\n\023act"
  "ion_copy_message\030\006 \001(\t\022\025\n\rhas_countdown\030"
  "\007 \001(\010\022\033\n\023action_info_message\030\010 \001(\t\022\026\n\016in"
  "vert_display\030\t \001(\010\022\024\n\014reset_length\030\n \001(\002"
  "\022\r\n\005range\030\013 \001(\002\0222\n\024action_hide_category\030"
  "\014 \001(\0132\024.Proto_Node.Category\0222\n\024action_sh"
  "ow_category\030\r \001(\0132\024.Proto_Node.Category\022"
  "4\n\026action_toggle_category\030\016 \001(\0132\024.Proto_"
  "Node.Category\032\024\n\004guid\022\014\n\004guid\030\001 \001(\005\"\260\001\n\016"
  "reset_behavior\022\022\n\016always_visible\020\000\022\016\n\nma"
  "p_change\020\001\022\017\n\013daily_reset\020\002\022\t\n\005never\020\003\022\t"
  "\n\005timer\020\004\022\r\n\tmap_reset\020\005\022\023\n\017instance_cha"
  "nge\020\006\022\035\n\031daily_reset_per_character\020\007\022\020\n\014"
  "weekly_reset\020\010\"\350\035\n\005Trail\022\027\n\017achievement_"
  "bit\030\001 \001(\007\022\026\n\016achievement_id\030\002 \001(\005\022\r\n\005alp"
  "ha\030\003 \001(\002\022\027\n\017animation_speed\030\004 \001(\002\022\020\n\010can"
  "_fade\030\005 \001(\010\022\031\n\021distance_fade_end\030\006 \001(\002\022\033"
  "\n\023distance_fade_start\030\007 \001(\002\022\017\n\007is_wall\030\010"
  " \001(\010\022\031\n\021bhdraft__schedule\030\t \001(\t\022\"\n\032bhdra"
  "ft__schedule_duration\030\n \001(\002\022\r\n\005scale\030\013 \001"
  "(\002\022&\n\010category\030\014 \001(\0132\024.Proto_Node.Catego"
  "ry\022\016\n\006map_id\030\r \001(\005\032\024\n\005color\022\013\n\003hex\030\001 \001(\t"
  "\032\270\001\n\017festival_filter\022\022\n\ndragonbash\030\001 \001(\010"
  "\022\"\n\032festival_of_the_four_winds\030\002 \001(\010\022\021\n\t"
  "halloween\030\003 \001(\010\022\026\n\016lunar_new_year\030\004 \001(\010\022"
  " \n\030super_adventure_festival\030\005 \001(\010\022\022\n\nwin"
  "tersday\030\006 \001(\010\022\014\n\004none\030\007 \001(\010\032\024\n\004guid\022\014\n\004g"
  "uid\030\001 \001(\005\032\350\004\n\017map_type_filter\022\023\n\013unknown"
  "_map\030\001 \001(\010\022\024\n\014redirect_map\030\002 \001(\010\022\034\n\024char"
  "acter_create_map\030\003 \001(\010\022\017\n\007pvp_map\030\004 \001(\010\022"
  "\017\n\007gvg_map\030\005 \001(\010\022\024\n\014instance_map\030\006 \001(\010\022\022"
  "\n\npublic_map\030\007 \001(\010\022\026\n\016tournament_map\030\010 \001"
  "(\010\022\024\n\014tutorial_map\030\t \001(\010\022\033\n\023user_tournam"
  "ent_map\030\n \001(\010\022\022\n\ncenter_map\030\013 \001(\010\022!\n\031ete"
  "rnal_battlegrounds_map\030\014 \001(\010\022\024\n\014bluehome"
  "_map\030\r \001(\010\022\034\n\024blue_borderlands_map\030\016 \001(\010"
  "\022\026\n\016green_home_map\030\017 \001(\010\022\035\n\025green_border"
  "lands_map\030\020 \001(\010\022\024\n\014red_home_map\030\021 \001(\010\022\033\n"
  "\023red_borderlands_map\030\022 \001(\010\022\031\n\021fortunes_v"
  "ale_map\030\023 \001(\010\022\027\n\017jump_puzzle_map\030\024 \001(\010\022\034"
  "\n\024obsidian_sanctum_map\030\025 \001(\010\022\035\n\025edge_of_"
  "the_mists_map\030\026 \001(\010\022\027\n\017public_mini_map\030\027"
  " \001(\010\022\026\n\016wvw_lounge_map\030\030 \001(\010\032\302\001\n\014mount_f"
  "ilter\022\016\n\006raptor\030\001 \001(\010\022\020\n\010springer\030\002 \001(\010\022"
  "\017\n\007skimmer\030\003 \001(\010\022\016\n\006jackal\030\004 \001(\010\022\017\n\007grif"
  "fon\030\005 \001(\010\022\025\n\rroller_beetle\030\006 \001(\010\022\017\n\007warc"
  "law\030\007 \001(\010\022\021\n\tskyscalee\030\010 \001(\010\022\r\n\005skiff\030\t "
  "\001(\010\022\024\n\014seige_turtle\030\n \001(\010\032\266\001\n\021profession"
  "_filter\022\020\n\010guardian\030\001 \001(\010\022\017\n\007warrior\030\002 \001"
  "(\010\022\020\n\010engineer\030\003 \001(\010\022\016\n\006ranger\030\004 \001(\010\022\r\n\005"
  "thief\030\005 \001(\010\022\024\n\014elementalist\030\006 \001(\010\022\016\n\006mes"
  "mer\030\007 \001(\010\022\023\n\013necromancer\030\010 \001(\010\022\022\n\nrevena"
  "ntnt\030\t \001(\010\032\313\017\n\025specialization_filter\022\034\n\024"
  "elementalist_tempest\0300 \001(\010\022\031\n\021engineer_s"
  "crapper\030+ \001(\010\022\035\n\025guardian_dragonhunter\030\033"
  " \001(\010\022\033\n\023mesmer_chronomancer\030( \001(\010\022\032\n\022nec"
  "romancer_reaper\030\" \001(\010\022\024\n\014ranger_druid\030\005 "
  "\001(\010\022\027\n\017revenant_herald\0304 \001(\010\022\027\n\017thief_da"
  "redevil\030\007 \001(\010\022\031\n\021warrior_berserker\030\022 \001(\010"
  "\022\033\n\023elementalist_weaver\0308 \001(\010\022\032\n\022enginee"
  "r_holosmith\0309 \001(\010\022\032\n\022guardian_firebrand\030"
  "> \001(\010\022\025\n\rmesmer_mirage\030; \001(\010\022\033\n\023necroman"
  "cer_scourge\030< \001(\010\022\030\n\020ranger_soulbeast\0307 "
  "\001(\010\022\031\n\021revenant_renegade\030\? \001(\010\022\025\n\rthief_"
  "deadeye\030: \001(\010\022\034\n\024warrior_spellbreaker\030= "
  "\001(\010\022\034\n\024elmentalist_catalyst\030C \001(\010\022\032\n\022eng"
  "ineer_mechanist\030F \001(\010\022\033\n\023guardian_willbe"
  "nder\030A \001(\010\022\027\n\017mesmer_virtuoso\030B \001(\010\022\035\n\025n"
  "ecromancer_harbinger\030@ \001(\010\022\026\n\016ranger_unt"
  "amed\030H \001(\010\022\033\n\023revenant_vindicator\030E \001(\010\022"
  "\025\n\rthief_specter\030G \001(\010\022\032\n\022warrior_blades"
  "worn\030D \001(\010\022\030\n\020elementalist_air\030) \001(\010\022\033\n\023"
  "elementalist_arcane\030% \001(\010\022\032\n\022elementalis"
  "t_earth\030\032 \001(\010\022\031\n\021elementalist_fire\030\037 \001(\010"
  "\022\032\n\022elementalist_water\030\021 \001(\010\022\030\n\020engineer"
  "_alchemy\030\035 \001(\010\022\033\n\023engineer_explosives\030\006 "
  "\001(\010\022\031\n\021engineer_firearms\030& \001(\010\022\033\n\023engine"
  "er_inventions\030/ \001(\010\022\026\n\016engineer_tools\030\025 "
  "\001(\010\022\026\n\016guardian_honor\0301 \001(\010\022\031\n\021guardian_"
  "radiance\030\020 \001(\010\022\026\n\016guardian_valor\030\r \001(\010\022\030"
  "\n\020guardian_virtues\030. \001(\010\022\025\n\rguardian_zea"
  "l\030* \001(\010\022\024\n\014mesmer_chaos\030- \001(\010\022\031\n\021mesmer_"
  "domination\030\n \001(\010\022\026\n\016mesmer_dueling\030\001 \001(\010"
  "\022\030\n\020mesmer_illusions\030\030 \001(\010\022\032\n\022mesmer_ins"
  "piration\030\027 \001(\010\022\037\n\027necromancer_blood_magi"
  "c\030\023 \001(\010\022\032\n\022necromancer_curses\030\' \001(\010\022\037\n\027n"
  "ecromancer_death_magic\030\002 \001(\010\022 \n\030necroman"
  "cer_soul_reaping\0302 \001(\010\022\031\n\021necromancer_sp"
  "ite\0305 \001(\010\022\033\n\023ranger_beastmastery\030  \001(\010\022\033"
  "\n\023ranger_marksmanship\030\010 \001(\010\022\033\n\023ranger_na"
  "ture_magic\030\031 \001(\010\022\032\n\022ranger_skirmishing\030\036"
  " \001(\010\022\"\n\032ranger_wilderness_survival\030! \001(\010"
  "\022\033\n\023revenant_corruption\030\016 \001(\010\022\034\n\024revenan"
  "t_devastation\030\017 \001(\010\022\033\n\023revenant_invocati"
  "on\030\003 \001(\010\022\034\n\024revenant_retribution\030\t \001(\010\022\032"
  "\n\022revenant_salvation\030\014 \001(\010\022\030\n\020thief_acro"
  "batics\0306 \001(\010\022\036\n\026thief_critical_strikes\030#"
  " \001(\010\022\031\n\021thief_deadly_arts\030\034 \001(\010\022\031\n\021thief"
  "_shadow_arts\030\024 \001(\010\022\026\n\016thief_trickery\030, \001"
  "(\010\022\024\n\014warrior_arms\030$ \001(\010\022\027\n\017warrior_defe"
  "nse\030\026 \001(\010\022\032\n\022warrior_discipline\0303 \001(\010\022\030\n"
  "\020warrior_strength\030\004 \001(\010\022\027\n\017warrior_tacti"
  "cs\030\013 \001(\010\032\\\n\016species_filter\022\r\n\005asura\030\001 \001("
  "\010\022\r\n\005charr\030\002 \001(\010\022\r\n\005human\030\003 \001(\010\022\014\n\004norn\030"
  "\004 \001(\010\022\017\n\007sylvari\030\005 \001(\010\032E\n\007texture\022\014\n\004pat"
  "h\030\001 \001(\t\022,\n\016original_token\030\002 \001(\0132\024.google"
  ".protobuf.Any\032 \n\ntrail_data\022\022\n\ntrail_dat"
  "a\030\001 \001(\t\"@\n\016cull_chirality\022\010\n\004none\020\000\022\r\n\tc"
  "lockwise\020\001\022\025\n\021counter_clockwise\020\002b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_node_2eproto_sccs[18] = {
  &scc_info_Category_node_2eproto.base,
  &scc_info_Icon_node_2eproto.base,
  &scc_info_Icon_euler_rotation_node_2eproto.base,
  &scc_info_Icon_position_node_2eproto.base,
  &scc_info_Icon_texture_node_2eproto.base,
  &scc_info_Icon_trigger_node_2eproto.base,
  &scc_info_Icon_trigger_guid_node_2eproto.base,
  &scc_info_Trail_node_2eproto.base,
  &scc_info_Trail_color_node_2eproto.base,
  &scc_info_Trail_festival_filter_node_2eproto.base,
  &scc_info_Trail_guid_node_2eproto.base,
  &scc_info_Trail_map_type_filter_node_2eproto.base,
  &scc_info_Trail_mount_filter_node_2eproto.base,
  &scc_info_Trail_profession_filter_node_2eproto.base,
  &scc_info_Trail_specialization_filter_node_2eproto.base,
  &scc_info_Trail_species_filter_node_2eproto.base,
  &scc_info_Trail_texture_node_2eproto.base,
  &scc_info_Trail_trail_data_node_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto = {
  false, false, descriptor_table_protodef_node_2eproto, "node.proto", 5481,
  &descriptor_table_node_2eproto_once, descriptor_table_node_2eproto_sccs, descriptor_table_node_2eproto_deps, 18, 1,
  schemas, file_default_instances, TableStruct_node_2eproto::offsets,
  file_level_metadata_node_2eproto, 19, file_level_enum_descriptors_node_2eproto, file_level_service_descriptors_node_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_node_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_node_2eproto)), true);
namespace Proto_Node {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Icon_trigger_reset_behavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[0];
}
bool Icon_trigger_reset_behavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Icon_trigger_reset_behavior Icon_trigger::always_visible;
constexpr Icon_trigger_reset_behavior Icon_trigger::map_change;
constexpr Icon_trigger_reset_behavior Icon_trigger::daily_reset;
constexpr Icon_trigger_reset_behavior Icon_trigger::never;
constexpr Icon_trigger_reset_behavior Icon_trigger::timer;
constexpr Icon_trigger_reset_behavior Icon_trigger::map_reset;
constexpr Icon_trigger_reset_behavior Icon_trigger::instance_change;
constexpr Icon_trigger_reset_behavior Icon_trigger::daily_reset_per_character;
constexpr Icon_trigger_reset_behavior Icon_trigger::weekly_reset;
constexpr Icon_trigger_reset_behavior Icon_trigger::reset_behavior_MIN;
constexpr Icon_trigger_reset_behavior Icon_trigger::reset_behavior_MAX;
constexpr int Icon_trigger::reset_behavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trail_cull_chirality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2eproto);
  return file_level_enum_descriptors_node_2eproto[1];
}
bool Trail_cull_chirality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Trail_cull_chirality Trail::none;
constexpr Trail_cull_chirality Trail::clockwise;
constexpr Trail_cull_chirality Trail::counter_clockwise;
constexpr Trail_cull_chirality Trail::cull_chirality_MIN;
constexpr Trail_cull_chirality Trail::cull_chirality_MAX;
constexpr int Trail::cull_chirality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

Category_ChildrenEntry_DoNotUse::Category_ChildrenEntry_DoNotUse() {}
Category_ChildrenEntry_DoNotUse::Category_ChildrenEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Category_ChildrenEntry_DoNotUse::MergeFrom(const Category_ChildrenEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Category_ChildrenEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Category_ChildrenEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Category::InitAsDefaultInstance() {
}
class Category::_Internal {
 public:
};

Category::Category(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Category)
}
Category::Category(const Category& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  children_.MergeFrom(from.children_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_name(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  tooltip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tooltip_name().empty()) {
    tooltip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tooltip_name(),
      GetArena());
  }
  ::memcpy(&default_visibility_, &from.default_visibility_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_separator_) -
    reinterpret_cast<char*>(&default_visibility_)) + sizeof(is_separator_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Category)
}

void Category::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Category_node_2eproto.base);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tooltip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_visibility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_separator_) -
      reinterpret_cast<char*>(&default_visibility_)) + sizeof(is_separator_));
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:Proto_Node.Category)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Category::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tooltip_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Category::ArenaDtor(void* object) {
  Category* _this = reinterpret_cast< Category* >(object);
  (void)_this;
}
void Category::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Category& Category::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Category_node_2eproto.base);
  return *internal_default_instance();
}


void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tooltip_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&default_visibility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_separator_) -
      reinterpret_cast<char*>(&default_visibility_)) + sizeof(is_separator_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Category::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool default_visibility = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          default_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Category.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_separator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Category.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tooltip_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tooltip_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Category.tooltip_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .Proto_Node.Category> children = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&children_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Category::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool default_visibility = 1;
  if (this->default_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_default_visibility(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Category.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // bool is_separator = 3;
  if (this->is_separator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_separator(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Category.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string tooltip_name = 5;
  if (this->tooltip_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tooltip_name().data(), static_cast<int>(this->_internal_tooltip_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Category.tooltip_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tooltip_name(), target);
  }

  // map<string, .Proto_Node.Category> children = 6;
  if (!this->_internal_children().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Proto_Node.Category.ChildrenEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_children().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_children().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >::const_iterator
          it = this->_internal_children().begin();
          it != this->_internal_children().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Category_ChildrenEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >::const_iterator
          it = this->_internal_children().begin();
          it != this->_internal_children().end(); ++it) {
        target = Category_ChildrenEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Category)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Proto_Node.Category> children = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_children_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Proto_Node::Category >::const_iterator
      it = this->_internal_children().begin();
      it != this->_internal_children().end(); ++it) {
    total_size += Category_ChildrenEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string tooltip_name = 5;
  if (this->tooltip_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tooltip_name());
  }

  // bool default_visibility = 1;
  if (this->default_visibility() != 0) {
    total_size += 1 + 1;
  }

  // bool is_separator = 3;
  if (this->is_separator() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Category>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Category)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.display_name().size() > 0) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.tooltip_name().size() > 0) {
    _internal_set_tooltip_name(from._internal_tooltip_name());
  }
  if (from.default_visibility() != 0) {
    _internal_set_default_visibility(from._internal_default_visibility());
  }
  if (from.is_separator() != 0) {
    _internal_set_is_separator(from._internal_is_separator());
  }
}

void Category::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::InternalSwap(Category* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  children_.Swap(&other->children_);
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tooltip_name_.Swap(&other->tooltip_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Category, is_separator_)
      + sizeof(Category::is_separator_)
      - PROTOBUF_FIELD_OFFSET(Category, default_visibility_)>(
          reinterpret_cast<char*>(&default_visibility_),
          reinterpret_cast<char*>(&other->default_visibility_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Category::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Icon_texture::InitAsDefaultInstance() {
  ::Proto_Node::_Icon_texture_default_instance_._instance.get_mutable()->original_token_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Icon_texture::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& original_token(const Icon_texture* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Icon_texture::_Internal::original_token(const Icon_texture* msg) {
  return *msg->original_token_;
}
void Icon_texture::clear_original_token() {
  if (GetArena() == nullptr && original_token_ != nullptr) {
    delete original_token_;
  }
  original_token_ = nullptr;
}
Icon_texture::Icon_texture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Icon.texture)
}
Icon_texture::Icon_texture(const Icon_texture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  if (from._internal_has_original_token()) {
    original_token_ = new PROTOBUF_NAMESPACE_ID::Any(*from.original_token_);
  } else {
    original_token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Icon.texture)
}

void Icon_texture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Icon_texture_node_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_token_ = nullptr;
}

Icon_texture::~Icon_texture() {
  // @@protoc_insertion_point(destructor:Proto_Node.Icon.texture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Icon_texture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete original_token_;
}

void Icon_texture::ArenaDtor(void* object) {
  Icon_texture* _this = reinterpret_cast< Icon_texture* >(object);
  (void)_this;
}
void Icon_texture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Icon_texture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Icon_texture& Icon_texture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Icon_texture_node_2eproto.base);
  return *internal_default_instance();
}


void Icon_texture::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Icon.texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && original_token_ != nullptr) {
    delete original_token_;
  }
  original_token_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Icon_texture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Icon.texture.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any original_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Icon_texture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Icon.texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Icon.texture.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .google.protobuf.Any original_token = 2;
  if (this->has_original_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::original_token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Icon.texture)
  return target;
}

size_t Icon_texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Icon.texture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .google.protobuf.Any original_token = 2;
  if (this->has_original_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Icon_texture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Icon.texture)
  GOOGLE_DCHECK_NE(&from, this);
  const Icon_texture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Icon_texture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Icon.texture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Icon.texture)
    MergeFrom(*source);
  }
}

void Icon_texture::MergeFrom(const Icon_texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Icon.texture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.has_original_token()) {
    _internal_mutable_original_token()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_original_token());
  }
}

void Icon_texture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Icon.texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Icon_texture::CopyFrom(const Icon_texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Icon.texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Icon_texture::IsInitialized() const {
  return true;
}

void Icon_texture::InternalSwap(Icon_texture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(original_token_, other->original_token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Icon_texture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Icon_position::InitAsDefaultInstance() {
}
class Icon_position::_Internal {
 public:
};

Icon_position::Icon_position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Icon.position)
}
Icon_position::Icon_position(const Icon_position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Icon.position)
}

void Icon_position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Icon_position::~Icon_position() {
  // @@protoc_insertion_point(destructor:Proto_Node.Icon.position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Icon_position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Icon_position::ArenaDtor(void* object) {
  Icon_position* _this = reinterpret_cast< Icon_position* >(object);
  (void)_this;
}
void Icon_position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Icon_position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Icon_position& Icon_position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Icon_position_node_2eproto.base);
  return *internal_default_instance();
}


void Icon_position::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Icon.position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Icon_position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Icon_position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Icon.position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Icon.position)
  return target;
}

size_t Icon_position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Icon.position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Icon_position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Icon.position)
  GOOGLE_DCHECK_NE(&from, this);
  const Icon_position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Icon_position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Icon.position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Icon.position)
    MergeFrom(*source);
  }
}

void Icon_position::MergeFrom(const Icon_position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Icon.position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Icon_position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Icon.position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Icon_position::CopyFrom(const Icon_position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Icon.position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Icon_position::IsInitialized() const {
  return true;
}

void Icon_position::InternalSwap(Icon_position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Icon_position, z_)
      + sizeof(Icon_position::z_)
      - PROTOBUF_FIELD_OFFSET(Icon_position, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Icon_position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Icon_euler_rotation::InitAsDefaultInstance() {
}
class Icon_euler_rotation::_Internal {
 public:
};

Icon_euler_rotation::Icon_euler_rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Icon.euler_rotation)
}
Icon_euler_rotation::Icon_euler_rotation(const Icon_euler_rotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Icon.euler_rotation)
}

void Icon_euler_rotation::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Icon_euler_rotation::~Icon_euler_rotation() {
  // @@protoc_insertion_point(destructor:Proto_Node.Icon.euler_rotation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Icon_euler_rotation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Icon_euler_rotation::ArenaDtor(void* object) {
  Icon_euler_rotation* _this = reinterpret_cast< Icon_euler_rotation* >(object);
  (void)_this;
}
void Icon_euler_rotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Icon_euler_rotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Icon_euler_rotation& Icon_euler_rotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Icon_euler_rotation_node_2eproto.base);
  return *internal_default_instance();
}


void Icon_euler_rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Icon.euler_rotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Icon_euler_rotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Icon_euler_rotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Icon.euler_rotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Icon.euler_rotation)
  return target;
}

size_t Icon_euler_rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Icon.euler_rotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Icon_euler_rotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Icon.euler_rotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Icon_euler_rotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Icon_euler_rotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Icon.euler_rotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Icon.euler_rotation)
    MergeFrom(*source);
  }
}

void Icon_euler_rotation::MergeFrom(const Icon_euler_rotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Icon.euler_rotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Icon_euler_rotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Icon.euler_rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Icon_euler_rotation::CopyFrom(const Icon_euler_rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Icon.euler_rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Icon_euler_rotation::IsInitialized() const {
  return true;
}

void Icon_euler_rotation::InternalSwap(Icon_euler_rotation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Icon_euler_rotation, z_)
      + sizeof(Icon_euler_rotation::z_)
      - PROTOBUF_FIELD_OFFSET(Icon_euler_rotation, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Icon_euler_rotation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Icon_trigger_guid::InitAsDefaultInstance() {
}
class Icon_trigger_guid::_Internal {
 public:
};

Icon_trigger_guid::Icon_trigger_guid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Icon.trigger.guid)
}
Icon_trigger_guid::Icon_trigger_guid(const Icon_trigger_guid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Icon.trigger.guid)
}

void Icon_trigger_guid::SharedCtor() {
  guid_ = 0;
}

Icon_trigger_guid::~Icon_trigger_guid() {
  // @@protoc_insertion_point(destructor:Proto_Node.Icon.trigger.guid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Icon_trigger_guid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Icon_trigger_guid::ArenaDtor(void* object) {
  Icon_trigger_guid* _this = reinterpret_cast< Icon_trigger_guid* >(object);
  (void)_this;
}
void Icon_trigger_guid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Icon_trigger_guid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Icon_trigger_guid& Icon_trigger_guid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Icon_trigger_guid_node_2eproto.base);
  return *internal_default_instance();
}


void Icon_trigger_guid::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Icon.trigger.guid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Icon_trigger_guid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Icon_trigger_guid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Icon.trigger.guid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 guid = 1;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Icon.trigger.guid)
  return target;
}

size_t Icon_trigger_guid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Icon.trigger.guid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Icon_trigger_guid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Icon.trigger.guid)
  GOOGLE_DCHECK_NE(&from, this);
  const Icon_trigger_guid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Icon_trigger_guid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Icon.trigger.guid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Icon.trigger.guid)
    MergeFrom(*source);
  }
}

void Icon_trigger_guid::MergeFrom(const Icon_trigger_guid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Icon.trigger.guid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
}

void Icon_trigger_guid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Icon.trigger.guid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Icon_trigger_guid::CopyFrom(const Icon_trigger_guid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Icon.trigger.guid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Icon_trigger_guid::IsInitialized() const {
  return true;
}

void Icon_trigger_guid::InternalSwap(Icon_trigger_guid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(guid_, other->guid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Icon_trigger_guid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Icon_trigger::InitAsDefaultInstance() {
  ::Proto_Node::_Icon_trigger_default_instance_._instance.get_mutable()->action_hide_category_ = const_cast< ::Proto_Node::Category*>(
      ::Proto_Node::Category::internal_default_instance());
  ::Proto_Node::_Icon_trigger_default_instance_._instance.get_mutable()->action_show_category_ = const_cast< ::Proto_Node::Category*>(
      ::Proto_Node::Category::internal_default_instance());
  ::Proto_Node::_Icon_trigger_default_instance_._instance.get_mutable()->action_toggle_category_ = const_cast< ::Proto_Node::Category*>(
      ::Proto_Node::Category::internal_default_instance());
}
class Icon_trigger::_Internal {
 public:
  static const ::Proto_Node::Category& action_hide_category(const Icon_trigger* msg);
  static const ::Proto_Node::Category& action_show_category(const Icon_trigger* msg);
  static const ::Proto_Node::Category& action_toggle_category(const Icon_trigger* msg);
};

const ::Proto_Node::Category&
Icon_trigger::_Internal::action_hide_category(const Icon_trigger* msg) {
  return *msg->action_hide_category_;
}
const ::Proto_Node::Category&
Icon_trigger::_Internal::action_show_category(const Icon_trigger* msg) {
  return *msg->action_show_category_;
}
const ::Proto_Node::Category&
Icon_trigger::_Internal::action_toggle_category(const Icon_trigger* msg) {
  return *msg->action_toggle_category_;
}
Icon_trigger::Icon_trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Icon.trigger)
}
Icon_trigger::Icon_trigger(const Icon_trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_copy_clipboard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_copy_clipboard().empty()) {
    action_copy_clipboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_copy_clipboard(),
      GetArena());
  }
  action_copy_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_copy_message().empty()) {
    action_copy_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_copy_message(),
      GetArena());
  }
  action_info_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_info_message().empty()) {
    action_info_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_info_message(),
      GetArena());
  }
  if (from._internal_has_action_hide_category()) {
    action_hide_category_ = new ::Proto_Node::Category(*from.action_hide_category_);
  } else {
    action_hide_category_ = nullptr;
  }
  if (from._internal_has_action_show_category()) {
    action_show_category_ = new ::Proto_Node::Category(*from.action_show_category_);
  } else {
    action_show_category_ = nullptr;
  }
  if (from._internal_has_action_toggle_category()) {
    action_toggle_category_ = new ::Proto_Node::Category(*from.action_toggle_category_);
  } else {
    action_toggle_category_ = nullptr;
  }
  ::memcpy(&bounce_delay_, &from.bounce_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&bounce_delay_)) + sizeof(range_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Icon.trigger)
}

void Icon_trigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Icon_trigger_node_2eproto.base);
  action_copy_clipboard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_copy_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_info_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_hide_category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&action_hide_category_)) + sizeof(range_));
}

Icon_trigger::~Icon_trigger() {
  // @@protoc_insertion_point(destructor:Proto_Node.Icon.trigger)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Icon_trigger::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_copy_clipboard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_copy_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_info_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_hide_category_;
  if (this != internal_default_instance()) delete action_show_category_;
  if (this != internal_default_instance()) delete action_toggle_category_;
}

void Icon_trigger::ArenaDtor(void* object) {
  Icon_trigger* _this = reinterpret_cast< Icon_trigger* >(object);
  (void)_this;
}
void Icon_trigger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Icon_trigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Icon_trigger& Icon_trigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Icon_trigger_node_2eproto.base);
  return *internal_default_instance();
}


void Icon_trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Icon.trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_copy_clipboard_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_copy_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_info_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && action_hide_category_ != nullptr) {
    delete action_hide_category_;
  }
  action_hide_category_ = nullptr;
  if (GetArena() == nullptr && action_show_category_ != nullptr) {
    delete action_show_category_;
  }
  action_show_category_ = nullptr;
  if (GetArena() == nullptr && action_toggle_category_ != nullptr) {
    delete action_toggle_category_;
  }
  action_toggle_category_ = nullptr;
  ::memset(&bounce_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&bounce_delay_)) + sizeof(range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Icon_trigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool auto_trigger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auto_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bounce_delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          bounce_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bounce_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          bounce_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bounce_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          bounce_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string action_copy_clipboard = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_action_copy_clipboard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Icon.trigger.action_copy_clipboard"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action_copy_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_action_copy_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Icon.trigger.action_copy_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_countdown = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          has_countdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action_info_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_action_info_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Icon.trigger.action_info_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool invert_display = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          invert_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float reset_length = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          reset_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float range = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Proto_Node.Category action_hide_category = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_hide_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto_Node.Category action_show_category = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_show_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto_Node.Category action_toggle_category = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_toggle_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Icon_trigger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Icon.trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool auto_trigger = 1;
  if (this->auto_trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_auto_trigger(), target);
  }

  // float bounce_delay = 2;
  if (!(this->bounce_delay() <= 0 && this->bounce_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bounce_delay(), target);
  }

  // float bounce_duration = 3;
  if (!(this->bounce_duration() <= 0 && this->bounce_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bounce_duration(), target);
  }

  // float bounce_height = 4;
  if (!(this->bounce_height() <= 0 && this->bounce_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bounce_height(), target);
  }

  // string action_copy_clipboard = 5;
  if (this->action_copy_clipboard().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_copy_clipboard().data(), static_cast<int>(this->_internal_action_copy_clipboard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Icon.trigger.action_copy_clipboard");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action_copy_clipboard(), target);
  }

  // string action_copy_message = 6;
  if (this->action_copy_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_copy_message().data(), static_cast<int>(this->_internal_action_copy_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Icon.trigger.action_copy_message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_action_copy_message(), target);
  }

  // bool has_countdown = 7;
  if (this->has_countdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_countdown(), target);
  }

  // string action_info_message = 8;
  if (this->action_info_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_info_message().data(), static_cast<int>(this->_internal_action_info_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Icon.trigger.action_info_message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_action_info_message(), target);
  }

  // bool invert_display = 9;
  if (this->invert_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_invert_display(), target);
  }

  // float reset_length = 10;
  if (!(this->reset_length() <= 0 && this->reset_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_reset_length(), target);
  }

  // float range = 11;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_range(), target);
  }

  // .Proto_Node.Category action_hide_category = 12;
  if (this->has_action_hide_category()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::action_hide_category(this), target, stream);
  }

  // .Proto_Node.Category action_show_category = 13;
  if (this->has_action_show_category()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::action_show_category(this), target, stream);
  }

  // .Proto_Node.Category action_toggle_category = 14;
  if (this->has_action_toggle_category()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::action_toggle_category(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Icon.trigger)
  return target;
}

size_t Icon_trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Icon.trigger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_copy_clipboard = 5;
  if (this->action_copy_clipboard().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_copy_clipboard());
  }

  // string action_copy_message = 6;
  if (this->action_copy_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_copy_message());
  }

  // string action_info_message = 8;
  if (this->action_info_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_info_message());
  }

  // .Proto_Node.Category action_hide_category = 12;
  if (this->has_action_hide_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_hide_category_);
  }

  // .Proto_Node.Category action_show_category = 13;
  if (this->has_action_show_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_show_category_);
  }

  // .Proto_Node.Category action_toggle_category = 14;
  if (this->has_action_toggle_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_toggle_category_);
  }

  // float bounce_delay = 2;
  if (!(this->bounce_delay() <= 0 && this->bounce_delay() >= 0)) {
    total_size += 1 + 4;
  }

  // float bounce_duration = 3;
  if (!(this->bounce_duration() <= 0 && this->bounce_duration() >= 0)) {
    total_size += 1 + 4;
  }

  // float bounce_height = 4;
  if (!(this->bounce_height() <= 0 && this->bounce_height() >= 0)) {
    total_size += 1 + 4;
  }

  // bool auto_trigger = 1;
  if (this->auto_trigger() != 0) {
    total_size += 1 + 1;
  }

  // bool has_countdown = 7;
  if (this->has_countdown() != 0) {
    total_size += 1 + 1;
  }

  // bool invert_display = 9;
  if (this->invert_display() != 0) {
    total_size += 1 + 1;
  }

  // float reset_length = 10;
  if (!(this->reset_length() <= 0 && this->reset_length() >= 0)) {
    total_size += 1 + 4;
  }

  // float range = 11;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Icon_trigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Icon.trigger)
  GOOGLE_DCHECK_NE(&from, this);
  const Icon_trigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Icon_trigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Icon.trigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Icon.trigger)
    MergeFrom(*source);
  }
}

void Icon_trigger::MergeFrom(const Icon_trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Icon.trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_copy_clipboard().size() > 0) {
    _internal_set_action_copy_clipboard(from._internal_action_copy_clipboard());
  }
  if (from.action_copy_message().size() > 0) {
    _internal_set_action_copy_message(from._internal_action_copy_message());
  }
  if (from.action_info_message().size() > 0) {
    _internal_set_action_info_message(from._internal_action_info_message());
  }
  if (from.has_action_hide_category()) {
    _internal_mutable_action_hide_category()->::Proto_Node::Category::MergeFrom(from._internal_action_hide_category());
  }
  if (from.has_action_show_category()) {
    _internal_mutable_action_show_category()->::Proto_Node::Category::MergeFrom(from._internal_action_show_category());
  }
  if (from.has_action_toggle_category()) {
    _internal_mutable_action_toggle_category()->::Proto_Node::Category::MergeFrom(from._internal_action_toggle_category());
  }
  if (!(from.bounce_delay() <= 0 && from.bounce_delay() >= 0)) {
    _internal_set_bounce_delay(from._internal_bounce_delay());
  }
  if (!(from.bounce_duration() <= 0 && from.bounce_duration() >= 0)) {
    _internal_set_bounce_duration(from._internal_bounce_duration());
  }
  if (!(from.bounce_height() <= 0 && from.bounce_height() >= 0)) {
    _internal_set_bounce_height(from._internal_bounce_height());
  }
  if (from.auto_trigger() != 0) {
    _internal_set_auto_trigger(from._internal_auto_trigger());
  }
  if (from.has_countdown() != 0) {
    _internal_set_has_countdown(from._internal_has_countdown());
  }
  if (from.invert_display() != 0) {
    _internal_set_invert_display(from._internal_invert_display());
  }
  if (!(from.reset_length() <= 0 && from.reset_length() >= 0)) {
    _internal_set_reset_length(from._internal_reset_length());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
}

void Icon_trigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Icon.trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Icon_trigger::CopyFrom(const Icon_trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Icon.trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Icon_trigger::IsInitialized() const {
  return true;
}

void Icon_trigger::InternalSwap(Icon_trigger* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  action_copy_clipboard_.Swap(&other->action_copy_clipboard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_copy_message_.Swap(&other->action_copy_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_info_message_.Swap(&other->action_info_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Icon_trigger, range_)
      + sizeof(Icon_trigger::range_)
      - PROTOBUF_FIELD_OFFSET(Icon_trigger, action_hide_category_)>(
          reinterpret_cast<char*>(&action_hide_category_),
          reinterpret_cast<char*>(&other->action_hide_category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Icon_trigger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Icon::InitAsDefaultInstance() {
}
class Icon::_Internal {
 public:
};

Icon::Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Icon)
}
Icon::Icon(const Icon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bhdraft__schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bhdraft__schedule().empty()) {
    bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bhdraft__schedule(),
      GetArena());
  }
  tip_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tip_description().empty()) {
    tip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tip_description(),
      GetArena());
  }
  tip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tip_name().empty()) {
    tip_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tip_name(),
      GetArena());
  }
  ::memcpy(&achievement_bit_, &from.achievement_bit_,
    static_cast<size_t>(reinterpret_cast<char*>(&bhdraft__schedule_duration_) -
    reinterpret_cast<char*>(&achievement_bit_)) + sizeof(bhdraft__schedule_duration_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Icon)
}

void Icon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Icon_node_2eproto.base);
  bhdraft__schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&achievement_bit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bhdraft__schedule_duration_) -
      reinterpret_cast<char*>(&achievement_bit_)) + sizeof(bhdraft__schedule_duration_));
}

Icon::~Icon() {
  // @@protoc_insertion_point(destructor:Proto_Node.Icon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Icon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bhdraft__schedule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Icon::ArenaDtor(void* object) {
  Icon* _this = reinterpret_cast< Icon* >(object);
  (void)_this;
}
void Icon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Icon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Icon& Icon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Icon_node_2eproto.base);
  return *internal_default_instance();
}


void Icon::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhdraft__schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tip_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tip_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&achievement_bit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bhdraft__schedule_duration_) -
      reinterpret_cast<char*>(&achievement_bit_)) + sizeof(bhdraft__schedule_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Icon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed32 achievement_bit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          achievement_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // int32 achievement_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          achievement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool can_fade = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          can_fade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance_fade_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          distance_fade_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distance_fade_start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          distance_fade_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          height_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float __tentative__scale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          __tentative__scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 map_display_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          map_display_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maximum_size_on_screen = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          maximum_size_on_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minimum_size_on_screen = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          minimum_size_on_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool __tentative__render_ingame = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          __tentative__render_ingame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool __tentative__render_on_map = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          __tentative__render_on_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool __tentative__render_on_minimap = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          __tentative__render_on_minimap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool scale_on_map_with_zoom = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          scale_on_map_with_zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bhdraft__schedule = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_bhdraft__schedule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Icon.bhdraft__schedule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bhdraft__schedule_duration = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          bhdraft__schedule_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string tip_description = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_tip_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Icon.tip_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tip_name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_tip_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Icon.tip_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Icon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 achievement_bit = 1;
  if (this->achievement_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_achievement_bit(), target);
  }

  // int32 achievement_id = 2;
  if (this->achievement_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_achievement_id(), target);
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_alpha(), target);
  }

  // bool can_fade = 4;
  if (this->can_fade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_can_fade(), target);
  }

  // float distance_fade_end = 5;
  if (!(this->distance_fade_end() <= 0 && this->distance_fade_end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_distance_fade_end(), target);
  }

  // float distance_fade_start = 6;
  if (!(this->distance_fade_start() <= 0 && this->distance_fade_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_distance_fade_start(), target);
  }

  // float height_offset = 7;
  if (!(this->height_offset() <= 0 && this->height_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_height_offset(), target);
  }

  // float __tentative__scale = 8;
  if (!(this->__tentative__scale() <= 0 && this->__tentative__scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal___tentative__scale(), target);
  }

  // int32 map_display_size = 9;
  if (this->map_display_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_map_display_size(), target);
  }

  // int32 map_id = 10;
  if (this->map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_map_id(), target);
  }

  // int32 maximum_size_on_screen = 11;
  if (this->maximum_size_on_screen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_maximum_size_on_screen(), target);
  }

  // int32 minimum_size_on_screen = 12;
  if (this->minimum_size_on_screen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_minimum_size_on_screen(), target);
  }

  // bool __tentative__render_ingame = 13;
  if (this->__tentative__render_ingame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal___tentative__render_ingame(), target);
  }

  // bool __tentative__render_on_map = 14;
  if (this->__tentative__render_on_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal___tentative__render_on_map(), target);
  }

  // bool __tentative__render_on_minimap = 15;
  if (this->__tentative__render_on_minimap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal___tentative__render_on_minimap(), target);
  }

  // bool scale_on_map_with_zoom = 16;
  if (this->scale_on_map_with_zoom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_scale_on_map_with_zoom(), target);
  }

  // string bhdraft__schedule = 17;
  if (this->bhdraft__schedule().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bhdraft__schedule().data(), static_cast<int>(this->_internal_bhdraft__schedule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Icon.bhdraft__schedule");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_bhdraft__schedule(), target);
  }

  // float bhdraft__schedule_duration = 18;
  if (!(this->bhdraft__schedule_duration() <= 0 && this->bhdraft__schedule_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_bhdraft__schedule_duration(), target);
  }

  // string tip_description = 19;
  if (this->tip_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tip_description().data(), static_cast<int>(this->_internal_tip_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Icon.tip_description");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_tip_description(), target);
  }

  // string tip_name = 20;
  if (this->tip_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tip_name().data(), static_cast<int>(this->_internal_tip_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Icon.tip_name");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_tip_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Icon)
  return target;
}

size_t Icon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Icon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bhdraft__schedule = 17;
  if (this->bhdraft__schedule().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bhdraft__schedule());
  }

  // string tip_description = 19;
  if (this->tip_description().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tip_description());
  }

  // string tip_name = 20;
  if (this->tip_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tip_name());
  }

  // fixed32 achievement_bit = 1;
  if (this->achievement_bit() != 0) {
    total_size += 1 + 4;
  }

  // int32 achievement_id = 2;
  if (this->achievement_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_achievement_id());
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float distance_fade_end = 5;
  if (!(this->distance_fade_end() <= 0 && this->distance_fade_end() >= 0)) {
    total_size += 1 + 4;
  }

  // float distance_fade_start = 6;
  if (!(this->distance_fade_start() <= 0 && this->distance_fade_start() >= 0)) {
    total_size += 1 + 4;
  }

  // float height_offset = 7;
  if (!(this->height_offset() <= 0 && this->height_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float __tentative__scale = 8;
  if (!(this->__tentative__scale() <= 0 && this->__tentative__scale() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 map_display_size = 9;
  if (this->map_display_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_display_size());
  }

  // int32 map_id = 10;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  // int32 maximum_size_on_screen = 11;
  if (this->maximum_size_on_screen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum_size_on_screen());
  }

  // bool can_fade = 4;
  if (this->can_fade() != 0) {
    total_size += 1 + 1;
  }

  // bool __tentative__render_ingame = 13;
  if (this->__tentative__render_ingame() != 0) {
    total_size += 1 + 1;
  }

  // bool __tentative__render_on_map = 14;
  if (this->__tentative__render_on_map() != 0) {
    total_size += 1 + 1;
  }

  // bool __tentative__render_on_minimap = 15;
  if (this->__tentative__render_on_minimap() != 0) {
    total_size += 1 + 1;
  }

  // int32 minimum_size_on_screen = 12;
  if (this->minimum_size_on_screen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minimum_size_on_screen());
  }

  // bool scale_on_map_with_zoom = 16;
  if (this->scale_on_map_with_zoom() != 0) {
    total_size += 2 + 1;
  }

  // float bhdraft__schedule_duration = 18;
  if (!(this->bhdraft__schedule_duration() <= 0 && this->bhdraft__schedule_duration() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Icon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Icon)
  GOOGLE_DCHECK_NE(&from, this);
  const Icon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Icon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Icon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Icon)
    MergeFrom(*source);
  }
}

void Icon::MergeFrom(const Icon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Icon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bhdraft__schedule().size() > 0) {
    _internal_set_bhdraft__schedule(from._internal_bhdraft__schedule());
  }
  if (from.tip_description().size() > 0) {
    _internal_set_tip_description(from._internal_tip_description());
  }
  if (from.tip_name().size() > 0) {
    _internal_set_tip_name(from._internal_tip_name());
  }
  if (from.achievement_bit() != 0) {
    _internal_set_achievement_bit(from._internal_achievement_bit());
  }
  if (from.achievement_id() != 0) {
    _internal_set_achievement_id(from._internal_achievement_id());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.distance_fade_end() <= 0 && from.distance_fade_end() >= 0)) {
    _internal_set_distance_fade_end(from._internal_distance_fade_end());
  }
  if (!(from.distance_fade_start() <= 0 && from.distance_fade_start() >= 0)) {
    _internal_set_distance_fade_start(from._internal_distance_fade_start());
  }
  if (!(from.height_offset() <= 0 && from.height_offset() >= 0)) {
    _internal_set_height_offset(from._internal_height_offset());
  }
  if (!(from.__tentative__scale() <= 0 && from.__tentative__scale() >= 0)) {
    _internal_set___tentative__scale(from._internal___tentative__scale());
  }
  if (from.map_display_size() != 0) {
    _internal_set_map_display_size(from._internal_map_display_size());
  }
  if (from.map_id() != 0) {
    _internal_set_map_id(from._internal_map_id());
  }
  if (from.maximum_size_on_screen() != 0) {
    _internal_set_maximum_size_on_screen(from._internal_maximum_size_on_screen());
  }
  if (from.can_fade() != 0) {
    _internal_set_can_fade(from._internal_can_fade());
  }
  if (from.__tentative__render_ingame() != 0) {
    _internal_set___tentative__render_ingame(from._internal___tentative__render_ingame());
  }
  if (from.__tentative__render_on_map() != 0) {
    _internal_set___tentative__render_on_map(from._internal___tentative__render_on_map());
  }
  if (from.__tentative__render_on_minimap() != 0) {
    _internal_set___tentative__render_on_minimap(from._internal___tentative__render_on_minimap());
  }
  if (from.minimum_size_on_screen() != 0) {
    _internal_set_minimum_size_on_screen(from._internal_minimum_size_on_screen());
  }
  if (from.scale_on_map_with_zoom() != 0) {
    _internal_set_scale_on_map_with_zoom(from._internal_scale_on_map_with_zoom());
  }
  if (!(from.bhdraft__schedule_duration() <= 0 && from.bhdraft__schedule_duration() >= 0)) {
    _internal_set_bhdraft__schedule_duration(from._internal_bhdraft__schedule_duration());
  }
}

void Icon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Icon::CopyFrom(const Icon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Icon::IsInitialized() const {
  return true;
}

void Icon::InternalSwap(Icon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bhdraft__schedule_.Swap(&other->bhdraft__schedule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tip_description_.Swap(&other->tip_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tip_name_.Swap(&other->tip_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Icon, bhdraft__schedule_duration_)
      + sizeof(Icon::bhdraft__schedule_duration_)
      - PROTOBUF_FIELD_OFFSET(Icon, achievement_bit_)>(
          reinterpret_cast<char*>(&achievement_bit_),
          reinterpret_cast<char*>(&other->achievement_bit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Icon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_color::InitAsDefaultInstance() {
}
class Trail_color::_Internal {
 public:
};

Trail_color::Trail_color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.color)
}
Trail_color::Trail_color(const Trail_color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hex().empty()) {
    hex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hex(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.color)
}

void Trail_color::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trail_color_node_2eproto.base);
  hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Trail_color::~Trail_color() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Trail_color::ArenaDtor(void* object) {
  Trail_color* _this = reinterpret_cast< Trail_color* >(object);
  (void)_this;
}
void Trail_color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_color& Trail_color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_color_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_color::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Trail.color.hex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hex = 1;
  if (this->hex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hex().data(), static_cast<int>(this->_internal_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Trail.color.hex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.color)
  return target;
}

size_t Trail_color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hex = 1;
  if (this->hex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.color)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.color)
    MergeFrom(*source);
  }
}

void Trail_color::MergeFrom(const Trail_color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hex().size() > 0) {
    _internal_set_hex(from._internal_hex());
  }
}

void Trail_color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_color::CopyFrom(const Trail_color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_color::IsInitialized() const {
  return true;
}

void Trail_color::InternalSwap(Trail_color* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hex_.Swap(&other->hex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_festival_filter::InitAsDefaultInstance() {
}
class Trail_festival_filter::_Internal {
 public:
};

Trail_festival_filter::Trail_festival_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.festival_filter)
}
Trail_festival_filter::Trail_festival_filter(const Trail_festival_filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dragonbash_, &from.dragonbash_,
    static_cast<size_t>(reinterpret_cast<char*>(&none_) -
    reinterpret_cast<char*>(&dragonbash_)) + sizeof(none_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.festival_filter)
}

void Trail_festival_filter::SharedCtor() {
  ::memset(&dragonbash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&none_) -
      reinterpret_cast<char*>(&dragonbash_)) + sizeof(none_));
}

Trail_festival_filter::~Trail_festival_filter() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.festival_filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_festival_filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trail_festival_filter::ArenaDtor(void* object) {
  Trail_festival_filter* _this = reinterpret_cast< Trail_festival_filter* >(object);
  (void)_this;
}
void Trail_festival_filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_festival_filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_festival_filter& Trail_festival_filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_festival_filter_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_festival_filter::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.festival_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dragonbash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&none_) -
      reinterpret_cast<char*>(&dragonbash_)) + sizeof(none_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_festival_filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool dragonbash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dragonbash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool festival_of_the_four_winds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          festival_of_the_four_winds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool halloween = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          halloween_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lunar_new_year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lunar_new_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool super_adventure_festival = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          super_adventure_festival_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool wintersday = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          wintersday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool none = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          none_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_festival_filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.festival_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool dragonbash = 1;
  if (this->dragonbash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_dragonbash(), target);
  }

  // bool festival_of_the_four_winds = 2;
  if (this->festival_of_the_four_winds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_festival_of_the_four_winds(), target);
  }

  // bool halloween = 3;
  if (this->halloween() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_halloween(), target);
  }

  // bool lunar_new_year = 4;
  if (this->lunar_new_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_lunar_new_year(), target);
  }

  // bool super_adventure_festival = 5;
  if (this->super_adventure_festival() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_super_adventure_festival(), target);
  }

  // bool wintersday = 6;
  if (this->wintersday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_wintersday(), target);
  }

  // bool none = 7;
  if (this->none() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_none(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.festival_filter)
  return target;
}

size_t Trail_festival_filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.festival_filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool dragonbash = 1;
  if (this->dragonbash() != 0) {
    total_size += 1 + 1;
  }

  // bool festival_of_the_four_winds = 2;
  if (this->festival_of_the_four_winds() != 0) {
    total_size += 1 + 1;
  }

  // bool halloween = 3;
  if (this->halloween() != 0) {
    total_size += 1 + 1;
  }

  // bool lunar_new_year = 4;
  if (this->lunar_new_year() != 0) {
    total_size += 1 + 1;
  }

  // bool super_adventure_festival = 5;
  if (this->super_adventure_festival() != 0) {
    total_size += 1 + 1;
  }

  // bool wintersday = 6;
  if (this->wintersday() != 0) {
    total_size += 1 + 1;
  }

  // bool none = 7;
  if (this->none() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_festival_filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.festival_filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_festival_filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_festival_filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.festival_filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.festival_filter)
    MergeFrom(*source);
  }
}

void Trail_festival_filter::MergeFrom(const Trail_festival_filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.festival_filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dragonbash() != 0) {
    _internal_set_dragonbash(from._internal_dragonbash());
  }
  if (from.festival_of_the_four_winds() != 0) {
    _internal_set_festival_of_the_four_winds(from._internal_festival_of_the_four_winds());
  }
  if (from.halloween() != 0) {
    _internal_set_halloween(from._internal_halloween());
  }
  if (from.lunar_new_year() != 0) {
    _internal_set_lunar_new_year(from._internal_lunar_new_year());
  }
  if (from.super_adventure_festival() != 0) {
    _internal_set_super_adventure_festival(from._internal_super_adventure_festival());
  }
  if (from.wintersday() != 0) {
    _internal_set_wintersday(from._internal_wintersday());
  }
  if (from.none() != 0) {
    _internal_set_none(from._internal_none());
  }
}

void Trail_festival_filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.festival_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_festival_filter::CopyFrom(const Trail_festival_filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.festival_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_festival_filter::IsInitialized() const {
  return true;
}

void Trail_festival_filter::InternalSwap(Trail_festival_filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trail_festival_filter, none_)
      + sizeof(Trail_festival_filter::none_)
      - PROTOBUF_FIELD_OFFSET(Trail_festival_filter, dragonbash_)>(
          reinterpret_cast<char*>(&dragonbash_),
          reinterpret_cast<char*>(&other->dragonbash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_festival_filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_guid::InitAsDefaultInstance() {
}
class Trail_guid::_Internal {
 public:
};

Trail_guid::Trail_guid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.guid)
}
Trail_guid::Trail_guid(const Trail_guid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.guid)
}

void Trail_guid::SharedCtor() {
  guid_ = 0;
}

Trail_guid::~Trail_guid() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.guid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_guid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trail_guid::ArenaDtor(void* object) {
  Trail_guid* _this = reinterpret_cast< Trail_guid* >(object);
  (void)_this;
}
void Trail_guid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_guid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_guid& Trail_guid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_guid_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_guid::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.guid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_guid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_guid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.guid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 guid = 1;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.guid)
  return target;
}

size_t Trail_guid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.guid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_guid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.guid)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_guid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_guid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.guid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.guid)
    MergeFrom(*source);
  }
}

void Trail_guid::MergeFrom(const Trail_guid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.guid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
}

void Trail_guid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.guid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_guid::CopyFrom(const Trail_guid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.guid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_guid::IsInitialized() const {
  return true;
}

void Trail_guid::InternalSwap(Trail_guid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(guid_, other->guid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_guid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_map_type_filter::InitAsDefaultInstance() {
}
class Trail_map_type_filter::_Internal {
 public:
};

Trail_map_type_filter::Trail_map_type_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.map_type_filter)
}
Trail_map_type_filter::Trail_map_type_filter(const Trail_map_type_filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unknown_map_, &from.unknown_map_,
    static_cast<size_t>(reinterpret_cast<char*>(&wvw_lounge_map_) -
    reinterpret_cast<char*>(&unknown_map_)) + sizeof(wvw_lounge_map_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.map_type_filter)
}

void Trail_map_type_filter::SharedCtor() {
  ::memset(&unknown_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wvw_lounge_map_) -
      reinterpret_cast<char*>(&unknown_map_)) + sizeof(wvw_lounge_map_));
}

Trail_map_type_filter::~Trail_map_type_filter() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.map_type_filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_map_type_filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trail_map_type_filter::ArenaDtor(void* object) {
  Trail_map_type_filter* _this = reinterpret_cast< Trail_map_type_filter* >(object);
  (void)_this;
}
void Trail_map_type_filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_map_type_filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_map_type_filter& Trail_map_type_filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_map_type_filter_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_map_type_filter::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.map_type_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unknown_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wvw_lounge_map_) -
      reinterpret_cast<char*>(&unknown_map_)) + sizeof(wvw_lounge_map_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_map_type_filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool unknown_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unknown_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool redirect_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          redirect_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool character_create_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          character_create_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pvp_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pvp_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gvg_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gvg_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool instance_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          instance_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool public_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          public_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tournament_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tournament_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tutorial_map = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tutorial_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool user_tournament_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          user_tournament_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool center_map = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          center_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool eternal_battlegrounds_map = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          eternal_battlegrounds_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bluehome_map = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          bluehome_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blue_borderlands_map = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          blue_borderlands_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool green_home_map = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          green_home_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool green_borderlands_map = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          green_borderlands_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool red_home_map = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          red_home_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool red_borderlands_map = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          red_borderlands_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fortunes_vale_map = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          fortunes_vale_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool jump_puzzle_map = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          jump_puzzle_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool obsidian_sanctum_map = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          obsidian_sanctum_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool edge_of_the_mists_map = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          edge_of_the_mists_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool public_mini_map = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          public_mini_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool wvw_lounge_map = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          wvw_lounge_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_map_type_filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.map_type_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool unknown_map = 1;
  if (this->unknown_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_unknown_map(), target);
  }

  // bool redirect_map = 2;
  if (this->redirect_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_redirect_map(), target);
  }

  // bool character_create_map = 3;
  if (this->character_create_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_character_create_map(), target);
  }

  // bool pvp_map = 4;
  if (this->pvp_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pvp_map(), target);
  }

  // bool gvg_map = 5;
  if (this->gvg_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gvg_map(), target);
  }

  // bool instance_map = 6;
  if (this->instance_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_instance_map(), target);
  }

  // bool public_map = 7;
  if (this->public_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_public_map(), target);
  }

  // bool tournament_map = 8;
  if (this->tournament_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_tournament_map(), target);
  }

  // bool tutorial_map = 9;
  if (this->tutorial_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_tutorial_map(), target);
  }

  // bool user_tournament_map = 10;
  if (this->user_tournament_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_user_tournament_map(), target);
  }

  // bool center_map = 11;
  if (this->center_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_center_map(), target);
  }

  // bool eternal_battlegrounds_map = 12;
  if (this->eternal_battlegrounds_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_eternal_battlegrounds_map(), target);
  }

  // bool bluehome_map = 13;
  if (this->bluehome_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_bluehome_map(), target);
  }

  // bool blue_borderlands_map = 14;
  if (this->blue_borderlands_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_blue_borderlands_map(), target);
  }

  // bool green_home_map = 15;
  if (this->green_home_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_green_home_map(), target);
  }

  // bool green_borderlands_map = 16;
  if (this->green_borderlands_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_green_borderlands_map(), target);
  }

  // bool red_home_map = 17;
  if (this->red_home_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_red_home_map(), target);
  }

  // bool red_borderlands_map = 18;
  if (this->red_borderlands_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_red_borderlands_map(), target);
  }

  // bool fortunes_vale_map = 19;
  if (this->fortunes_vale_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_fortunes_vale_map(), target);
  }

  // bool jump_puzzle_map = 20;
  if (this->jump_puzzle_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_jump_puzzle_map(), target);
  }

  // bool obsidian_sanctum_map = 21;
  if (this->obsidian_sanctum_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_obsidian_sanctum_map(), target);
  }

  // bool edge_of_the_mists_map = 22;
  if (this->edge_of_the_mists_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_edge_of_the_mists_map(), target);
  }

  // bool public_mini_map = 23;
  if (this->public_mini_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_public_mini_map(), target);
  }

  // bool wvw_lounge_map = 24;
  if (this->wvw_lounge_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_wvw_lounge_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.map_type_filter)
  return target;
}

size_t Trail_map_type_filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.map_type_filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool unknown_map = 1;
  if (this->unknown_map() != 0) {
    total_size += 1 + 1;
  }

  // bool redirect_map = 2;
  if (this->redirect_map() != 0) {
    total_size += 1 + 1;
  }

  // bool character_create_map = 3;
  if (this->character_create_map() != 0) {
    total_size += 1 + 1;
  }

  // bool pvp_map = 4;
  if (this->pvp_map() != 0) {
    total_size += 1 + 1;
  }

  // bool gvg_map = 5;
  if (this->gvg_map() != 0) {
    total_size += 1 + 1;
  }

  // bool instance_map = 6;
  if (this->instance_map() != 0) {
    total_size += 1 + 1;
  }

  // bool public_map = 7;
  if (this->public_map() != 0) {
    total_size += 1 + 1;
  }

  // bool tournament_map = 8;
  if (this->tournament_map() != 0) {
    total_size += 1 + 1;
  }

  // bool tutorial_map = 9;
  if (this->tutorial_map() != 0) {
    total_size += 1 + 1;
  }

  // bool user_tournament_map = 10;
  if (this->user_tournament_map() != 0) {
    total_size += 1 + 1;
  }

  // bool center_map = 11;
  if (this->center_map() != 0) {
    total_size += 1 + 1;
  }

  // bool eternal_battlegrounds_map = 12;
  if (this->eternal_battlegrounds_map() != 0) {
    total_size += 1 + 1;
  }

  // bool bluehome_map = 13;
  if (this->bluehome_map() != 0) {
    total_size += 1 + 1;
  }

  // bool blue_borderlands_map = 14;
  if (this->blue_borderlands_map() != 0) {
    total_size += 1 + 1;
  }

  // bool green_home_map = 15;
  if (this->green_home_map() != 0) {
    total_size += 1 + 1;
  }

  // bool green_borderlands_map = 16;
  if (this->green_borderlands_map() != 0) {
    total_size += 2 + 1;
  }

  // bool red_home_map = 17;
  if (this->red_home_map() != 0) {
    total_size += 2 + 1;
  }

  // bool red_borderlands_map = 18;
  if (this->red_borderlands_map() != 0) {
    total_size += 2 + 1;
  }

  // bool fortunes_vale_map = 19;
  if (this->fortunes_vale_map() != 0) {
    total_size += 2 + 1;
  }

  // bool jump_puzzle_map = 20;
  if (this->jump_puzzle_map() != 0) {
    total_size += 2 + 1;
  }

  // bool obsidian_sanctum_map = 21;
  if (this->obsidian_sanctum_map() != 0) {
    total_size += 2 + 1;
  }

  // bool edge_of_the_mists_map = 22;
  if (this->edge_of_the_mists_map() != 0) {
    total_size += 2 + 1;
  }

  // bool public_mini_map = 23;
  if (this->public_mini_map() != 0) {
    total_size += 2 + 1;
  }

  // bool wvw_lounge_map = 24;
  if (this->wvw_lounge_map() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_map_type_filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.map_type_filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_map_type_filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_map_type_filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.map_type_filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.map_type_filter)
    MergeFrom(*source);
  }
}

void Trail_map_type_filter::MergeFrom(const Trail_map_type_filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.map_type_filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unknown_map() != 0) {
    _internal_set_unknown_map(from._internal_unknown_map());
  }
  if (from.redirect_map() != 0) {
    _internal_set_redirect_map(from._internal_redirect_map());
  }
  if (from.character_create_map() != 0) {
    _internal_set_character_create_map(from._internal_character_create_map());
  }
  if (from.pvp_map() != 0) {
    _internal_set_pvp_map(from._internal_pvp_map());
  }
  if (from.gvg_map() != 0) {
    _internal_set_gvg_map(from._internal_gvg_map());
  }
  if (from.instance_map() != 0) {
    _internal_set_instance_map(from._internal_instance_map());
  }
  if (from.public_map() != 0) {
    _internal_set_public_map(from._internal_public_map());
  }
  if (from.tournament_map() != 0) {
    _internal_set_tournament_map(from._internal_tournament_map());
  }
  if (from.tutorial_map() != 0) {
    _internal_set_tutorial_map(from._internal_tutorial_map());
  }
  if (from.user_tournament_map() != 0) {
    _internal_set_user_tournament_map(from._internal_user_tournament_map());
  }
  if (from.center_map() != 0) {
    _internal_set_center_map(from._internal_center_map());
  }
  if (from.eternal_battlegrounds_map() != 0) {
    _internal_set_eternal_battlegrounds_map(from._internal_eternal_battlegrounds_map());
  }
  if (from.bluehome_map() != 0) {
    _internal_set_bluehome_map(from._internal_bluehome_map());
  }
  if (from.blue_borderlands_map() != 0) {
    _internal_set_blue_borderlands_map(from._internal_blue_borderlands_map());
  }
  if (from.green_home_map() != 0) {
    _internal_set_green_home_map(from._internal_green_home_map());
  }
  if (from.green_borderlands_map() != 0) {
    _internal_set_green_borderlands_map(from._internal_green_borderlands_map());
  }
  if (from.red_home_map() != 0) {
    _internal_set_red_home_map(from._internal_red_home_map());
  }
  if (from.red_borderlands_map() != 0) {
    _internal_set_red_borderlands_map(from._internal_red_borderlands_map());
  }
  if (from.fortunes_vale_map() != 0) {
    _internal_set_fortunes_vale_map(from._internal_fortunes_vale_map());
  }
  if (from.jump_puzzle_map() != 0) {
    _internal_set_jump_puzzle_map(from._internal_jump_puzzle_map());
  }
  if (from.obsidian_sanctum_map() != 0) {
    _internal_set_obsidian_sanctum_map(from._internal_obsidian_sanctum_map());
  }
  if (from.edge_of_the_mists_map() != 0) {
    _internal_set_edge_of_the_mists_map(from._internal_edge_of_the_mists_map());
  }
  if (from.public_mini_map() != 0) {
    _internal_set_public_mini_map(from._internal_public_mini_map());
  }
  if (from.wvw_lounge_map() != 0) {
    _internal_set_wvw_lounge_map(from._internal_wvw_lounge_map());
  }
}

void Trail_map_type_filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.map_type_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_map_type_filter::CopyFrom(const Trail_map_type_filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.map_type_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_map_type_filter::IsInitialized() const {
  return true;
}

void Trail_map_type_filter::InternalSwap(Trail_map_type_filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trail_map_type_filter, wvw_lounge_map_)
      + sizeof(Trail_map_type_filter::wvw_lounge_map_)
      - PROTOBUF_FIELD_OFFSET(Trail_map_type_filter, unknown_map_)>(
          reinterpret_cast<char*>(&unknown_map_),
          reinterpret_cast<char*>(&other->unknown_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_map_type_filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_mount_filter::InitAsDefaultInstance() {
}
class Trail_mount_filter::_Internal {
 public:
};

Trail_mount_filter::Trail_mount_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.mount_filter)
}
Trail_mount_filter::Trail_mount_filter(const Trail_mount_filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&raptor_, &from.raptor_,
    static_cast<size_t>(reinterpret_cast<char*>(&seige_turtle_) -
    reinterpret_cast<char*>(&raptor_)) + sizeof(seige_turtle_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.mount_filter)
}

void Trail_mount_filter::SharedCtor() {
  ::memset(&raptor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seige_turtle_) -
      reinterpret_cast<char*>(&raptor_)) + sizeof(seige_turtle_));
}

Trail_mount_filter::~Trail_mount_filter() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.mount_filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_mount_filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trail_mount_filter::ArenaDtor(void* object) {
  Trail_mount_filter* _this = reinterpret_cast< Trail_mount_filter* >(object);
  (void)_this;
}
void Trail_mount_filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_mount_filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_mount_filter& Trail_mount_filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_mount_filter_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_mount_filter::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.mount_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&raptor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seige_turtle_) -
      reinterpret_cast<char*>(&raptor_)) + sizeof(seige_turtle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_mount_filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool raptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          raptor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool springer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          springer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skimmer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skimmer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool jackal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          jackal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool griffon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          griffon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool roller_beetle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          roller_beetle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warclaw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          warclaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skyscalee = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          skyscalee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skiff = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          skiff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool seige_turtle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          seige_turtle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_mount_filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.mount_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool raptor = 1;
  if (this->raptor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_raptor(), target);
  }

  // bool springer = 2;
  if (this->springer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_springer(), target);
  }

  // bool skimmer = 3;
  if (this->skimmer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_skimmer(), target);
  }

  // bool jackal = 4;
  if (this->jackal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_jackal(), target);
  }

  // bool griffon = 5;
  if (this->griffon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_griffon(), target);
  }

  // bool roller_beetle = 6;
  if (this->roller_beetle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_roller_beetle(), target);
  }

  // bool warclaw = 7;
  if (this->warclaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_warclaw(), target);
  }

  // bool skyscalee = 8;
  if (this->skyscalee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_skyscalee(), target);
  }

  // bool skiff = 9;
  if (this->skiff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_skiff(), target);
  }

  // bool seige_turtle = 10;
  if (this->seige_turtle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_seige_turtle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.mount_filter)
  return target;
}

size_t Trail_mount_filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.mount_filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool raptor = 1;
  if (this->raptor() != 0) {
    total_size += 1 + 1;
  }

  // bool springer = 2;
  if (this->springer() != 0) {
    total_size += 1 + 1;
  }

  // bool skimmer = 3;
  if (this->skimmer() != 0) {
    total_size += 1 + 1;
  }

  // bool jackal = 4;
  if (this->jackal() != 0) {
    total_size += 1 + 1;
  }

  // bool griffon = 5;
  if (this->griffon() != 0) {
    total_size += 1 + 1;
  }

  // bool roller_beetle = 6;
  if (this->roller_beetle() != 0) {
    total_size += 1 + 1;
  }

  // bool warclaw = 7;
  if (this->warclaw() != 0) {
    total_size += 1 + 1;
  }

  // bool skyscalee = 8;
  if (this->skyscalee() != 0) {
    total_size += 1 + 1;
  }

  // bool skiff = 9;
  if (this->skiff() != 0) {
    total_size += 1 + 1;
  }

  // bool seige_turtle = 10;
  if (this->seige_turtle() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_mount_filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.mount_filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_mount_filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_mount_filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.mount_filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.mount_filter)
    MergeFrom(*source);
  }
}

void Trail_mount_filter::MergeFrom(const Trail_mount_filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.mount_filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raptor() != 0) {
    _internal_set_raptor(from._internal_raptor());
  }
  if (from.springer() != 0) {
    _internal_set_springer(from._internal_springer());
  }
  if (from.skimmer() != 0) {
    _internal_set_skimmer(from._internal_skimmer());
  }
  if (from.jackal() != 0) {
    _internal_set_jackal(from._internal_jackal());
  }
  if (from.griffon() != 0) {
    _internal_set_griffon(from._internal_griffon());
  }
  if (from.roller_beetle() != 0) {
    _internal_set_roller_beetle(from._internal_roller_beetle());
  }
  if (from.warclaw() != 0) {
    _internal_set_warclaw(from._internal_warclaw());
  }
  if (from.skyscalee() != 0) {
    _internal_set_skyscalee(from._internal_skyscalee());
  }
  if (from.skiff() != 0) {
    _internal_set_skiff(from._internal_skiff());
  }
  if (from.seige_turtle() != 0) {
    _internal_set_seige_turtle(from._internal_seige_turtle());
  }
}

void Trail_mount_filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.mount_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_mount_filter::CopyFrom(const Trail_mount_filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.mount_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_mount_filter::IsInitialized() const {
  return true;
}

void Trail_mount_filter::InternalSwap(Trail_mount_filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trail_mount_filter, seige_turtle_)
      + sizeof(Trail_mount_filter::seige_turtle_)
      - PROTOBUF_FIELD_OFFSET(Trail_mount_filter, raptor_)>(
          reinterpret_cast<char*>(&raptor_),
          reinterpret_cast<char*>(&other->raptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_mount_filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_profession_filter::InitAsDefaultInstance() {
}
class Trail_profession_filter::_Internal {
 public:
};

Trail_profession_filter::Trail_profession_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.profession_filter)
}
Trail_profession_filter::Trail_profession_filter(const Trail_profession_filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guardian_, &from.guardian_,
    static_cast<size_t>(reinterpret_cast<char*>(&revenantnt_) -
    reinterpret_cast<char*>(&guardian_)) + sizeof(revenantnt_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.profession_filter)
}

void Trail_profession_filter::SharedCtor() {
  ::memset(&guardian_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revenantnt_) -
      reinterpret_cast<char*>(&guardian_)) + sizeof(revenantnt_));
}

Trail_profession_filter::~Trail_profession_filter() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.profession_filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_profession_filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trail_profession_filter::ArenaDtor(void* object) {
  Trail_profession_filter* _this = reinterpret_cast< Trail_profession_filter* >(object);
  (void)_this;
}
void Trail_profession_filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_profession_filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_profession_filter& Trail_profession_filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_profession_filter_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_profession_filter::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.profession_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guardian_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revenantnt_) -
      reinterpret_cast<char*>(&guardian_)) + sizeof(revenantnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_profession_filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool guardian = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guardian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          warrior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          engineer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ranger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          thief_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          elementalist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          mesmer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          necromancer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenantnt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          revenantnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_profession_filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.profession_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool guardian = 1;
  if (this->guardian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_guardian(), target);
  }

  // bool warrior = 2;
  if (this->warrior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_warrior(), target);
  }

  // bool engineer = 3;
  if (this->engineer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_engineer(), target);
  }

  // bool ranger = 4;
  if (this->ranger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ranger(), target);
  }

  // bool thief = 5;
  if (this->thief() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_thief(), target);
  }

  // bool elementalist = 6;
  if (this->elementalist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_elementalist(), target);
  }

  // bool mesmer = 7;
  if (this->mesmer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_mesmer(), target);
  }

  // bool necromancer = 8;
  if (this->necromancer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_necromancer(), target);
  }

  // bool revenantnt = 9;
  if (this->revenantnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_revenantnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.profession_filter)
  return target;
}

size_t Trail_profession_filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.profession_filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool guardian = 1;
  if (this->guardian() != 0) {
    total_size += 1 + 1;
  }

  // bool warrior = 2;
  if (this->warrior() != 0) {
    total_size += 1 + 1;
  }

  // bool engineer = 3;
  if (this->engineer() != 0) {
    total_size += 1 + 1;
  }

  // bool ranger = 4;
  if (this->ranger() != 0) {
    total_size += 1 + 1;
  }

  // bool thief = 5;
  if (this->thief() != 0) {
    total_size += 1 + 1;
  }

  // bool elementalist = 6;
  if (this->elementalist() != 0) {
    total_size += 1 + 1;
  }

  // bool mesmer = 7;
  if (this->mesmer() != 0) {
    total_size += 1 + 1;
  }

  // bool necromancer = 8;
  if (this->necromancer() != 0) {
    total_size += 1 + 1;
  }

  // bool revenantnt = 9;
  if (this->revenantnt() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_profession_filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.profession_filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_profession_filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_profession_filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.profession_filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.profession_filter)
    MergeFrom(*source);
  }
}

void Trail_profession_filter::MergeFrom(const Trail_profession_filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.profession_filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guardian() != 0) {
    _internal_set_guardian(from._internal_guardian());
  }
  if (from.warrior() != 0) {
    _internal_set_warrior(from._internal_warrior());
  }
  if (from.engineer() != 0) {
    _internal_set_engineer(from._internal_engineer());
  }
  if (from.ranger() != 0) {
    _internal_set_ranger(from._internal_ranger());
  }
  if (from.thief() != 0) {
    _internal_set_thief(from._internal_thief());
  }
  if (from.elementalist() != 0) {
    _internal_set_elementalist(from._internal_elementalist());
  }
  if (from.mesmer() != 0) {
    _internal_set_mesmer(from._internal_mesmer());
  }
  if (from.necromancer() != 0) {
    _internal_set_necromancer(from._internal_necromancer());
  }
  if (from.revenantnt() != 0) {
    _internal_set_revenantnt(from._internal_revenantnt());
  }
}

void Trail_profession_filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.profession_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_profession_filter::CopyFrom(const Trail_profession_filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.profession_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_profession_filter::IsInitialized() const {
  return true;
}

void Trail_profession_filter::InternalSwap(Trail_profession_filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trail_profession_filter, revenantnt_)
      + sizeof(Trail_profession_filter::revenantnt_)
      - PROTOBUF_FIELD_OFFSET(Trail_profession_filter, guardian_)>(
          reinterpret_cast<char*>(&guardian_),
          reinterpret_cast<char*>(&other->guardian_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_profession_filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_specialization_filter::InitAsDefaultInstance() {
}
class Trail_specialization_filter::_Internal {
 public:
};

Trail_specialization_filter::Trail_specialization_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.specialization_filter)
}
Trail_specialization_filter::Trail_specialization_filter(const Trail_specialization_filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ranger_wilderness_survival_, &from.ranger_wilderness_survival_,
    static_cast<size_t>(reinterpret_cast<char*>(&ranger_untamed_) -
    reinterpret_cast<char*>(&ranger_wilderness_survival_)) + sizeof(ranger_untamed_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.specialization_filter)
}

void Trail_specialization_filter::SharedCtor() {
  ::memset(&ranger_wilderness_survival_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ranger_untamed_) -
      reinterpret_cast<char*>(&ranger_wilderness_survival_)) + sizeof(ranger_untamed_));
}

Trail_specialization_filter::~Trail_specialization_filter() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.specialization_filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_specialization_filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trail_specialization_filter::ArenaDtor(void* object) {
  Trail_specialization_filter* _this = reinterpret_cast< Trail_specialization_filter* >(object);
  (void)_this;
}
void Trail_specialization_filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_specialization_filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_specialization_filter& Trail_specialization_filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_specialization_filter_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_specialization_filter::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.specialization_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ranger_wilderness_survival_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ranger_untamed_) -
      reinterpret_cast<char*>(&ranger_wilderness_survival_)) + sizeof(ranger_untamed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_specialization_filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool mesmer_dueling = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mesmer_dueling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_death_magic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          necromancer_death_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_invocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          revenant_invocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_strength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          warrior_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_druid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ranger_druid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_explosives = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          engineer_explosives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_daredevil = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          thief_daredevil_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_marksmanship = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ranger_marksmanship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_retribution = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          revenant_retribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_domination = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          mesmer_domination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_tactics = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          warrior_tactics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_salvation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          revenant_salvation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_valor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          guardian_valor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_corruption = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          revenant_corruption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_devastation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          revenant_devastation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_radiance = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          guardian_radiance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_water = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          elementalist_water_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_berserker = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          warrior_berserker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_blood_magic = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          necromancer_blood_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_shadow_arts = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          thief_shadow_arts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_tools = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          engineer_tools_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_defense = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          warrior_defense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_inspiration = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          mesmer_inspiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_illusions = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          mesmer_illusions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_nature_magic = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ranger_nature_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_earth = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          elementalist_earth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_dragonhunter = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          guardian_dragonhunter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_deadly_arts = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          thief_deadly_arts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_alchemy = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          engineer_alchemy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_skirmishing = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ranger_skirmishing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_fire = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          elementalist_fire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_beastmastery = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ranger_beastmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_wilderness_survival = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ranger_wilderness_survival_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_reaper = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          necromancer_reaper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_critical_strikes = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          thief_critical_strikes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_arms = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          warrior_arms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_arcane = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          elementalist_arcane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_firearms = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          engineer_firearms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_curses = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          necromancer_curses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_chronomancer = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mesmer_chronomancer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_air = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          elementalist_air_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_zeal = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          guardian_zeal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_scrapper = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          engineer_scrapper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_trickery = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          thief_trickery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_chaos = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          mesmer_chaos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_virtues = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          guardian_virtues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_inventions = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          engineer_inventions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_tempest = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          elementalist_tempest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_honor = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          guardian_honor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_soul_reaping = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          necromancer_soul_reaping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_discipline = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          warrior_discipline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_herald = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          revenant_herald_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_spite = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          necromancer_spite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_acrobatics = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          thief_acrobatics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_soulbeast = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ranger_soulbeast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elementalist_weaver = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          elementalist_weaver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_holosmith = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          engineer_holosmith_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_deadeye = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          thief_deadeye_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_mirage = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          mesmer_mirage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_scourge = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          necromancer_scourge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_spellbreaker = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          warrior_spellbreaker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_firebrand = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          guardian_firebrand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_renegade = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          revenant_renegade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool necromancer_harbinger = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          necromancer_harbinger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guardian_willbender = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guardian_willbender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mesmer_virtuoso = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mesmer_virtuoso_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool elmentalist_catalyst = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          elmentalist_catalyst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warrior_bladesworn = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          warrior_bladesworn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revenant_vindicator = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          revenant_vindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engineer_mechanist = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          engineer_mechanist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool thief_specter = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          thief_specter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ranger_untamed = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ranger_untamed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_specialization_filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.specialization_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool mesmer_dueling = 1;
  if (this->mesmer_dueling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_mesmer_dueling(), target);
  }

  // bool necromancer_death_magic = 2;
  if (this->necromancer_death_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_necromancer_death_magic(), target);
  }

  // bool revenant_invocation = 3;
  if (this->revenant_invocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_revenant_invocation(), target);
  }

  // bool warrior_strength = 4;
  if (this->warrior_strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_warrior_strength(), target);
  }

  // bool ranger_druid = 5;
  if (this->ranger_druid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ranger_druid(), target);
  }

  // bool engineer_explosives = 6;
  if (this->engineer_explosives() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_engineer_explosives(), target);
  }

  // bool thief_daredevil = 7;
  if (this->thief_daredevil() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_thief_daredevil(), target);
  }

  // bool ranger_marksmanship = 8;
  if (this->ranger_marksmanship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_ranger_marksmanship(), target);
  }

  // bool revenant_retribution = 9;
  if (this->revenant_retribution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_revenant_retribution(), target);
  }

  // bool mesmer_domination = 10;
  if (this->mesmer_domination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_mesmer_domination(), target);
  }

  // bool warrior_tactics = 11;
  if (this->warrior_tactics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_warrior_tactics(), target);
  }

  // bool revenant_salvation = 12;
  if (this->revenant_salvation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_revenant_salvation(), target);
  }

  // bool guardian_valor = 13;
  if (this->guardian_valor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_guardian_valor(), target);
  }

  // bool revenant_corruption = 14;
  if (this->revenant_corruption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_revenant_corruption(), target);
  }

  // bool revenant_devastation = 15;
  if (this->revenant_devastation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_revenant_devastation(), target);
  }

  // bool guardian_radiance = 16;
  if (this->guardian_radiance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_guardian_radiance(), target);
  }

  // bool elementalist_water = 17;
  if (this->elementalist_water() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_elementalist_water(), target);
  }

  // bool warrior_berserker = 18;
  if (this->warrior_berserker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_warrior_berserker(), target);
  }

  // bool necromancer_blood_magic = 19;
  if (this->necromancer_blood_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_necromancer_blood_magic(), target);
  }

  // bool thief_shadow_arts = 20;
  if (this->thief_shadow_arts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_thief_shadow_arts(), target);
  }

  // bool engineer_tools = 21;
  if (this->engineer_tools() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_engineer_tools(), target);
  }

  // bool warrior_defense = 22;
  if (this->warrior_defense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_warrior_defense(), target);
  }

  // bool mesmer_inspiration = 23;
  if (this->mesmer_inspiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_mesmer_inspiration(), target);
  }

  // bool mesmer_illusions = 24;
  if (this->mesmer_illusions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_mesmer_illusions(), target);
  }

  // bool ranger_nature_magic = 25;
  if (this->ranger_nature_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_ranger_nature_magic(), target);
  }

  // bool elementalist_earth = 26;
  if (this->elementalist_earth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_elementalist_earth(), target);
  }

  // bool guardian_dragonhunter = 27;
  if (this->guardian_dragonhunter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_guardian_dragonhunter(), target);
  }

  // bool thief_deadly_arts = 28;
  if (this->thief_deadly_arts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_thief_deadly_arts(), target);
  }

  // bool engineer_alchemy = 29;
  if (this->engineer_alchemy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_engineer_alchemy(), target);
  }

  // bool ranger_skirmishing = 30;
  if (this->ranger_skirmishing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_ranger_skirmishing(), target);
  }

  // bool elementalist_fire = 31;
  if (this->elementalist_fire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_elementalist_fire(), target);
  }

  // bool ranger_beastmastery = 32;
  if (this->ranger_beastmastery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_ranger_beastmastery(), target);
  }

  // bool ranger_wilderness_survival = 33;
  if (this->ranger_wilderness_survival() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_ranger_wilderness_survival(), target);
  }

  // bool necromancer_reaper = 34;
  if (this->necromancer_reaper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_necromancer_reaper(), target);
  }

  // bool thief_critical_strikes = 35;
  if (this->thief_critical_strikes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_thief_critical_strikes(), target);
  }

  // bool warrior_arms = 36;
  if (this->warrior_arms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_warrior_arms(), target);
  }

  // bool elementalist_arcane = 37;
  if (this->elementalist_arcane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_elementalist_arcane(), target);
  }

  // bool engineer_firearms = 38;
  if (this->engineer_firearms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_engineer_firearms(), target);
  }

  // bool necromancer_curses = 39;
  if (this->necromancer_curses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_necromancer_curses(), target);
  }

  // bool mesmer_chronomancer = 40;
  if (this->mesmer_chronomancer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_mesmer_chronomancer(), target);
  }

  // bool elementalist_air = 41;
  if (this->elementalist_air() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_elementalist_air(), target);
  }

  // bool guardian_zeal = 42;
  if (this->guardian_zeal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_guardian_zeal(), target);
  }

  // bool engineer_scrapper = 43;
  if (this->engineer_scrapper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_engineer_scrapper(), target);
  }

  // bool thief_trickery = 44;
  if (this->thief_trickery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_thief_trickery(), target);
  }

  // bool mesmer_chaos = 45;
  if (this->mesmer_chaos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_mesmer_chaos(), target);
  }

  // bool guardian_virtues = 46;
  if (this->guardian_virtues() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_guardian_virtues(), target);
  }

  // bool engineer_inventions = 47;
  if (this->engineer_inventions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_engineer_inventions(), target);
  }

  // bool elementalist_tempest = 48;
  if (this->elementalist_tempest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(48, this->_internal_elementalist_tempest(), target);
  }

  // bool guardian_honor = 49;
  if (this->guardian_honor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(49, this->_internal_guardian_honor(), target);
  }

  // bool necromancer_soul_reaping = 50;
  if (this->necromancer_soul_reaping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_necromancer_soul_reaping(), target);
  }

  // bool warrior_discipline = 51;
  if (this->warrior_discipline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_warrior_discipline(), target);
  }

  // bool revenant_herald = 52;
  if (this->revenant_herald() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(52, this->_internal_revenant_herald(), target);
  }

  // bool necromancer_spite = 53;
  if (this->necromancer_spite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(53, this->_internal_necromancer_spite(), target);
  }

  // bool thief_acrobatics = 54;
  if (this->thief_acrobatics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(54, this->_internal_thief_acrobatics(), target);
  }

  // bool ranger_soulbeast = 55;
  if (this->ranger_soulbeast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(55, this->_internal_ranger_soulbeast(), target);
  }

  // bool elementalist_weaver = 56;
  if (this->elementalist_weaver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_elementalist_weaver(), target);
  }

  // bool engineer_holosmith = 57;
  if (this->engineer_holosmith() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_engineer_holosmith(), target);
  }

  // bool thief_deadeye = 58;
  if (this->thief_deadeye() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_thief_deadeye(), target);
  }

  // bool mesmer_mirage = 59;
  if (this->mesmer_mirage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_mesmer_mirage(), target);
  }

  // bool necromancer_scourge = 60;
  if (this->necromancer_scourge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_necromancer_scourge(), target);
  }

  // bool warrior_spellbreaker = 61;
  if (this->warrior_spellbreaker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_warrior_spellbreaker(), target);
  }

  // bool guardian_firebrand = 62;
  if (this->guardian_firebrand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(62, this->_internal_guardian_firebrand(), target);
  }

  // bool revenant_renegade = 63;
  if (this->revenant_renegade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(63, this->_internal_revenant_renegade(), target);
  }

  // bool necromancer_harbinger = 64;
  if (this->necromancer_harbinger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(64, this->_internal_necromancer_harbinger(), target);
  }

  // bool guardian_willbender = 65;
  if (this->guardian_willbender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_guardian_willbender(), target);
  }

  // bool mesmer_virtuoso = 66;
  if (this->mesmer_virtuoso() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(66, this->_internal_mesmer_virtuoso(), target);
  }

  // bool elmentalist_catalyst = 67;
  if (this->elmentalist_catalyst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(67, this->_internal_elmentalist_catalyst(), target);
  }

  // bool warrior_bladesworn = 68;
  if (this->warrior_bladesworn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(68, this->_internal_warrior_bladesworn(), target);
  }

  // bool revenant_vindicator = 69;
  if (this->revenant_vindicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(69, this->_internal_revenant_vindicator(), target);
  }

  // bool engineer_mechanist = 70;
  if (this->engineer_mechanist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(70, this->_internal_engineer_mechanist(), target);
  }

  // bool thief_specter = 71;
  if (this->thief_specter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(71, this->_internal_thief_specter(), target);
  }

  // bool ranger_untamed = 72;
  if (this->ranger_untamed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(72, this->_internal_ranger_untamed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.specialization_filter)
  return target;
}

size_t Trail_specialization_filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.specialization_filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ranger_wilderness_survival = 33;
  if (this->ranger_wilderness_survival() != 0) {
    total_size += 2 + 1;
  }

  // bool revenant_corruption = 14;
  if (this->revenant_corruption() != 0) {
    total_size += 1 + 1;
  }

  // bool revenant_devastation = 15;
  if (this->revenant_devastation() != 0) {
    total_size += 1 + 1;
  }

  // bool revenant_invocation = 3;
  if (this->revenant_invocation() != 0) {
    total_size += 1 + 1;
  }

  // bool mesmer_dueling = 1;
  if (this->mesmer_dueling() != 0) {
    total_size += 1 + 1;
  }

  // bool mesmer_illusions = 24;
  if (this->mesmer_illusions() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_inspiration = 23;
  if (this->mesmer_inspiration() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_blood_magic = 19;
  if (this->necromancer_blood_magic() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_defense = 22;
  if (this->warrior_defense() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_discipline = 51;
  if (this->warrior_discipline() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_strength = 4;
  if (this->warrior_strength() != 0) {
    total_size += 1 + 1;
  }

  // bool warrior_tactics = 11;
  if (this->warrior_tactics() != 0) {
    total_size += 1 + 1;
  }

  // bool ranger_beastmastery = 32;
  if (this->ranger_beastmastery() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_marksmanship = 8;
  if (this->ranger_marksmanship() != 0) {
    total_size += 1 + 1;
  }

  // bool ranger_nature_magic = 25;
  if (this->ranger_nature_magic() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_skirmishing = 30;
  if (this->ranger_skirmishing() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_reaper = 34;
  if (this->necromancer_reaper() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_druid = 5;
  if (this->ranger_druid() != 0) {
    total_size += 1 + 1;
  }

  // bool revenant_herald = 52;
  if (this->revenant_herald() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_daredevil = 7;
  if (this->thief_daredevil() != 0) {
    total_size += 1 + 1;
  }

  // bool engineer_tools = 21;
  if (this->engineer_tools() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_honor = 49;
  if (this->guardian_honor() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_radiance = 16;
  if (this->guardian_radiance() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_valor = 13;
  if (this->guardian_valor() != 0) {
    total_size += 1 + 1;
  }

  // bool revenant_retribution = 9;
  if (this->revenant_retribution() != 0) {
    total_size += 1 + 1;
  }

  // bool revenant_salvation = 12;
  if (this->revenant_salvation() != 0) {
    total_size += 1 + 1;
  }

  // bool thief_acrobatics = 54;
  if (this->thief_acrobatics() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_critical_strikes = 35;
  if (this->thief_critical_strikes() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_arcane = 37;
  if (this->elementalist_arcane() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_earth = 26;
  if (this->elementalist_earth() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_fire = 31;
  if (this->elementalist_fire() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_water = 17;
  if (this->elementalist_water() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_alchemy = 29;
  if (this->engineer_alchemy() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_explosives = 6;
  if (this->engineer_explosives() != 0) {
    total_size += 1 + 1;
  }

  // bool engineer_firearms = 38;
  if (this->engineer_firearms() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_inventions = 47;
  if (this->engineer_inventions() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_deadly_arts = 28;
  if (this->thief_deadly_arts() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_shadow_arts = 20;
  if (this->thief_shadow_arts() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_trickery = 44;
  if (this->thief_trickery() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_arms = 36;
  if (this->warrior_arms() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_virtues = 46;
  if (this->guardian_virtues() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_zeal = 42;
  if (this->guardian_zeal() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_chaos = 45;
  if (this->mesmer_chaos() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_domination = 10;
  if (this->mesmer_domination() != 0) {
    total_size += 1 + 1;
  }

  // bool necromancer_curses = 39;
  if (this->necromancer_curses() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_death_magic = 2;
  if (this->necromancer_death_magic() != 0) {
    total_size += 1 + 1;
  }

  // bool necromancer_soul_reaping = 50;
  if (this->necromancer_soul_reaping() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_spite = 53;
  if (this->necromancer_spite() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_tempest = 48;
  if (this->elementalist_tempest() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_scrapper = 43;
  if (this->engineer_scrapper() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_dragonhunter = 27;
  if (this->guardian_dragonhunter() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_chronomancer = 40;
  if (this->mesmer_chronomancer() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_berserker = 18;
  if (this->warrior_berserker() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_weaver = 56;
  if (this->elementalist_weaver() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_holosmith = 57;
  if (this->engineer_holosmith() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_firebrand = 62;
  if (this->guardian_firebrand() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_mirage = 59;
  if (this->mesmer_mirage() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_scourge = 60;
  if (this->necromancer_scourge() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_soulbeast = 55;
  if (this->ranger_soulbeast() != 0) {
    total_size += 2 + 1;
  }

  // bool revenant_renegade = 63;
  if (this->revenant_renegade() != 0) {
    total_size += 2 + 1;
  }

  // bool revenant_vindicator = 69;
  if (this->revenant_vindicator() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_specter = 71;
  if (this->thief_specter() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_bladesworn = 68;
  if (this->warrior_bladesworn() != 0) {
    total_size += 2 + 1;
  }

  // bool elementalist_air = 41;
  if (this->elementalist_air() != 0) {
    total_size += 2 + 1;
  }

  // bool thief_deadeye = 58;
  if (this->thief_deadeye() != 0) {
    total_size += 2 + 1;
  }

  // bool warrior_spellbreaker = 61;
  if (this->warrior_spellbreaker() != 0) {
    total_size += 2 + 1;
  }

  // bool elmentalist_catalyst = 67;
  if (this->elmentalist_catalyst() != 0) {
    total_size += 2 + 1;
  }

  // bool engineer_mechanist = 70;
  if (this->engineer_mechanist() != 0) {
    total_size += 2 + 1;
  }

  // bool guardian_willbender = 65;
  if (this->guardian_willbender() != 0) {
    total_size += 2 + 1;
  }

  // bool mesmer_virtuoso = 66;
  if (this->mesmer_virtuoso() != 0) {
    total_size += 2 + 1;
  }

  // bool necromancer_harbinger = 64;
  if (this->necromancer_harbinger() != 0) {
    total_size += 2 + 1;
  }

  // bool ranger_untamed = 72;
  if (this->ranger_untamed() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_specialization_filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.specialization_filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_specialization_filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_specialization_filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.specialization_filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.specialization_filter)
    MergeFrom(*source);
  }
}

void Trail_specialization_filter::MergeFrom(const Trail_specialization_filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.specialization_filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ranger_wilderness_survival() != 0) {
    _internal_set_ranger_wilderness_survival(from._internal_ranger_wilderness_survival());
  }
  if (from.revenant_corruption() != 0) {
    _internal_set_revenant_corruption(from._internal_revenant_corruption());
  }
  if (from.revenant_devastation() != 0) {
    _internal_set_revenant_devastation(from._internal_revenant_devastation());
  }
  if (from.revenant_invocation() != 0) {
    _internal_set_revenant_invocation(from._internal_revenant_invocation());
  }
  if (from.mesmer_dueling() != 0) {
    _internal_set_mesmer_dueling(from._internal_mesmer_dueling());
  }
  if (from.mesmer_illusions() != 0) {
    _internal_set_mesmer_illusions(from._internal_mesmer_illusions());
  }
  if (from.mesmer_inspiration() != 0) {
    _internal_set_mesmer_inspiration(from._internal_mesmer_inspiration());
  }
  if (from.necromancer_blood_magic() != 0) {
    _internal_set_necromancer_blood_magic(from._internal_necromancer_blood_magic());
  }
  if (from.warrior_defense() != 0) {
    _internal_set_warrior_defense(from._internal_warrior_defense());
  }
  if (from.warrior_discipline() != 0) {
    _internal_set_warrior_discipline(from._internal_warrior_discipline());
  }
  if (from.warrior_strength() != 0) {
    _internal_set_warrior_strength(from._internal_warrior_strength());
  }
  if (from.warrior_tactics() != 0) {
    _internal_set_warrior_tactics(from._internal_warrior_tactics());
  }
  if (from.ranger_beastmastery() != 0) {
    _internal_set_ranger_beastmastery(from._internal_ranger_beastmastery());
  }
  if (from.ranger_marksmanship() != 0) {
    _internal_set_ranger_marksmanship(from._internal_ranger_marksmanship());
  }
  if (from.ranger_nature_magic() != 0) {
    _internal_set_ranger_nature_magic(from._internal_ranger_nature_magic());
  }
  if (from.ranger_skirmishing() != 0) {
    _internal_set_ranger_skirmishing(from._internal_ranger_skirmishing());
  }
  if (from.necromancer_reaper() != 0) {
    _internal_set_necromancer_reaper(from._internal_necromancer_reaper());
  }
  if (from.ranger_druid() != 0) {
    _internal_set_ranger_druid(from._internal_ranger_druid());
  }
  if (from.revenant_herald() != 0) {
    _internal_set_revenant_herald(from._internal_revenant_herald());
  }
  if (from.thief_daredevil() != 0) {
    _internal_set_thief_daredevil(from._internal_thief_daredevil());
  }
  if (from.engineer_tools() != 0) {
    _internal_set_engineer_tools(from._internal_engineer_tools());
  }
  if (from.guardian_honor() != 0) {
    _internal_set_guardian_honor(from._internal_guardian_honor());
  }
  if (from.guardian_radiance() != 0) {
    _internal_set_guardian_radiance(from._internal_guardian_radiance());
  }
  if (from.guardian_valor() != 0) {
    _internal_set_guardian_valor(from._internal_guardian_valor());
  }
  if (from.revenant_retribution() != 0) {
    _internal_set_revenant_retribution(from._internal_revenant_retribution());
  }
  if (from.revenant_salvation() != 0) {
    _internal_set_revenant_salvation(from._internal_revenant_salvation());
  }
  if (from.thief_acrobatics() != 0) {
    _internal_set_thief_acrobatics(from._internal_thief_acrobatics());
  }
  if (from.thief_critical_strikes() != 0) {
    _internal_set_thief_critical_strikes(from._internal_thief_critical_strikes());
  }
  if (from.elementalist_arcane() != 0) {
    _internal_set_elementalist_arcane(from._internal_elementalist_arcane());
  }
  if (from.elementalist_earth() != 0) {
    _internal_set_elementalist_earth(from._internal_elementalist_earth());
  }
  if (from.elementalist_fire() != 0) {
    _internal_set_elementalist_fire(from._internal_elementalist_fire());
  }
  if (from.elementalist_water() != 0) {
    _internal_set_elementalist_water(from._internal_elementalist_water());
  }
  if (from.engineer_alchemy() != 0) {
    _internal_set_engineer_alchemy(from._internal_engineer_alchemy());
  }
  if (from.engineer_explosives() != 0) {
    _internal_set_engineer_explosives(from._internal_engineer_explosives());
  }
  if (from.engineer_firearms() != 0) {
    _internal_set_engineer_firearms(from._internal_engineer_firearms());
  }
  if (from.engineer_inventions() != 0) {
    _internal_set_engineer_inventions(from._internal_engineer_inventions());
  }
  if (from.thief_deadly_arts() != 0) {
    _internal_set_thief_deadly_arts(from._internal_thief_deadly_arts());
  }
  if (from.thief_shadow_arts() != 0) {
    _internal_set_thief_shadow_arts(from._internal_thief_shadow_arts());
  }
  if (from.thief_trickery() != 0) {
    _internal_set_thief_trickery(from._internal_thief_trickery());
  }
  if (from.warrior_arms() != 0) {
    _internal_set_warrior_arms(from._internal_warrior_arms());
  }
  if (from.guardian_virtues() != 0) {
    _internal_set_guardian_virtues(from._internal_guardian_virtues());
  }
  if (from.guardian_zeal() != 0) {
    _internal_set_guardian_zeal(from._internal_guardian_zeal());
  }
  if (from.mesmer_chaos() != 0) {
    _internal_set_mesmer_chaos(from._internal_mesmer_chaos());
  }
  if (from.mesmer_domination() != 0) {
    _internal_set_mesmer_domination(from._internal_mesmer_domination());
  }
  if (from.necromancer_curses() != 0) {
    _internal_set_necromancer_curses(from._internal_necromancer_curses());
  }
  if (from.necromancer_death_magic() != 0) {
    _internal_set_necromancer_death_magic(from._internal_necromancer_death_magic());
  }
  if (from.necromancer_soul_reaping() != 0) {
    _internal_set_necromancer_soul_reaping(from._internal_necromancer_soul_reaping());
  }
  if (from.necromancer_spite() != 0) {
    _internal_set_necromancer_spite(from._internal_necromancer_spite());
  }
  if (from.elementalist_tempest() != 0) {
    _internal_set_elementalist_tempest(from._internal_elementalist_tempest());
  }
  if (from.engineer_scrapper() != 0) {
    _internal_set_engineer_scrapper(from._internal_engineer_scrapper());
  }
  if (from.guardian_dragonhunter() != 0) {
    _internal_set_guardian_dragonhunter(from._internal_guardian_dragonhunter());
  }
  if (from.mesmer_chronomancer() != 0) {
    _internal_set_mesmer_chronomancer(from._internal_mesmer_chronomancer());
  }
  if (from.warrior_berserker() != 0) {
    _internal_set_warrior_berserker(from._internal_warrior_berserker());
  }
  if (from.elementalist_weaver() != 0) {
    _internal_set_elementalist_weaver(from._internal_elementalist_weaver());
  }
  if (from.engineer_holosmith() != 0) {
    _internal_set_engineer_holosmith(from._internal_engineer_holosmith());
  }
  if (from.guardian_firebrand() != 0) {
    _internal_set_guardian_firebrand(from._internal_guardian_firebrand());
  }
  if (from.mesmer_mirage() != 0) {
    _internal_set_mesmer_mirage(from._internal_mesmer_mirage());
  }
  if (from.necromancer_scourge() != 0) {
    _internal_set_necromancer_scourge(from._internal_necromancer_scourge());
  }
  if (from.ranger_soulbeast() != 0) {
    _internal_set_ranger_soulbeast(from._internal_ranger_soulbeast());
  }
  if (from.revenant_renegade() != 0) {
    _internal_set_revenant_renegade(from._internal_revenant_renegade());
  }
  if (from.revenant_vindicator() != 0) {
    _internal_set_revenant_vindicator(from._internal_revenant_vindicator());
  }
  if (from.thief_specter() != 0) {
    _internal_set_thief_specter(from._internal_thief_specter());
  }
  if (from.warrior_bladesworn() != 0) {
    _internal_set_warrior_bladesworn(from._internal_warrior_bladesworn());
  }
  if (from.elementalist_air() != 0) {
    _internal_set_elementalist_air(from._internal_elementalist_air());
  }
  if (from.thief_deadeye() != 0) {
    _internal_set_thief_deadeye(from._internal_thief_deadeye());
  }
  if (from.warrior_spellbreaker() != 0) {
    _internal_set_warrior_spellbreaker(from._internal_warrior_spellbreaker());
  }
  if (from.elmentalist_catalyst() != 0) {
    _internal_set_elmentalist_catalyst(from._internal_elmentalist_catalyst());
  }
  if (from.engineer_mechanist() != 0) {
    _internal_set_engineer_mechanist(from._internal_engineer_mechanist());
  }
  if (from.guardian_willbender() != 0) {
    _internal_set_guardian_willbender(from._internal_guardian_willbender());
  }
  if (from.mesmer_virtuoso() != 0) {
    _internal_set_mesmer_virtuoso(from._internal_mesmer_virtuoso());
  }
  if (from.necromancer_harbinger() != 0) {
    _internal_set_necromancer_harbinger(from._internal_necromancer_harbinger());
  }
  if (from.ranger_untamed() != 0) {
    _internal_set_ranger_untamed(from._internal_ranger_untamed());
  }
}

void Trail_specialization_filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.specialization_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_specialization_filter::CopyFrom(const Trail_specialization_filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.specialization_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_specialization_filter::IsInitialized() const {
  return true;
}

void Trail_specialization_filter::InternalSwap(Trail_specialization_filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trail_specialization_filter, ranger_untamed_)
      + sizeof(Trail_specialization_filter::ranger_untamed_)
      - PROTOBUF_FIELD_OFFSET(Trail_specialization_filter, ranger_wilderness_survival_)>(
          reinterpret_cast<char*>(&ranger_wilderness_survival_),
          reinterpret_cast<char*>(&other->ranger_wilderness_survival_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_specialization_filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_species_filter::InitAsDefaultInstance() {
}
class Trail_species_filter::_Internal {
 public:
};

Trail_species_filter::Trail_species_filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.species_filter)
}
Trail_species_filter::Trail_species_filter(const Trail_species_filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asura_, &from.asura_,
    static_cast<size_t>(reinterpret_cast<char*>(&sylvari_) -
    reinterpret_cast<char*>(&asura_)) + sizeof(sylvari_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.species_filter)
}

void Trail_species_filter::SharedCtor() {
  ::memset(&asura_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sylvari_) -
      reinterpret_cast<char*>(&asura_)) + sizeof(sylvari_));
}

Trail_species_filter::~Trail_species_filter() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.species_filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_species_filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trail_species_filter::ArenaDtor(void* object) {
  Trail_species_filter* _this = reinterpret_cast< Trail_species_filter* >(object);
  (void)_this;
}
void Trail_species_filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_species_filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_species_filter& Trail_species_filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_species_filter_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_species_filter::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.species_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asura_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sylvari_) -
      reinterpret_cast<char*>(&asura_)) + sizeof(sylvari_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_species_filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool asura = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asura_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool charr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          charr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool human = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          human_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool norn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          norn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sylvari = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sylvari_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_species_filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.species_filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool asura = 1;
  if (this->asura() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_asura(), target);
  }

  // bool charr = 2;
  if (this->charr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_charr(), target);
  }

  // bool human = 3;
  if (this->human() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_human(), target);
  }

  // bool norn = 4;
  if (this->norn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_norn(), target);
  }

  // bool sylvari = 5;
  if (this->sylvari() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sylvari(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.species_filter)
  return target;
}

size_t Trail_species_filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.species_filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool asura = 1;
  if (this->asura() != 0) {
    total_size += 1 + 1;
  }

  // bool charr = 2;
  if (this->charr() != 0) {
    total_size += 1 + 1;
  }

  // bool human = 3;
  if (this->human() != 0) {
    total_size += 1 + 1;
  }

  // bool norn = 4;
  if (this->norn() != 0) {
    total_size += 1 + 1;
  }

  // bool sylvari = 5;
  if (this->sylvari() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_species_filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.species_filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_species_filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_species_filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.species_filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.species_filter)
    MergeFrom(*source);
  }
}

void Trail_species_filter::MergeFrom(const Trail_species_filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.species_filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asura() != 0) {
    _internal_set_asura(from._internal_asura());
  }
  if (from.charr() != 0) {
    _internal_set_charr(from._internal_charr());
  }
  if (from.human() != 0) {
    _internal_set_human(from._internal_human());
  }
  if (from.norn() != 0) {
    _internal_set_norn(from._internal_norn());
  }
  if (from.sylvari() != 0) {
    _internal_set_sylvari(from._internal_sylvari());
  }
}

void Trail_species_filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.species_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_species_filter::CopyFrom(const Trail_species_filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.species_filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_species_filter::IsInitialized() const {
  return true;
}

void Trail_species_filter::InternalSwap(Trail_species_filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trail_species_filter, sylvari_)
      + sizeof(Trail_species_filter::sylvari_)
      - PROTOBUF_FIELD_OFFSET(Trail_species_filter, asura_)>(
          reinterpret_cast<char*>(&asura_),
          reinterpret_cast<char*>(&other->asura_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_species_filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_texture::InitAsDefaultInstance() {
  ::Proto_Node::_Trail_texture_default_instance_._instance.get_mutable()->original_token_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Trail_texture::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& original_token(const Trail_texture* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Trail_texture::_Internal::original_token(const Trail_texture* msg) {
  return *msg->original_token_;
}
void Trail_texture::clear_original_token() {
  if (GetArena() == nullptr && original_token_ != nullptr) {
    delete original_token_;
  }
  original_token_ = nullptr;
}
Trail_texture::Trail_texture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.texture)
}
Trail_texture::Trail_texture(const Trail_texture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  if (from._internal_has_original_token()) {
    original_token_ = new PROTOBUF_NAMESPACE_ID::Any(*from.original_token_);
  } else {
    original_token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.texture)
}

void Trail_texture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trail_texture_node_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_token_ = nullptr;
}

Trail_texture::~Trail_texture() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.texture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_texture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete original_token_;
}

void Trail_texture::ArenaDtor(void* object) {
  Trail_texture* _this = reinterpret_cast< Trail_texture* >(object);
  (void)_this;
}
void Trail_texture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_texture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_texture& Trail_texture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_texture_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_texture::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && original_token_ != nullptr) {
    delete original_token_;
  }
  original_token_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_texture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Trail.texture.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any original_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_texture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.texture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Trail.texture.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .google.protobuf.Any original_token = 2;
  if (this->has_original_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::original_token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.texture)
  return target;
}

size_t Trail_texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.texture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .google.protobuf.Any original_token = 2;
  if (this->has_original_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_texture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.texture)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_texture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_texture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.texture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.texture)
    MergeFrom(*source);
  }
}

void Trail_texture::MergeFrom(const Trail_texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.texture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.has_original_token()) {
    _internal_mutable_original_token()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_original_token());
  }
}

void Trail_texture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_texture::CopyFrom(const Trail_texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_texture::IsInitialized() const {
  return true;
}

void Trail_texture::InternalSwap(Trail_texture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(original_token_, other->original_token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_texture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail_trail_data::InitAsDefaultInstance() {
}
class Trail_trail_data::_Internal {
 public:
};

Trail_trail_data::Trail_trail_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail.trail_data)
}
Trail_trail_data::Trail_trail_data(const Trail_trail_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trail_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trail_data().empty()) {
    trail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trail_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail.trail_data)
}

void Trail_trail_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trail_trail_data_node_2eproto.base);
  trail_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Trail_trail_data::~Trail_trail_data() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail.trail_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail_trail_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trail_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Trail_trail_data::ArenaDtor(void* object) {
  Trail_trail_data* _this = reinterpret_cast< Trail_trail_data* >(object);
  (void)_this;
}
void Trail_trail_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail_trail_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail_trail_data& Trail_trail_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_trail_data_node_2eproto.base);
  return *internal_default_instance();
}


void Trail_trail_data::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail.trail_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trail_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail_trail_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string trail_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trail_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Trail.trail_data.trail_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail_trail_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail.trail_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trail_data = 1;
  if (this->trail_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trail_data().data(), static_cast<int>(this->_internal_trail_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Trail.trail_data.trail_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trail_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail.trail_data)
  return target;
}

size_t Trail_trail_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail.trail_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trail_data = 1;
  if (this->trail_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trail_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail_trail_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail.trail_data)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail_trail_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail_trail_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail.trail_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail.trail_data)
    MergeFrom(*source);
  }
}

void Trail_trail_data::MergeFrom(const Trail_trail_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail.trail_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trail_data().size() > 0) {
    _internal_set_trail_data(from._internal_trail_data());
  }
}

void Trail_trail_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail.trail_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail_trail_data::CopyFrom(const Trail_trail_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail.trail_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail_trail_data::IsInitialized() const {
  return true;
}

void Trail_trail_data::InternalSwap(Trail_trail_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trail_data_.Swap(&other->trail_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail_trail_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trail::InitAsDefaultInstance() {
  ::Proto_Node::_Trail_default_instance_._instance.get_mutable()->category_ = const_cast< ::Proto_Node::Category*>(
      ::Proto_Node::Category::internal_default_instance());
}
class Trail::_Internal {
 public:
  static const ::Proto_Node::Category& category(const Trail* msg);
};

const ::Proto_Node::Category&
Trail::_Internal::category(const Trail* msg) {
  return *msg->category_;
}
Trail::Trail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto_Node.Trail)
}
Trail::Trail(const Trail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bhdraft__schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bhdraft__schedule().empty()) {
    bhdraft__schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bhdraft__schedule(),
      GetArena());
  }
  if (from._internal_has_category()) {
    category_ = new ::Proto_Node::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  ::memcpy(&achievement_bit_, &from.achievement_bit_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_id_) -
    reinterpret_cast<char*>(&achievement_bit_)) + sizeof(map_id_));
  // @@protoc_insertion_point(copy_constructor:Proto_Node.Trail)
}

void Trail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trail_node_2eproto.base);
  bhdraft__schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_id_) -
      reinterpret_cast<char*>(&category_)) + sizeof(map_id_));
}

Trail::~Trail() {
  // @@protoc_insertion_point(destructor:Proto_Node.Trail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bhdraft__schedule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete category_;
}

void Trail::ArenaDtor(void* object) {
  Trail* _this = reinterpret_cast< Trail* >(object);
  (void)_this;
}
void Trail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trail& Trail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trail_node_2eproto.base);
  return *internal_default_instance();
}


void Trail::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto_Node.Trail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bhdraft__schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  ::memset(&achievement_bit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_id_) -
      reinterpret_cast<char*>(&achievement_bit_)) + sizeof(map_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed32 achievement_bit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          achievement_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // int32 achievement_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          achievement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float animation_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          animation_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool can_fade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          can_fade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance_fade_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          distance_fade_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distance_fade_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          distance_fade_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_wall = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_wall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bhdraft__schedule = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_bhdraft__schedule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto_Node.Trail.bhdraft__schedule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bhdraft__schedule_duration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          bhdraft__schedule_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scale = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Proto_Node.Category category = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_Node.Trail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 achievement_bit = 1;
  if (this->achievement_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_achievement_bit(), target);
  }

  // int32 achievement_id = 2;
  if (this->achievement_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_achievement_id(), target);
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_alpha(), target);
  }

  // float animation_speed = 4;
  if (!(this->animation_speed() <= 0 && this->animation_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_animation_speed(), target);
  }

  // bool can_fade = 5;
  if (this->can_fade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_can_fade(), target);
  }

  // float distance_fade_end = 6;
  if (!(this->distance_fade_end() <= 0 && this->distance_fade_end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_distance_fade_end(), target);
  }

  // float distance_fade_start = 7;
  if (!(this->distance_fade_start() <= 0 && this->distance_fade_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_distance_fade_start(), target);
  }

  // bool is_wall = 8;
  if (this->is_wall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_wall(), target);
  }

  // string bhdraft__schedule = 9;
  if (this->bhdraft__schedule().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bhdraft__schedule().data(), static_cast<int>(this->_internal_bhdraft__schedule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto_Node.Trail.bhdraft__schedule");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_bhdraft__schedule(), target);
  }

  // float bhdraft__schedule_duration = 10;
  if (!(this->bhdraft__schedule_duration() <= 0 && this->bhdraft__schedule_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_bhdraft__schedule_duration(), target);
  }

  // float scale = 11;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_scale(), target);
  }

  // .Proto_Node.Category category = 12;
  if (this->has_category()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::category(this), target, stream);
  }

  // int32 map_id = 13;
  if (this->map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_Node.Trail)
  return target;
}

size_t Trail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto_Node.Trail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bhdraft__schedule = 9;
  if (this->bhdraft__schedule().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bhdraft__schedule());
  }

  // .Proto_Node.Category category = 12;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  // fixed32 achievement_bit = 1;
  if (this->achievement_bit() != 0) {
    total_size += 1 + 4;
  }

  // int32 achievement_id = 2;
  if (this->achievement_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_achievement_id());
  }

  // float alpha = 3;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float animation_speed = 4;
  if (!(this->animation_speed() <= 0 && this->animation_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float distance_fade_end = 6;
  if (!(this->distance_fade_end() <= 0 && this->distance_fade_end() >= 0)) {
    total_size += 1 + 4;
  }

  // bool can_fade = 5;
  if (this->can_fade() != 0) {
    total_size += 1 + 1;
  }

  // bool is_wall = 8;
  if (this->is_wall() != 0) {
    total_size += 1 + 1;
  }

  // float distance_fade_start = 7;
  if (!(this->distance_fade_start() <= 0 && this->distance_fade_start() >= 0)) {
    total_size += 1 + 4;
  }

  // float bhdraft__schedule_duration = 10;
  if (!(this->bhdraft__schedule_duration() <= 0 && this->bhdraft__schedule_duration() >= 0)) {
    total_size += 1 + 4;
  }

  // float scale = 11;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 map_id = 13;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto_Node.Trail)
  GOOGLE_DCHECK_NE(&from, this);
  const Trail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto_Node.Trail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto_Node.Trail)
    MergeFrom(*source);
  }
}

void Trail::MergeFrom(const Trail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto_Node.Trail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bhdraft__schedule().size() > 0) {
    _internal_set_bhdraft__schedule(from._internal_bhdraft__schedule());
  }
  if (from.has_category()) {
    _internal_mutable_category()->::Proto_Node::Category::MergeFrom(from._internal_category());
  }
  if (from.achievement_bit() != 0) {
    _internal_set_achievement_bit(from._internal_achievement_bit());
  }
  if (from.achievement_id() != 0) {
    _internal_set_achievement_id(from._internal_achievement_id());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.animation_speed() <= 0 && from.animation_speed() >= 0)) {
    _internal_set_animation_speed(from._internal_animation_speed());
  }
  if (!(from.distance_fade_end() <= 0 && from.distance_fade_end() >= 0)) {
    _internal_set_distance_fade_end(from._internal_distance_fade_end());
  }
  if (from.can_fade() != 0) {
    _internal_set_can_fade(from._internal_can_fade());
  }
  if (from.is_wall() != 0) {
    _internal_set_is_wall(from._internal_is_wall());
  }
  if (!(from.distance_fade_start() <= 0 && from.distance_fade_start() >= 0)) {
    _internal_set_distance_fade_start(from._internal_distance_fade_start());
  }
  if (!(from.bhdraft__schedule_duration() <= 0 && from.bhdraft__schedule_duration() >= 0)) {
    _internal_set_bhdraft__schedule_duration(from._internal_bhdraft__schedule_duration());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.map_id() != 0) {
    _internal_set_map_id(from._internal_map_id());
  }
}

void Trail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto_Node.Trail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trail::CopyFrom(const Trail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto_Node.Trail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trail::IsInitialized() const {
  return true;
}

void Trail::InternalSwap(Trail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bhdraft__schedule_.Swap(&other->bhdraft__schedule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trail, map_id_)
      + sizeof(Trail::map_id_)
      - PROTOBUF_FIELD_OFFSET(Trail, category_)>(
          reinterpret_cast<char*>(&category_),
          reinterpret_cast<char*>(&other->category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto_Node
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto_Node::Category_ChildrenEntry_DoNotUse* Arena::CreateMaybeMessage< ::Proto_Node::Category_ChildrenEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Category_ChildrenEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Category* Arena::CreateMaybeMessage< ::Proto_Node::Category >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Category >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Icon_texture* Arena::CreateMaybeMessage< ::Proto_Node::Icon_texture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Icon_texture >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Icon_position* Arena::CreateMaybeMessage< ::Proto_Node::Icon_position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Icon_position >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Icon_euler_rotation* Arena::CreateMaybeMessage< ::Proto_Node::Icon_euler_rotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Icon_euler_rotation >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Icon_trigger_guid* Arena::CreateMaybeMessage< ::Proto_Node::Icon_trigger_guid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Icon_trigger_guid >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Icon_trigger* Arena::CreateMaybeMessage< ::Proto_Node::Icon_trigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Icon_trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Icon* Arena::CreateMaybeMessage< ::Proto_Node::Icon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Icon >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_color* Arena::CreateMaybeMessage< ::Proto_Node::Trail_color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_color >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_festival_filter* Arena::CreateMaybeMessage< ::Proto_Node::Trail_festival_filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_festival_filter >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_guid* Arena::CreateMaybeMessage< ::Proto_Node::Trail_guid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_guid >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_map_type_filter* Arena::CreateMaybeMessage< ::Proto_Node::Trail_map_type_filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_map_type_filter >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_mount_filter* Arena::CreateMaybeMessage< ::Proto_Node::Trail_mount_filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_mount_filter >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_profession_filter* Arena::CreateMaybeMessage< ::Proto_Node::Trail_profession_filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_profession_filter >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_specialization_filter* Arena::CreateMaybeMessage< ::Proto_Node::Trail_specialization_filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_specialization_filter >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_species_filter* Arena::CreateMaybeMessage< ::Proto_Node::Trail_species_filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_species_filter >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_texture* Arena::CreateMaybeMessage< ::Proto_Node::Trail_texture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_texture >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail_trail_data* Arena::CreateMaybeMessage< ::Proto_Node::Trail_trail_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail_trail_data >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto_Node::Trail* Arena::CreateMaybeMessage< ::Proto_Node::Trail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto_Node::Trail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
