#include "../src/hash_helpers.hpp"
#include <gtest/gtest.h>

class Hash128Test : public ::testing::Test {};

////////////////////////////////////////////////////////////////////////////////
// These test cases were computed in python using the code. Python was chosen
// because it is able to handle large integers natively.
//
// ```python
// start = 0
// for i in range(26):
//     start = start*33 + 97
//     print('TEST_HASH128_PROPAGATE("' + '{:032x}'.format(start) + '", ' + str(i+1) + ")")
// ```
////////////////////////////////////////////////////////////////////////////////
#define TEST_HASH128_PROPAGATE(EXPECTED_HASH, SIZE) \
    TEST_F(Hash128Test, Propagate##SIZE##Bytes) { \
        Hash128 hash(0,0); \
        hash.update(std::string(SIZE, 'a')); \
        EXPECT_EQ(hash.hex(), EXPECTED_HASH); \
    }
TEST_HASH128_PROPAGATE("00000000000000000000000000000000", 0)
TEST_HASH128_PROPAGATE("00000000000000000000000000000061", 1)
TEST_HASH128_PROPAGATE("00000000000000000000000000000ce2", 2)
TEST_HASH128_PROPAGATE("0000000000000000000000000001a983", 3)
TEST_HASH128_PROPAGATE("0000000000000000000000000036da44", 4)
TEST_HASH128_PROPAGATE("00000000000000000000000007122325", 5)
TEST_HASH128_PROPAGATE("000000000000000000000000e9568826", 6)
TEST_HASH128_PROPAGATE("00000000000000000000001e14278d47", 7)
TEST_HASH128_PROPAGATE("0000000000000000000003e099193688", 8)
TEST_HASH128_PROPAGATE("000000000000000000007ff3bc4007e9", 9)
TEST_HASH128_PROPAGATE("000000000000000000107e6b4441056a", 10)
TEST_HASH128_PROPAGATE("000000000000000002204bd3cc61b30b", 11)
TEST_HASH128_PROPAGATE("00000000000000004629c64d589814cc", 12)
// First test over a signle uint64
TEST_HASH128_PROPAGATE("00000000000000090b628ff86b9aaead", 13)
TEST_HASH128_PROPAGATE("000000000000012a77b48f05def084ae", 14)
TEST_HASH128_PROPAGATE("00000000000026796e466fc1bd011acf", 15)
TEST_HASH128_PROPAGATE("000000000004f5a7371467f95d247510", 16)
TEST_HASH128_PROPAGATE("0000000000a3aa8e19a1672501b31771", 17)
TEST_HASH128_PROPAGATE("000000001518fc514dce4bc5381605f2", 18)
TEST_HASH128_PROPAGATE("00000002b838867b0797c46c3ad6c493", 19)
TEST_HASH128_PROPAGATE("00000059bf4955dbfa9051f395af5754", 20)
TEST_HASH128_PROPAGATE("00000b91a874115b4c9a90664b9a4235", 21)
TEST_HASH128_PROPAGATE("00017dc6b6f63cc4dfec9d2fbee28936", 22)
TEST_HASH128_PROPAGATE("0031369d95bdd560dd8043279b33b057", 23)
TEST_HASH128_PROPAGATE("06580a504d78817c8d88a81b01a9bb98", 24)
TEST_HASH128_PROPAGATE("d1595459fc88b10e3e9dab7b36e12ef9", 25)
// First overflow of 128bit
TEST_HASH128_PROPAGATE("fc83df998d9ed2d612531ae213070e7a", 26)


////////////////////////////////////////////////////////////////////////////////
// These test cases were computed in python using the code. Python was chosen
// because it is able to handle large integers natively.
//
// ```python
// start = 0b01010110000011001111010000010011001111110101100111011011111001000000010010000001001101100111001011100111010110000100001101011110
// for i in range(26):
//     start = start*33 + 97
//     print('TEST_HASH128_PROPAGATE("' + '{:032x}'.format(start) + '", ' + str(i+1) + ")")
// ```
////////////////////////////////////////////////////////////////////////////////
#define TEST_HASH128_DEFAULT(EXPECTED_HASH, SIZE) \
    TEST_F(Hash128Test, Default##SIZE##Bytes) { \
        Hash128 hash; \
        hash.update(std::string(SIZE, 'a')); \
        EXPECT_EQ(hash.hex(), EXPECTED_HASH); \
    }
TEST_HASH128_DEFAULT("560cf4133f59dbe404813672e758435e", 0)
TEST_HASH128_DEFAULT("17ab767b2a95586494a804cfd260af7f", 1)
TEST_HASH128_DEFAULT("0d1a45e07d4064f729a89eca1e769fc0", 2)
TEST_HASH128_DEFAULT("b06301f0254d03dc5ebc780ded4a9821", 3)
TEST_HASH128_DEFAULT("bcc33ff4ceed7f68364b79cb969d9ca2", 4)
TEST_HASH128_DEFAULT("552b3e8eac9d6c6effbab33e6a513143", 5)
TEST_HASH128_DEFAULT("fa931064404afa4ef7111b0bb4775a04", 6)
TEST_HASH128_DEFAULT("4cf51cec49aa442dd9347c8243629ae5", 7)
TEST_HASH128_DEFAULT("eb98ba757ef2c9e8ffc40ccaafb5f7e6", 8)
TEST_HASH128_DEFAULT("5eb009255d4c0708f845a620a674f507", 9)
TEST_HASH128_DEFAULT("34b12dd106cce82800fa6a3575139648", 10)
TEST_HASH128_DEFAULT("cad6e7f1e069ed282047b0e417865fa9", 11)
TEST_HASH128_DEFAULT("25b3e62deda7922c293dcd670852552a", 12)
TEST_HASH128_DEFAULT("dc30abeba299d7b150f77a48129cfacb", 13)
TEST_HASH128_DEFAULT("6246295ff5d4cddb6fe6c34a663c548c", 14)
TEST_HASH128_DEFAULT("ab0b555eb06e89496cbf2c972dc6e66d", 15)
TEST_HASH128_DEFAULT("0c760134be3fb27704a4bf7ce6a3b46e", 16)
TEST_HASH128_DEFAULT("9b3627cc86360157993caf19bb1a428f", 17)
TEST_HASH128_DEFAULT("01fb215d4cf62c4ac0d292511e6294d0", 18)
TEST_HASH128_DEFAULT("415f4d06ebbbb5a2db24dc74eab52f31", 19)
TEST_HASH128_DEFAULT("6d48ede4633269fe3fc06b12415b15b2", 20)
TEST_HASH128_DEFAULT("1666aa70c97fa9c637cdcd5a6cbdcc53", 21)
TEST_HASH128_DEFAULT("e33bf889f974e28d318778a804775714", 22)
TEST_HASH128_DEFAULT("4abb09c92811343362768da8936239f5", 23)
TEST_HASH128_DEFAULT("a21c42ee2a37ba9fb14842baffa978f6", 24)
TEST_HASH128_DEFAULT("e5a4a0b3712f0e95da509a1af4d89817", 25)
TEST_HASH128_DEFAULT("9a38b7219710e1512463dd798feb9b58", 26)


class Hash64Test : public ::testing::Test {};

// These are copies of the 128 bit hash tests above trunkated to 64 bits
#define TEST_HASH64_PROPAGATE(EXPECTED_HASH, SIZE) \
    TEST_F(Hash64Test, Propagate##SIZE##Bytes) { \
        Hash64 hash(0); \
        hash.update(std::string(SIZE, 'a')); \
        EXPECT_EQ(hash.hex(), EXPECTED_HASH); \
    }
TEST_HASH64_PROPAGATE("0000000000000000", 0)
TEST_HASH64_PROPAGATE("0000000000000061", 1)
TEST_HASH64_PROPAGATE("0000000000000ce2", 2)
TEST_HASH64_PROPAGATE("000000000001a983", 3)
TEST_HASH64_PROPAGATE("000000000036da44", 4)
TEST_HASH64_PROPAGATE("0000000007122325", 5)
TEST_HASH64_PROPAGATE("00000000e9568826", 6)
TEST_HASH64_PROPAGATE("0000001e14278d47", 7)
TEST_HASH64_PROPAGATE("000003e099193688", 8)
TEST_HASH64_PROPAGATE("00007ff3bc4007e9", 9)
TEST_HASH64_PROPAGATE("00107e6b4441056a", 10)
TEST_HASH64_PROPAGATE("02204bd3cc61b30b", 11)
TEST_HASH64_PROPAGATE("4629c64d589814cc", 12)
TEST_HASH64_PROPAGATE("0b628ff86b9aaead", 13)
TEST_HASH64_PROPAGATE("77b48f05def084ae", 14)
TEST_HASH64_PROPAGATE("6e466fc1bd011acf", 15)
TEST_HASH64_PROPAGATE("371467f95d247510", 16)
TEST_HASH64_PROPAGATE("19a1672501b31771", 17)
TEST_HASH64_PROPAGATE("4dce4bc5381605f2", 18)
TEST_HASH64_PROPAGATE("0797c46c3ad6c493", 19)
TEST_HASH64_PROPAGATE("fa9051f395af5754", 20)
TEST_HASH64_PROPAGATE("4c9a90664b9a4235", 21)
TEST_HASH64_PROPAGATE("dfec9d2fbee28936", 22)
TEST_HASH64_PROPAGATE("dd8043279b33b057", 23)
TEST_HASH64_PROPAGATE("8d88a81b01a9bb98", 24)
TEST_HASH64_PROPAGATE("3e9dab7b36e12ef9", 25)
TEST_HASH64_PROPAGATE("12531ae213070e7a", 26)


#define TEST_HASH64_DEFAULT(EXPECTED_HASH, SIZE) \
    TEST_F(Hash64Test, Default##SIZE##Bytes) { \
        Hash64 hash; \
        hash.update(std::string(SIZE, 'a')); \
        EXPECT_EQ(hash.hex(), EXPECTED_HASH); \
    }
TEST_HASH64_DEFAULT("04813672e758435e", 0)
TEST_HASH64_DEFAULT("94a804cfd260af7f", 1)
TEST_HASH64_DEFAULT("29a89eca1e769fc0", 2)
TEST_HASH64_DEFAULT("5ebc780ded4a9821", 3)
TEST_HASH64_DEFAULT("364b79cb969d9ca2", 4)
TEST_HASH64_DEFAULT("ffbab33e6a513143", 5)
TEST_HASH64_DEFAULT("f7111b0bb4775a04", 6)
TEST_HASH64_DEFAULT("d9347c8243629ae5", 7)
TEST_HASH64_DEFAULT("ffc40ccaafb5f7e6", 8)
TEST_HASH64_DEFAULT("f845a620a674f507", 9)
TEST_HASH64_DEFAULT("00fa6a3575139648", 10)
TEST_HASH64_DEFAULT("2047b0e417865fa9", 11)
TEST_HASH64_DEFAULT("293dcd670852552a", 12)
TEST_HASH64_DEFAULT("50f77a48129cfacb", 13)
TEST_HASH64_DEFAULT("6fe6c34a663c548c", 14)
TEST_HASH64_DEFAULT("6cbf2c972dc6e66d", 15)
TEST_HASH64_DEFAULT("04a4bf7ce6a3b46e", 16)
TEST_HASH64_DEFAULT("993caf19bb1a428f", 17)
TEST_HASH64_DEFAULT("c0d292511e6294d0", 18)
TEST_HASH64_DEFAULT("db24dc74eab52f31", 19)
TEST_HASH64_DEFAULT("3fc06b12415b15b2", 20)
TEST_HASH64_DEFAULT("37cdcd5a6cbdcc53", 21)
TEST_HASH64_DEFAULT("318778a804775714", 22)
TEST_HASH64_DEFAULT("62768da8936239f5", 23)
TEST_HASH64_DEFAULT("b14842baffa978f6", 24)
TEST_HASH64_DEFAULT("da509a1af4d89817", 25)
TEST_HASH64_DEFAULT("2463dd798feb9b58", 26)